{
  "item": [
    {
      "id": "8a7c6452-2a03-4c36-8468-712385fc86d3",
      "name": "Authorization",
      "item": [
        {
          "id": "e5746af7-da57-4705-92d8-0dcc1e0fc59a",
          "name": "Authorize a user",
          "request": {
            "name": "Authorize a user",
            "description": {
              "content": "Authorize a user by sending them through the [Box](https://box.com)\nwebsite and request their permission to act on their behalf.\n\nThis is the first step when authenticating a user using\nOAuth 2.0. To request a user's authorization to use the Box APIs\non their behalf you will need to send a user to the URL with this\nformat.",
              "type": "text/plain"
            },
            "url": {
              "protocol": "https",
              "path": [
                "api",
                "oauth2",
                "authorize"
              ],
              "host": [
                "account",
                "box",
                "com"
              ],
              "query": [
                {
                  "description": "The type of response we'd like to receive.",
                  "key": "response_type",
                  "value": "<token>"
                },
                {
                  "description": "The Client ID of the application that is requesting to authenticate\nthe user. To get the Client ID for your application, log in to your\nBox developer console and click the **Edit Application** link for\nthe application you're working with. In the OAuth2 Parameters section\nof the configuration page, find the item labeled **client_id**. The\ntext of that item is your application's Client ID.",
                  "key": "client_id",
                  "value": "<string>"
                },
                {
                  "description": "The URL to which Box redirects the browser after the user has granted\nor rejected the application permission. This URL must match the\nredirect URL in the configuration of your application. It must be a\nvalid HTTPS URL and it needs to be able to handle the redirection to\ncomplete the next step in the OAuth2 flow.",
                  "key": "redirect_uri",
                  "value": "<url>"
                },
                {
                  "description": "A custom string of your choice. Box will pass the same string to\nthe redirect URL when authentication is complete. This parameter\ncan be used to identify a user on redirect, as well as protect\nagainst hijacked sessions and other attacks.",
                  "key": "state",
                  "value": "<string>"
                },
                {
                  "description": "A comma-separated list of application scopes you'd like to\nauthenticate the user for. This defaults to all the scopes configured\nfor the application in its configuration page.",
                  "key": "scope",
                  "value": "<string>"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "noauth"
            }
          },
          "response": [
            {
              "id": "db2980a9-4c05-4937-a559-7d046fe46948",
              "name": "Does not return any data, but rather should be used in the browser.",
              "originalRequest": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "oauth2",
                    "authorize"
                  ],
                  "host": [
                    "account",
                    "box",
                    "com"
                  ],
                  "query": [
                    {
                      "key": "response_type",
                      "value": "<token>"
                    },
                    {
                      "key": "client_id",
                      "value": "<string>"
                    },
                    {
                      "key": "redirect_uri",
                      "value": "<url>"
                    },
                    {
                      "key": "state",
                      "value": "<string>"
                    },
                    {
                      "key": "scope",
                      "value": "<string>"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/html"
                }
              ],
              "body": "<html>",
              "cookie": [],
              "_postman_previewlanguage": "text"
            }
          ],
          "event": []
        },
        {
          "id": "e5f9493c-5baf-4e05-9b03-7cd232178a9b",
          "name": "Request an access token",
          "request": {
            "name": "Request an access token",
            "description": {
              "content": "Request an Access Token using either a client-side obtained OAuth2\nauthorization code or a server-side JWT assertion.\n\nAn Access Token is a string that enables Box to verify that a\nrequest belongs to an authorized session. In the normal order of\noperations you will begin by requesting authentication from the\n[authorize](#get-authorize) endpoint and Box will send you an\nauthorization code.\n\nYou will then send this code to this endpoint to exchange it for\nan Access Token. The returned Access Token can then be used to to make\nBox API calls.",
              "type": "text/plain"
            },
            "url": {
              "protocol": "https",
              "path": [
                "oauth2",
                "token"
              ],
              "host": [
                "api",
                "box",
                "com"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/x-www-form-urlencoded"
              }
            ],
            "method": "POST",
            "auth": {
              "type": "noauth"
            },
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "grant_type",
                  "value": "<urn>"
                },
                {
                  "key": "client_id",
                  "value": "<string>"
                },
                {
                  "key": "client_secret",
                  "value": "<string>"
                },
                {
                  "key": "code",
                  "value": "<token>"
                },
                {
                  "key": "refresh_token",
                  "value": "<token>"
                },
                {
                  "key": "assertion",
                  "value": "<jwt>"
                },
                {
                  "key": "subject_token",
                  "value": "<token>"
                },
                {
                  "key": "subject_token_type",
                  "value": "<string>"
                },
                {
                  "key": "actor_token",
                  "value": "<token>"
                },
                {
                  "key": "actor_token_type",
                  "value": "<urn>"
                },
                {
                  "key": "scope",
                  "value": "<space_delimited_list>"
                },
                {
                  "key": "resource",
                  "value": "<url>"
                }
              ]
            }
          },
          "response": [
            {
              "id": "16313d18-3f54-4ab8-8f21-9098b52f590c",
              "name": "Returns a new Access Token that can be used to make authenticated\nAPI calls by passing along the token in a authorization header as\nfollows `Authorization: Bearer <Token>`.",
              "originalRequest": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "oauth2",
                    "token"
                  ],
                  "host": [
                    "api",
                    "box",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/x-www-form-urlencoded"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "urlencoded",
                  "urlencoded": [
                    {
                      "key": "grant_type",
                      "value": "<urn>"
                    },
                    {
                      "key": "client_id",
                      "value": "<string>"
                    },
                    {
                      "key": "client_secret",
                      "value": "<string>"
                    },
                    {
                      "key": "code",
                      "value": "<token>"
                    },
                    {
                      "key": "refresh_token",
                      "value": "<token>"
                    },
                    {
                      "key": "assertion",
                      "value": "<jwt>"
                    },
                    {
                      "key": "subject_token",
                      "value": "<token>"
                    },
                    {
                      "key": "subject_token_type",
                      "value": "<string>"
                    },
                    {
                      "key": "actor_token",
                      "value": "<token>"
                    },
                    {
                      "key": "actor_token_type",
                      "value": "<urn>"
                    },
                    {
                      "key": "scope",
                      "value": "<space_delimited_list>"
                    },
                    {
                      "key": "resource",
                      "value": "<url>"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"access_token\": \"<token>\",\n \"expires_in\": \"<long>\",\n \"token_type\": \"<string>\",\n \"restricted_to\": [\n  {\n   \"scope\": \"<string>\",\n   \"object\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\"\n   }\n  },\n  {\n   \"scope\": \"<string>\",\n   \"object\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\"\n   }\n  }\n ],\n \"refresh_token\": \"<token>\",\n \"issued_token_type\": \"<urn>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "a711cd3d-278c-444e-9672-7df4a7db1cb0",
              "name": "An authentication error.",
              "originalRequest": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "oauth2",
                    "token"
                  ],
                  "host": [
                    "api",
                    "box",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/x-www-form-urlencoded"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "urlencoded",
                  "urlencoded": [
                    {
                      "key": "grant_type",
                      "value": "<urn>"
                    },
                    {
                      "key": "client_id",
                      "value": "<string>"
                    },
                    {
                      "key": "client_secret",
                      "value": "<string>"
                    },
                    {
                      "key": "code",
                      "value": "<token>"
                    },
                    {
                      "key": "refresh_token",
                      "value": "<token>"
                    },
                    {
                      "key": "assertion",
                      "value": "<jwt>"
                    },
                    {
                      "key": "subject_token",
                      "value": "<token>"
                    },
                    {
                      "key": "subject_token_type",
                      "value": "<string>"
                    },
                    {
                      "key": "actor_token",
                      "value": "<token>"
                    },
                    {
                      "key": "actor_token_type",
                      "value": "<urn>"
                    },
                    {
                      "key": "scope",
                      "value": "<space_delimited_list>"
                    },
                    {
                      "key": "resource",
                      "value": "<url>"
                    }
                  ]
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"error\": \"<string>\",\n \"error_description\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "d79a0033-fc40-4bfe-9270-6958cc0186c5",
          "name": "Revoke an access token",
          "request": {
            "name": "Revoke an access token",
            "description": {
              "content": "Revoke an active Access Token, effectively logging a user out\nthat has been previously authenticated.",
              "type": "text/plain"
            },
            "url": {
              "protocol": "https",
              "path": [
                "oauth2",
                "revoke"
              ],
              "host": [
                "api",
                "box",
                "com"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/x-www-form-urlencoded"
              }
            ],
            "method": "POST",
            "auth": {
              "type": "noauth"
            },
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "client_id",
                  "value": "<string>"
                },
                {
                  "key": "client_secret",
                  "value": "<string>"
                },
                {
                  "key": "token",
                  "value": "<token>"
                }
              ]
            }
          },
          "response": [
            {
              "id": "54a30151-1a2c-4150-8534-e1b40fbc5156",
              "name": "Returns an empty response when the token was successfully revoked.",
              "originalRequest": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "oauth2",
                    "revoke"
                  ],
                  "host": [
                    "api",
                    "box",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/x-www-form-urlencoded"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "urlencoded",
                  "urlencoded": [
                    {
                      "key": "client_id",
                      "value": "<string>"
                    },
                    {
                      "key": "client_secret",
                      "value": "<string>"
                    },
                    {
                      "key": "token",
                      "value": "<token>"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "131faf28-2ab8-43bb-85bd-43b64a3c93d2",
              "name": "An authentication error.",
              "originalRequest": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "oauth2",
                    "revoke"
                  ],
                  "host": [
                    "api",
                    "box",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/x-www-form-urlencoded"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "urlencoded",
                  "urlencoded": [
                    {
                      "key": "client_id",
                      "value": "<string>"
                    },
                    {
                      "key": "client_secret",
                      "value": "<string>"
                    },
                    {
                      "key": "token",
                      "value": "<token>"
                    }
                  ]
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"error\": \"<string>\",\n \"error_description\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        }
      ]
    },
    {
      "id": "7c16c948-ed46-41d3-b1db-0e0c7550b93f",
      "name": "Files",
      "item": [
        {
          "id": "975be65c-d079-496b-86e1-22c43ad0ecf8",
          "name": "Get a file",
          "request": {
            "name": "Get a file",
            "description": {
              "content": "Retrieves the details about a file.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "files",
                ":file_id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response, unless explicitly specified.",
                  "key": "fields",
                  "value": "<string>,<string>"
                }
              ],
              "variable": [
                {
                  "description": {
                    "content": "The ID of the file.",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "file_id"
                }
              ]
            },
            "method": "GET",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "0604a281-2538-4841-921c-f0c26af2cb29",
              "name": "Returns a file object.\n\n[Some fields are optional](#file) and need to be explicitly\nrequested using the [fields](#get-files-id--request--fields)\nparameter.",
              "originalRequest": {
                "url": {
                  "path": [
                    "files",
                    "<string>"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "<string>,<string>"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"id\": \"<string>\",\n \"type\": \"<string>\",\n \"sequence_id\": \"<string>\",\n \"etag\": \"<string>\",\n \"name\": \"<string>\",\n \"sha1\": \"<digest>\",\n \"description\": \"<string>\",\n \"size\": \"<integer>\",\n \"path_collection\": [\n  {\n   \"id\": \"<string>\",\n   \"type\": \"<string>\",\n   \"sequence_id\": \"<string>\",\n   \"etag\": \"<string>\",\n   \"name\": \"<string>\"\n  },\n  {\n   \"id\": \"<string>\",\n   \"type\": \"<string>\",\n   \"sequence_id\": \"<string>\",\n   \"etag\": \"<string>\",\n   \"name\": \"<string>\"\n  }\n ],\n \"created_at\": \"<dateTime>\",\n \"modified_at\": \"<dateTime>\",\n \"trashed_at\": \"<dateTime>\",\n \"purged_at\": \"<dateTime>\",\n \"content_created_at\": \"<dateTime>\",\n \"content_modified_at\": \"<dateTime>\",\n \"expires_at\": \"<dateTime>\",\n \"created_by\": {\n  \"id\": \"<string>\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"modified_by\": {\n  \"id\": \"<string>\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"owned_by\": {\n  \"id\": \"<string>\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"shared_link\": {\n  \"url\": \"<url>\",\n  \"download_url\": \"<url>\",\n  \"vanity_url\": \"<url>\",\n  \"access\": \"<string>\",\n  \"effective_access\": \"<string>\",\n  \"effective_permission\": \"<string>\",\n  \"unshared_at\": \"<dateTime>\",\n  \"is_password_enabled\": \"<boolean>\",\n  \"permissions\": {\n   \"can_download\": \"<boolean>\",\n   \"can_preview\": \"<boolean>\"\n  },\n  \"download_count\": \"<integer>\",\n  \"preview_count\": \"<integer>\"\n },\n \"parent\": {\n  \"id\": \"<string>\",\n  \"type\": \"<string>\",\n  \"sequence_id\": \"<string>\",\n  \"etag\": \"<string>\",\n  \"name\": \"<string>\"\n },\n \"item_status\": \"<string>\",\n \"version_number\": \"<string>\",\n \"comment_count\": \"<integer>\",\n \"permissions\": {\n  \"can_delete\": \"<boolean>\",\n  \"can_download\": \"<boolean>\",\n  \"can_invite_collaborator\": \"<boolean>\",\n  \"can_rename\": \"<boolean>\",\n  \"can_set_share_access\": \"<boolean>\",\n  \"can_share\": \"<boolean>\",\n  \"can_annotate\": \"<boolean>\",\n  \"can_comment\": \"<boolean>\",\n  \"can_preview\": \"<boolean>\",\n  \"can_upload\": \"<boolean>\",\n  \"can_view_annotations_all\": \"<boolean>\",\n  \"can_view_annotations_self\": \"<boolean>\"\n },\n \"tags\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"lock\": {\n  \"id\": \"<string>\",\n  \"type\": \"<string>\",\n  \"created_by\": {\n   \"id\": \"<string>\",\n   \"type\": \"<string>\",\n   \"name\": \"<string>\",\n   \"login\": \"<email>\"\n  },\n  \"created_at\": \"<dateTime>\",\n  \"expired_at\": \"<dateTime>\",\n  \"is_download_prevented\": \"<boolean>\"\n },\n \"extension\": \"<string>\",\n \"is_package\": \"<boolean>\",\n \"expiring_embed_link\": \"<string>\",\n \"watermark_info\": {\n  \"is_watermarked\": \"<boolean>\"\n },\n \"allowed_invitee_roles\": \"company\",\n \"is_externally_owned\": \"<boolean>\",\n \"has_collaborations\": \"<boolean>\",\n \"metadata\": \"<object>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "79d893e7-48cd-4cd3-b9d3-06cda0716afc",
          "name": "Update a file",
          "request": {
            "name": "Update a file",
            "description": {
              "content": "Updates a file. This can be used to rename or move a file,\ncreate a shared link, or lock a file.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "files",
                ":file_id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response, unless explicitly specified.",
                  "key": "fields",
                  "value": "<string>,<string>"
                }
              ],
              "variable": [
                {
                  "description": {
                    "content": "The ID of the file.",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "file_id"
                }
              ]
            },
            "header": [
              {
                "key": "If-Match",
                "value": "<string>",
                "description": "Ensure this item hasn't recently changed\nby ensuring the item's current `etag` matches the\n`etag` passed into this header."
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "auth": {
              "type": "oauth2"
            },
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"parent\": {\n        \"id\": \"<string>\"\n    },\n    \"shared_link\": {\n        \"access\": \"<string>\",\n        \"password\": \"<string>\",\n        \"unshared_at\": \"<dateTime>\",\n        \"permissions\": {\n            \"can_download\": \"<boolean>\"\n        }\n    },\n    \"lock\": {\n        \"access\": \"<string>\",\n        \"expires_at\": \"<dateTime>\",\n        \"is_download_prevented\": \"<boolean>\"\n    },\n    \"permissions\": {\n        \"can_download\": \"<string>\"\n    },\n    \"tags\": [\n        \"<string>\",\n        \"<string>\"\n    ]\n}"
            }
          },
          "response": [
            {
              "id": "c214ff18-b193-4878-a0e2-935bf04e8089",
              "name": "Returns a file object.\n\n[Some fields are optional](#file) and need to be explicitly\nrequested using the [fields](#get-files-id--request--fields)\nparameter.",
              "originalRequest": {
                "url": {
                  "path": [
                    "files",
                    "<string>"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "<string>,<string>"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Ensure this item hasn't recently changed\nby ensuring the item's current `etag` matches the\n`etag` passed into this header.",
                      "type": "text/plain"
                    },
                    "key": "If-Match",
                    "value": "<string>"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"parent\": {\n        \"id\": \"<string>\"\n    },\n    \"shared_link\": {\n        \"access\": \"<string>\",\n        \"password\": \"<string>\",\n        \"unshared_at\": \"<dateTime>\",\n        \"permissions\": {\n            \"can_download\": \"<boolean>\"\n        }\n    },\n    \"lock\": {\n        \"access\": \"<string>\",\n        \"expires_at\": \"<dateTime>\",\n        \"is_download_prevented\": \"<boolean>\"\n    },\n    \"permissions\": {\n        \"can_download\": \"<string>\"\n    },\n    \"tags\": [\n        \"<string>\",\n        \"<string>\"\n    ]\n}"
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"id\": \"<string>\",\n \"type\": \"<string>\",\n \"sequence_id\": \"<string>\",\n \"etag\": \"<string>\",\n \"name\": \"<string>\",\n \"sha1\": \"<digest>\",\n \"description\": \"<string>\",\n \"size\": \"<integer>\",\n \"path_collection\": [\n  {\n   \"id\": \"<string>\",\n   \"type\": \"<string>\",\n   \"sequence_id\": \"<string>\",\n   \"etag\": \"<string>\",\n   \"name\": \"<string>\"\n  },\n  {\n   \"id\": \"<string>\",\n   \"type\": \"<string>\",\n   \"sequence_id\": \"<string>\",\n   \"etag\": \"<string>\",\n   \"name\": \"<string>\"\n  }\n ],\n \"created_at\": \"<dateTime>\",\n \"modified_at\": \"<dateTime>\",\n \"trashed_at\": \"<dateTime>\",\n \"purged_at\": \"<dateTime>\",\n \"content_created_at\": \"<dateTime>\",\n \"content_modified_at\": \"<dateTime>\",\n \"expires_at\": \"<dateTime>\",\n \"created_by\": {\n  \"id\": \"<string>\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"modified_by\": {\n  \"id\": \"<string>\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"owned_by\": {\n  \"id\": \"<string>\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"shared_link\": {\n  \"url\": \"<url>\",\n  \"download_url\": \"<url>\",\n  \"vanity_url\": \"<url>\",\n  \"access\": \"<string>\",\n  \"effective_access\": \"<string>\",\n  \"effective_permission\": \"<string>\",\n  \"unshared_at\": \"<dateTime>\",\n  \"is_password_enabled\": \"<boolean>\",\n  \"permissions\": {\n   \"can_download\": \"<boolean>\",\n   \"can_preview\": \"<boolean>\"\n  },\n  \"download_count\": \"<integer>\",\n  \"preview_count\": \"<integer>\"\n },\n \"parent\": {\n  \"id\": \"<string>\",\n  \"type\": \"<string>\",\n  \"sequence_id\": \"<string>\",\n  \"etag\": \"<string>\",\n  \"name\": \"<string>\"\n },\n \"item_status\": \"<string>\",\n \"version_number\": \"<string>\",\n \"comment_count\": \"<integer>\",\n \"permissions\": {\n  \"can_delete\": \"<boolean>\",\n  \"can_download\": \"<boolean>\",\n  \"can_invite_collaborator\": \"<boolean>\",\n  \"can_rename\": \"<boolean>\",\n  \"can_set_share_access\": \"<boolean>\",\n  \"can_share\": \"<boolean>\",\n  \"can_annotate\": \"<boolean>\",\n  \"can_comment\": \"<boolean>\",\n  \"can_preview\": \"<boolean>\",\n  \"can_upload\": \"<boolean>\",\n  \"can_view_annotations_all\": \"<boolean>\",\n  \"can_view_annotations_self\": \"<boolean>\"\n },\n \"tags\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"lock\": {\n  \"id\": \"<string>\",\n  \"type\": \"<string>\",\n  \"created_by\": {\n   \"id\": \"<string>\",\n   \"type\": \"<string>\",\n   \"name\": \"<string>\",\n   \"login\": \"<email>\"\n  },\n  \"created_at\": \"<dateTime>\",\n  \"expired_at\": \"<dateTime>\",\n  \"is_download_prevented\": \"<boolean>\"\n },\n \"extension\": \"<string>\",\n \"is_package\": \"<boolean>\",\n \"expiring_embed_link\": \"<string>\",\n \"watermark_info\": {\n  \"is_watermarked\": \"<boolean>\"\n },\n \"allowed_invitee_roles\": \"open\",\n \"is_externally_owned\": \"<boolean>\",\n \"has_collaborations\": \"<boolean>\",\n \"metadata\": \"<object>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "967cd491-4e2a-43ea-a0cc-1a8267d2a29a",
          "name": "Delete a file",
          "request": {
            "name": "Delete a file",
            "description": {
              "content": "Deletes a file, either permanently or by moving it to\nthe trash.\n\nThe the enterprise settings determine whether the item will\nbe permanently deleted from Box or moved to the trash.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "files",
                ":file_id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "The ID of the file.",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "file_id"
                }
              ]
            },
            "header": [
              {
                "key": "If-Match",
                "value": "<string>",
                "description": "Ensure this item hasn't recently changed\nby ensuring the item's current `etag` matches the\n`etag` passed into this header."
              }
            ],
            "method": "DELETE",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "9bb67f1c-fff8-4a09-b2a0-9353eaf4cb72",
              "name": "Returns an empty response when the file has been successfully\ndeleted.",
              "originalRequest": {
                "url": {
                  "path": [
                    "files",
                    "<string>"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Ensure this item hasn't recently changed\nby ensuring the item's current `etag` matches the\n`etag` passed into this header.",
                      "type": "text/plain"
                    },
                    "key": "If-Match",
                    "value": "<string>"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "No Content",
              "code": 204,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "15cb8d82-e300-451e-8484-ed83880d62cb",
              "name": "If the `If-Match` header was sent and the file has since changed, the\nAPI will return a `412 Precondition Failed` error.",
              "originalRequest": {
                "url": {
                  "path": [
                    "files",
                    "<string>"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Ensure this item hasn't recently changed\nby ensuring the item's current `etag` matches the\n`etag` passed into this header.",
                      "type": "text/plain"
                    },
                    "key": "If-Match",
                    "value": "<string>"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "Precondition Failed",
              "code": 412,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "f9d602fe-852f-4315-887a-6a8a1c961e07",
          "name": "Download a file",
          "request": {
            "name": "Download a file",
            "description": {
              "content": "Returns the contents of a file in binary format.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "files",
                ":file_id",
                "content"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "description": "The file version to download",
                  "key": "version",
                  "value": "<string>"
                }
              ],
              "variable": [
                {
                  "description": {
                    "content": "The ID of the file.",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "file_id"
                }
              ]
            },
            "header": [
              {
                "key": "Range",
                "value": "<string>",
                "description": "The byte range of the content to download.\n\nThe format `{start_byte}-{end_byte}` can be used to specify\nwhat section of the file to download."
              },
              {
                "key": "BoxApi",
                "value": "<string>",
                "description": "The URL and password for a file that has\nbeen shared using a shared link, as this file would otherwise\nnot be accessible to the user.\n\nUse the format `shared_link=SHARED_LINK_URL` or if a password was set\nuse `shared_link=[link]&shared_link_password=[password]`"
              }
            ],
            "method": "GET",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "741f7af7-9887-427e-bc44-cba842fb9dfe",
              "name": "If the file is not ready to be downloaded yet `Retry-After` header will\nbe returned indicating the time in seconds after which the file will\nbe available for the client to download.\n\nThis response can occur when the file was uploaded immediately before the\ndownload request.",
              "originalRequest": {
                "url": {
                  "path": [
                    "files",
                    "<string>",
                    "content"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "version",
                      "value": "<string>"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "The byte range of the content to download.\n\nThe format `{start_byte}-{end_byte}` can be used to specify\nwhat section of the file to download.",
                      "type": "text/plain"
                    },
                    "key": "Range",
                    "value": "<string>"
                  },
                  {
                    "description": {
                      "content": "The URL and password for a file that has\nbeen shared using a shared link, as this file would otherwise\nnot be accessible to the user.\n\nUse the format `shared_link=SHARED_LINK_URL` or if a password was set\nuse `shared_link=[link]&shared_link_password=[password]`",
                      "type": "text/plain"
                    },
                    "key": "BoxApi",
                    "value": "<string>"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Accepted",
              "code": 202,
              "header": [
                {
                  "key": "Retry-After",
                  "value": "<integer>",
                  "description": "The time in seconds after which to retry the download"
                },
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "218f39dd-048d-43d4-af7a-ce3b74c4099b",
              "name": "If the file is available to be downloaded the response will include a\n`Location` header for the file on `dl.boxcloud.com`.\n\nThe `dl.boxcloud.com` URL is not persistent and clients will need\nto follow the redirect in order to actually download the file.",
              "originalRequest": {
                "url": {
                  "path": [
                    "files",
                    "<string>",
                    "content"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "version",
                      "value": "<string>"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "The byte range of the content to download.\n\nThe format `{start_byte}-{end_byte}` can be used to specify\nwhat section of the file to download.",
                      "type": "text/plain"
                    },
                    "key": "Range",
                    "value": "<string>"
                  },
                  {
                    "description": {
                      "content": "The URL and password for a file that has\nbeen shared using a shared link, as this file would otherwise\nnot be accessible to the user.\n\nUse the format `shared_link=SHARED_LINK_URL` or if a password was set\nuse `shared_link=[link]&shared_link_password=[password]`",
                      "type": "text/plain"
                    },
                    "key": "BoxApi",
                    "value": "<string>"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Found",
              "code": 302,
              "header": [
                {
                  "key": "Location",
                  "value": "<url>",
                  "description": "A pointer to the download URL"
                },
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            }
          ],
          "event": []
        },
        {
          "id": "228ae76f-6280-4fab-a788-8793483ecf4c",
          "name": "Copy a file",
          "request": {
            "name": "Copy a file",
            "description": {
              "content": "Creates a copy of a file.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "files",
                ":file_id",
                "copy"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response, unless explicitly specified.",
                  "key": "fields",
                  "value": "<string>,<string>"
                }
              ],
              "variable": [
                {
                  "description": {
                    "content": "The ID of the file.",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "file_id"
                }
              ]
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": {
              "type": "oauth2"
            },
            "body": {
              "mode": "raw",
              "raw": "{\n    \"parent\": {\n        \"id\": \"<string>\"\n    },\n    \"name\": \"<string>\",\n    \"version\": \"<string>\"\n}"
            }
          },
          "response": [
            {
              "id": "b32ed5b1-75db-46be-8fd0-d65e0ae11d04",
              "name": "Returns a new file object representing the copied file.\n\n[Some fields are optional](#file) and need to be explicitly\nrequested using the [fields](#post-files-id-copy--request--fields)\nparameter.",
              "originalRequest": {
                "url": {
                  "path": [
                    "files",
                    "<string>",
                    "copy"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "<string>,<string>"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"parent\": {\n        \"id\": \"<string>\"\n    },\n    \"name\": \"<string>\",\n    \"version\": \"<string>\"\n}"
                }
              },
              "status": "Created",
              "code": 201,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"id\": \"<string>\",\n \"type\": \"<string>\",\n \"sequence_id\": \"<string>\",\n \"etag\": \"<string>\",\n \"name\": \"<string>\",\n \"sha1\": \"<digest>\",\n \"description\": \"<string>\",\n \"size\": \"<integer>\",\n \"path_collection\": [\n  {\n   \"id\": \"<string>\",\n   \"type\": \"<string>\",\n   \"sequence_id\": \"<string>\",\n   \"etag\": \"<string>\",\n   \"name\": \"<string>\"\n  },\n  {\n   \"id\": \"<string>\",\n   \"type\": \"<string>\",\n   \"sequence_id\": \"<string>\",\n   \"etag\": \"<string>\",\n   \"name\": \"<string>\"\n  }\n ],\n \"created_at\": \"<dateTime>\",\n \"modified_at\": \"<dateTime>\",\n \"trashed_at\": \"<dateTime>\",\n \"purged_at\": \"<dateTime>\",\n \"content_created_at\": \"<dateTime>\",\n \"content_modified_at\": \"<dateTime>\",\n \"expires_at\": \"<dateTime>\",\n \"created_by\": {\n  \"id\": \"<string>\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"modified_by\": {\n  \"id\": \"<string>\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"owned_by\": {\n  \"id\": \"<string>\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"shared_link\": {\n  \"url\": \"<url>\",\n  \"download_url\": \"<url>\",\n  \"vanity_url\": \"<url>\",\n  \"access\": \"<string>\",\n  \"effective_access\": \"<string>\",\n  \"effective_permission\": \"<string>\",\n  \"unshared_at\": \"<dateTime>\",\n  \"is_password_enabled\": \"<boolean>\",\n  \"permissions\": {\n   \"can_download\": \"<boolean>\",\n   \"can_preview\": \"<boolean>\"\n  },\n  \"download_count\": \"<integer>\",\n  \"preview_count\": \"<integer>\"\n },\n \"parent\": {\n  \"id\": \"<string>\",\n  \"type\": \"<string>\",\n  \"sequence_id\": \"<string>\",\n  \"etag\": \"<string>\",\n  \"name\": \"<string>\"\n },\n \"item_status\": \"<string>\",\n \"version_number\": \"<string>\",\n \"comment_count\": \"<integer>\",\n \"permissions\": {\n  \"can_delete\": \"<boolean>\",\n  \"can_download\": \"<boolean>\",\n  \"can_invite_collaborator\": \"<boolean>\",\n  \"can_rename\": \"<boolean>\",\n  \"can_set_share_access\": \"<boolean>\",\n  \"can_share\": \"<boolean>\",\n  \"can_annotate\": \"<boolean>\",\n  \"can_comment\": \"<boolean>\",\n  \"can_preview\": \"<boolean>\",\n  \"can_upload\": \"<boolean>\",\n  \"can_view_annotations_all\": \"<boolean>\",\n  \"can_view_annotations_self\": \"<boolean>\"\n },\n \"tags\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"lock\": {\n  \"id\": \"<string>\",\n  \"type\": \"<string>\",\n  \"created_by\": {\n   \"id\": \"<string>\",\n   \"type\": \"<string>\",\n   \"name\": \"<string>\",\n   \"login\": \"<email>\"\n  },\n  \"created_at\": \"<dateTime>\",\n  \"expired_at\": \"<dateTime>\",\n  \"is_download_prevented\": \"<boolean>\"\n },\n \"extension\": \"<string>\",\n \"is_package\": \"<boolean>\",\n \"expiring_embed_link\": \"<string>\",\n \"watermark_info\": {\n  \"is_watermarked\": \"<boolean>\"\n },\n \"allowed_invitee_roles\": \"open\",\n \"is_externally_owned\": \"<boolean>\",\n \"has_collaborations\": \"<boolean>\",\n \"metadata\": \"<object>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "255bda9c-fd55-4b2a-9568-040150ea13b0",
              "name": "* `operation_blocked_temporary`: Returned if either of the destination\n  or source folders is locked due to another move, copy, delete or\n  restore operation in process.\n\n  The operation can be retried at a later point.",
              "originalRequest": {
                "url": {
                  "path": [
                    "files",
                    "<string>",
                    "copy"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "<string>,<string>"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"parent\": {\n        \"id\": \"<string>\"\n    },\n    \"name\": \"<string>\",\n    \"version\": \"<string>\"\n}"
                }
              },
              "status": "Conflict",
              "code": 409,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "b931564a-54a7-4220-95f8-31420d8f6cce",
          "name": "Get a file thumbnail",
          "request": {
            "name": "Get a file thumbnail",
            "description": {
              "content": "Retrieves a thumbnail, or smaller image representation, of a file.\n\nSizes of `32x32`,`64x64`, `128x128`, and `256x256` can be returned in\nthe `.png` format and sizes of `32x32`, `94x94`, `160x160`, and `320x320`\ncan be returned in the `.jpg` format.\n\nThumbnails can be generated for the image and video file formats listed\n[found on our community site](http://community.box.com/t5/Managing-\\\nYour-Content/What-file-types-are-supported-by-Box-s-Content-Preview/\\\nta-p/327).",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "files",
                ":file_id",
                "thumbnail.:extension"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "description": "The minimum height of the thumbnail",
                  "key": "min_height",
                  "value": "<long>"
                },
                {
                  "description": "The minimum width of the thumbnail",
                  "key": "min_width",
                  "value": "<long>"
                },
                {
                  "description": "The maximum height of the thumbnail",
                  "key": "max_height",
                  "value": "<long>"
                },
                {
                  "description": "The maximum width of the thumbnail",
                  "key": "max_width",
                  "value": "<long>"
                }
              ],
              "variable": [
                {
                  "description": {
                    "content": "The ID of the file.",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "file_id"
                },
                {
                  "description": {
                    "content": "The file format for the thumbnail",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "extension"
                }
              ]
            },
            "method": "GET",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "300f957f-725a-463b-8a80-c8693df67779",
              "name": "When a thumbnail can be created the thumbnail data will be\nreturned in the body of the response.",
              "originalRequest": {
                "url": {
                  "path": [
                    "files",
                    "<string>",
                    "thumbnail.:extension"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "min_height",
                      "value": "<long>"
                    },
                    {
                      "key": "min_width",
                      "value": "<long>"
                    },
                    {
                      "key": "max_height",
                      "value": "<long>"
                    },
                    {
                      "key": "max_width",
                      "value": "<long>"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "image/png"
                }
              ],
              "body": "<binary>",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "d544d1ea-566e-4c66-a997-564fccc3aa6f",
              "name": "If the thumbnail is not available yet, a `Location` header\npointing to a placeholder graphic will be returned.",
              "originalRequest": {
                "url": {
                  "path": [
                    "files",
                    "<string>",
                    "thumbnail.:extension"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "min_height",
                      "value": "<long>"
                    },
                    {
                      "key": "min_width",
                      "value": "<long>"
                    },
                    {
                      "key": "max_height",
                      "value": "<long>"
                    },
                    {
                      "key": "max_width",
                      "value": "<long>"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Accepted",
              "code": 202,
              "header": [
                {
                  "key": "Retry-After",
                  "value": "<long>",
                  "description": "The time in seconds after which the thumbnail will be available.\n\nYour application  only attempt to get the thumbnail again after\nthis time."
                },
                {
                  "key": "Location",
                  "value": "<url>",
                  "description": "A pointer to a placeholder graphic that can be used until the\nthumbnail has been generated."
                },
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "d2d9656b-a9ef-4478-9dc8-5dfec1ebfd75",
              "name": "If Box is unable to generate a thumbnail for this file type, a `Location`\nheader pointing to a placeholder graphic for this file type will be\nreturned.",
              "originalRequest": {
                "url": {
                  "path": [
                    "files",
                    "<string>",
                    "thumbnail.:extension"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "min_height",
                      "value": "<long>"
                    },
                    {
                      "key": "min_width",
                      "value": "<long>"
                    },
                    {
                      "key": "max_height",
                      "value": "<long>"
                    },
                    {
                      "key": "max_width",
                      "value": "<long>"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Found",
              "code": 302,
              "header": [
                {
                  "key": "Location",
                  "value": "<url>",
                  "description": "A pointer to a placeholder graphic that can be used for this\nfile type."
                },
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "0470ae30-c2df-4732-aafd-a1903e8103c4",
              "name": "If Box is unable to generate a thumbnail for this particular file, `404`\nwill be returned with a code of `preview_cannot_be_generated`.",
              "originalRequest": {
                "url": {
                  "path": [
                    "files",
                    "<string>",
                    "thumbnail.:extension"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "min_height",
                      "value": "<long>"
                    },
                    {
                      "key": "min_width",
                      "value": "<long>"
                    },
                    {
                      "key": "max_height",
                      "value": "<long>"
                    },
                    {
                      "key": "max_width",
                      "value": "<long>"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Not Found",
              "code": 404,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "3ec1fe80-6142-4c68-95ce-1581a5600b77",
          "name": "Get trashed file",
          "request": {
            "name": "Get trashed file",
            "description": {
              "content": "Retrieves a file that has been moved to the trash.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "files",
                ":file_id",
                "trash"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response, unless explicitly specified.",
                  "key": "fields",
                  "value": "<string>,<string>"
                }
              ],
              "variable": [
                {
                  "description": {
                    "content": "The ID of the file.",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "file_id"
                }
              ]
            },
            "method": "GET",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "fd4214b0-58fc-4cad-8079-5d46a5d881cf",
              "name": "Returns the file that was trashed,\nincluding information about when the it\nwas moved to the trash.",
              "originalRequest": {
                "url": {
                  "path": [
                    "files",
                    "<string>",
                    "trash"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "<string>,<string>"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"sequence_id\": \"<string>\",\n \"etag\": \"<string>\",\n \"name\": \"<string>\",\n \"sha1\": \"<digest>\",\n \"description\": \"<string>\",\n \"size\": \"<integer>\",\n \"path_collection\": [\n  {\n   \"id\": \"<string>\",\n   \"type\": \"<string>\",\n   \"sequence_id\": \"<string>\",\n   \"etag\": \"<string>\",\n   \"name\": \"<string>\"\n  },\n  {\n   \"id\": \"<string>\",\n   \"type\": \"<string>\",\n   \"sequence_id\": \"<string>\",\n   \"etag\": \"<string>\",\n   \"name\": \"<string>\"\n  }\n ],\n \"created_at\": \"<dateTime>\",\n \"modified_at\": \"<dateTime>\",\n \"trashed_at\": \"<dateTime>\",\n \"purged_at\": \"<dateTime>\",\n \"content_created_at\": \"<dateTime>\",\n \"content_modified_at\": \"<dateTime>\",\n \"expires_at\": \"<dateTime>\",\n \"created_by\": {\n  \"id\": \"<string>\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"modified_by\": {\n  \"id\": \"<string>\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"owned_by\": {\n  \"id\": \"<string>\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"shared_link\": {\n  \"url\": \"<url>\",\n  \"download_url\": \"<url>\",\n  \"vanity_url\": \"<url>\",\n  \"access\": \"<string>\",\n  \"effective_access\": \"<string>\",\n  \"effective_permission\": \"<string>\",\n  \"unshared_at\": \"<dateTime>\",\n  \"is_password_enabled\": \"<boolean>\",\n  \"permissions\": {\n   \"can_download\": \"<boolean>\",\n   \"can_preview\": \"<boolean>\"\n  },\n  \"download_count\": \"<integer>\",\n  \"preview_count\": \"<integer>\"\n },\n \"parent\": {\n  \"id\": \"<string>\",\n  \"type\": \"<string>\",\n  \"sequence_id\": \"<string>\",\n  \"etag\": \"<string>\",\n  \"name\": \"<string>\"\n },\n \"item_status\": \"<string>\",\n \"version_number\": \"<string>\",\n \"comment_count\": \"<integer>\",\n \"permissions\": {\n  \"can_delete\": \"<boolean>\",\n  \"can_download\": \"<boolean>\",\n  \"can_invite_collaborator\": \"<boolean>\",\n  \"can_rename\": \"<boolean>\",\n  \"can_set_share_access\": \"<boolean>\",\n  \"can_share\": \"<boolean>\",\n  \"can_annotate\": \"<boolean>\",\n  \"can_comment\": \"<boolean>\",\n  \"can_preview\": \"<boolean>\",\n  \"can_upload\": \"<boolean>\",\n  \"can_view_annotations_all\": \"<boolean>\",\n  \"can_view_annotations_self\": \"<boolean>\"\n },\n \"tags\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"lock\": {\n  \"id\": \"<string>\",\n  \"type\": \"<string>\",\n  \"created_by\": {\n   \"id\": \"<string>\",\n   \"type\": \"<string>\",\n   \"name\": \"<string>\",\n   \"login\": \"<email>\"\n  },\n  \"created_at\": \"<dateTime>\",\n  \"expired_at\": \"<dateTime>\",\n  \"is_download_prevented\": \"<boolean>\"\n },\n \"extension\": \"<string>\",\n \"is_package\": \"<boolean>\",\n \"expiring_embed_link\": \"<string>\",\n \"watermark_info\": {\n  \"is_watermarked\": \"<boolean>\"\n },\n \"allowed_invitee_roles\": \"company\",\n \"is_externally_owned\": \"<boolean>\",\n \"has_collaborations\": \"<boolean>\",\n \"metadata\": \"<object>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "fec132ac-62c9-4d75-a1e0-2c83d2c25663",
              "name": "Returns an error if the file is not in the trash.",
              "originalRequest": {
                "url": {
                  "path": [
                    "files",
                    "<string>",
                    "trash"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "<string>,<string>"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Not Found",
              "code": 404,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "62d697b3-10dc-49ba-8b32-d8f2e7600b81",
          "name": "Permanently delete file",
          "request": {
            "name": "Permanently delete file",
            "description": {
              "content": "Permanently deletes a file that is in the trash.\nThis action cannot be undone.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "files",
                ":file_id",
                "trash"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "The ID of the file.",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "file_id"
                }
              ]
            },
            "method": "DELETE",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "67f9af2d-8846-4d45-83e6-6f13f9307a52",
              "name": "Returns an empty response when the file was\npermanently deleted.",
              "originalRequest": {
                "url": {
                  "path": [
                    "files",
                    "<string>",
                    "trash"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE",
                "body": {}
              },
              "status": "No Content",
              "code": 204,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "7f6f70d6-9ec7-4647-9094-72d8cc583546",
              "name": "Returns an error if the file is not in the trash.",
              "originalRequest": {
                "url": {
                  "path": [
                    "files",
                    "<string>",
                    "trash"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE",
                "body": {}
              },
              "status": "Not Found",
              "code": 404,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "7624d11c-dd68-400e-b582-ca64b710f739",
          "name": "List all file versions",
          "request": {
            "name": "List all file versions",
            "description": {
              "content": "Retrieve information on all version of a file. This endpoint can be used to\nretrieve information about older versions of a file.\n\nVersions are only tracked for Box users with premium accounts.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "files",
                ":file_id",
                "versions"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response, unless explicitly specified.",
                  "key": "fields",
                  "value": "<string>,<string>"
                },
                {
                  "description": "The maximum number of items to return per page.",
                  "key": "limit",
                  "value": "100"
                },
                {
                  "description": "The offset of the item at which to begin the response.",
                  "key": "offset",
                  "value": "<long>"
                }
              ],
              "variable": [
                {
                  "description": {
                    "content": "The ID of the file.",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "file_id"
                }
              ]
            },
            "method": "GET",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "badfeafe-7afd-4a99-ad7e-f3b542bd5a64",
              "name": "Returns an array of file versions.\n\nIf there are no previous versions of this file an empty\narray will be returned.",
              "originalRequest": {
                "url": {
                  "path": [
                    "files",
                    "<string>",
                    "versions"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "<string>,<string>"
                    },
                    {
                      "key": "limit",
                      "value": "100"
                    },
                    {
                      "key": "offset",
                      "value": "<long>"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"total_count\": \"<long>\",\n \"limit\": \"<long>\",\n \"offset\": \"<long>\",\n \"order\": [\n  {\n   \"by\": \"<string>\",\n   \"direction\": \"<string>\"\n  },\n  {\n   \"by\": \"<string>\",\n   \"direction\": \"<string>\"\n  }\n ],\n \"entries\": [\n  {\n   \"id\": \"schema type not provided\",\n   \"type\": \"<string>\",\n   \"sha1\": \"<string>\",\n   \"name\": \"<string>\",\n   \"size\": \"<long>\",\n   \"created_at\": \"<dateTime>\",\n   \"modified_at\": \"<dateTime>\",\n   \"modified_by\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"trashed_at\": \"<dateTime>\",\n   \"purged_at\": \"<dateTime>\"\n  },\n  {\n   \"id\": \"schema type not provided\",\n   \"type\": \"<string>\",\n   \"sha1\": \"<string>\",\n   \"name\": \"<string>\",\n   \"size\": \"<long>\",\n   \"created_at\": \"<dateTime>\",\n   \"modified_at\": \"<dateTime>\",\n   \"modified_by\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"trashed_at\": \"<dateTime>\",\n   \"purged_at\": \"<dateTime>\"\n  }\n ]\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "8c9fc68d-67fe-41b8-952a-c13623302d46",
          "name": "Get a file version",
          "request": {
            "name": "Get a file version",
            "description": {
              "content": "Retrieve a specific older version of a file.\n\nVersions are only tracked for Box users with premium accounts.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "files",
                ":file_id",
                "versions",
                ":file_version_id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response, unless explicitly specified.",
                  "key": "fields",
                  "value": "<string>,<string>"
                }
              ],
              "variable": [
                {
                  "description": {
                    "content": "The ID of the file.",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "file_id"
                },
                {
                  "description": {
                    "content": "The ID of the file version",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "file_version_id"
                }
              ]
            },
            "method": "GET",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "9f1cf057-4b93-4735-a459-3753e1481cf7",
              "name": "Returns a file object.\n\n[Some fields are optional](#file) and need to be explicitly\nrequested using the [fields](#get-files-id-versions--request--fields)\nparameter.",
              "originalRequest": {
                "url": {
                  "path": [
                    "files",
                    "<string>",
                    "versions",
                    "<string>"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "<string>,<string>"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"sequence_id\": \"<string>\",\n \"etag\": \"<string>\",\n \"name\": \"<string>\",\n \"sha1\": \"<digest>\",\n \"description\": \"<string>\",\n \"size\": \"<integer>\",\n \"path_collection\": [\n  {\n   \"id\": \"<string>\",\n   \"type\": \"<string>\",\n   \"sequence_id\": \"<string>\",\n   \"etag\": \"<string>\",\n   \"name\": \"<string>\"\n  },\n  {\n   \"id\": \"<string>\",\n   \"type\": \"<string>\",\n   \"sequence_id\": \"<string>\",\n   \"etag\": \"<string>\",\n   \"name\": \"<string>\"\n  }\n ],\n \"created_at\": \"<dateTime>\",\n \"modified_at\": \"<dateTime>\",\n \"trashed_at\": \"<dateTime>\",\n \"purged_at\": \"<dateTime>\",\n \"content_created_at\": \"<dateTime>\",\n \"content_modified_at\": \"<dateTime>\",\n \"expires_at\": \"<dateTime>\",\n \"created_by\": {\n  \"id\": \"<string>\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"modified_by\": {\n  \"id\": \"<string>\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"owned_by\": {\n  \"id\": \"<string>\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"shared_link\": {\n  \"url\": \"<url>\",\n  \"download_url\": \"<url>\",\n  \"vanity_url\": \"<url>\",\n  \"access\": \"<string>\",\n  \"effective_access\": \"<string>\",\n  \"effective_permission\": \"<string>\",\n  \"unshared_at\": \"<dateTime>\",\n  \"is_password_enabled\": \"<boolean>\",\n  \"permissions\": {\n   \"can_download\": \"<boolean>\",\n   \"can_preview\": \"<boolean>\"\n  },\n  \"download_count\": \"<integer>\",\n  \"preview_count\": \"<integer>\"\n },\n \"parent\": {\n  \"id\": \"<string>\",\n  \"type\": \"<string>\",\n  \"sequence_id\": \"<string>\",\n  \"etag\": \"<string>\",\n  \"name\": \"<string>\"\n },\n \"item_status\": \"<string>\",\n \"version_number\": \"<string>\",\n \"comment_count\": \"<integer>\",\n \"permissions\": {\n  \"can_delete\": \"<boolean>\",\n  \"can_download\": \"<boolean>\",\n  \"can_invite_collaborator\": \"<boolean>\",\n  \"can_rename\": \"<boolean>\",\n  \"can_set_share_access\": \"<boolean>\",\n  \"can_share\": \"<boolean>\",\n  \"can_annotate\": \"<boolean>\",\n  \"can_comment\": \"<boolean>\",\n  \"can_preview\": \"<boolean>\",\n  \"can_upload\": \"<boolean>\",\n  \"can_view_annotations_all\": \"<boolean>\",\n  \"can_view_annotations_self\": \"<boolean>\"\n },\n \"tags\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"lock\": {\n  \"id\": \"<string>\",\n  \"type\": \"<string>\",\n  \"created_by\": {\n   \"id\": \"<string>\",\n   \"type\": \"<string>\",\n   \"name\": \"<string>\",\n   \"login\": \"<email>\"\n  },\n  \"created_at\": \"<dateTime>\",\n  \"expired_at\": \"<dateTime>\",\n  \"is_download_prevented\": \"<boolean>\"\n },\n \"extension\": \"<string>\",\n \"is_package\": \"<boolean>\",\n \"expiring_embed_link\": \"<string>\",\n \"watermark_info\": {\n  \"is_watermarked\": \"<boolean>\"\n },\n \"allowed_invitee_roles\": \"open\",\n \"is_externally_owned\": \"<boolean>\",\n \"has_collaborations\": \"<boolean>\",\n \"metadata\": \"<object>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "0e6864e5-27cb-4f54-838f-67dd75f06546",
          "name": "Delete file version",
          "request": {
            "name": "Delete file version",
            "description": {
              "content": "Move a file version to the trash.\n\nVersions are only tracked for Box users with premium accounts.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "files",
                ":file_id",
                "versions",
                ":file_version_id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "The ID of the file.",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "file_id"
                },
                {
                  "description": {
                    "content": "The ID of the file version",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "file_version_id"
                }
              ]
            },
            "header": [
              {
                "key": "If-Match",
                "value": "<string>",
                "description": "Ensure this item hasn't recently changed\nby ensuring the item's current `etag` matches the\n`etag` passed into this header."
              }
            ],
            "method": "DELETE",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "ee38c7ff-2535-4c00-a286-114fed9a6d8b",
              "name": "Returns an empty response when the file has been successfully\ndeleted.",
              "originalRequest": {
                "url": {
                  "path": [
                    "files",
                    "<string>",
                    "versions",
                    "<string>"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Ensure this item hasn't recently changed\nby ensuring the item's current `etag` matches the\n`etag` passed into this header.",
                      "type": "text/plain"
                    },
                    "key": "If-Match",
                    "value": "<string>"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "No Content",
              "code": 204,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            }
          ],
          "event": []
        },
        {
          "id": "11b4edc3-eae9-4584-a0d4-272bdda8be64",
          "name": "Revert file version",
          "request": {
            "name": "Revert file version",
            "description": {
              "content": "Revert to a previous version of a file.\n\n\nIf previous versions exist, this method can be used to\npromote one of the older versions to the top of the version history.\n\nThis actually creates a new copy of the old version and puts it at the\ntop of the versions history. The file will have the exact same contents\nas the older version, with the the same SHA1/etag, and the same name\nas the original.\n\nOther properties such as comments do not get updated to their\nformer values.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "files",
                ":file_id",
                "versions",
                "current"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response, unless explicitly specified.",
                  "key": "fields",
                  "value": "<string>,<string>"
                }
              ],
              "variable": [
                {
                  "description": {
                    "content": "The ID of the file.",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "file_id"
                }
              ]
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": {
              "type": "oauth2"
            },
            "body": {
              "mode": "raw",
              "raw": "{\n    \"id\": \"<string>\",\n    \"type\": \"<string>\"\n}"
            }
          },
          "response": [
            {
              "id": "88e10341-06ee-4966-a9f4-579f0d4cc9cd",
              "name": "Returns a newly created file version object.",
              "originalRequest": {
                "url": {
                  "path": [
                    "files",
                    "<string>",
                    "versions",
                    "current"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "<string>,<string>"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"id\": \"<string>\",\n    \"type\": \"<string>\"\n}"
                }
              },
              "status": "Created",
              "code": 201,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"sha1\": \"<string>\",\n \"name\": \"<string>\",\n \"size\": \"<long>\",\n \"created_at\": \"<dateTime>\",\n \"modified_at\": \"<dateTime>\",\n \"modified_by\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"trashed_at\": \"<dateTime>\",\n \"purged_at\": \"<dateTime>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "ae874600-50e2-479d-af39-7964f509748a",
          "name": "Preflight check",
          "request": {
            "name": "Preflight check",
            "description": {
              "content": "Performs a check to verify that a file will be accepted by Box\nbefore you upload the entire file.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "files",
                "content"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "OPTIONS",
            "auth": {
              "type": "oauth2"
            },
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"<string>\",\n    \"size\": \"<integer>\",\n    \"parent\": {\n        \"id\": \"<string>\"\n    }\n}"
            }
          },
          "response": [
            {
              "id": "d7dfd138-b9ed-4010-9195-862e250f9374",
              "name": "If the check passed, the response will include a session URL that\ncan be used to upload the file to.",
              "originalRequest": {
                "url": {
                  "path": [
                    "files",
                    "content"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "OPTIONS",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"<string>\",\n    \"size\": \"<integer>\",\n    \"parent\": {\n        \"id\": \"<string>\"\n    }\n}"
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"upload_url\": \"<string>\",\n \"upload_token\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "30004fd6-5525-4f0a-b3b1-5058f00c5a7e",
              "name": "If the check did not pass, the response will include some details on\nwhy it did not pass.",
              "originalRequest": {
                "url": {
                  "path": [
                    "files",
                    "content"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "OPTIONS",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"<string>\",\n    \"size\": \"<integer>\",\n    \"parent\": {\n        \"id\": \"<string>\"\n    }\n}"
                }
              },
              "status": "Conflict",
              "code": 409,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\",\n \"context_info\": {\n  \"conflicts\": {\n   \"id\": \"schema type not provided\",\n   \"type\": \"<string>\",\n   \"sequence_id\": \"<string>\",\n   \"etag\": \"<string>\",\n   \"name\": \"<string>\",\n   \"sha1\": \"<string>\",\n   \"file_version\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"sha1\": \"<string>\"\n   }\n  }\n }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        }
      ]
    },
    {
      "id": "e973ddfa-9617-4d49-8489-dbb3625adcd6",
      "name": "Trash",
      "item": [
        {
          "id": "3d490e7f-36b2-425e-813f-bc96a0224581",
          "name": "Restore file",
          "request": {
            "name": "Restore file",
            "description": {
              "content": "Restores an file that has been moved to the trash.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "files",
                ":file_id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response, unless explicitly specified.",
                  "key": "fields",
                  "value": "<string>,<string>"
                }
              ],
              "variable": [
                {
                  "description": {
                    "content": "The ID of the file.",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "file_id"
                }
              ]
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": {
              "type": "oauth2"
            },
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"<string>\",\n    \"parent\": {\n        \"id\": \"<string>\"\n    }\n}"
            }
          },
          "response": [
            {
              "id": "13ddf77c-82c6-4469-a5e1-0c0f29dc06e4",
              "name": "Returns a file object when the file has been restored.",
              "originalRequest": {
                "url": {
                  "path": [
                    "files",
                    "<string>"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "<string>,<string>"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"<string>\",\n    \"parent\": {\n        \"id\": \"<string>\"\n    }\n}"
                }
              },
              "status": "Created",
              "code": 201,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"id\": \"<string>\",\n \"type\": \"<string>\",\n \"sequence_id\": \"<string>\",\n \"etag\": \"<string>\",\n \"name\": \"<string>\",\n \"sha1\": \"<digest>\",\n \"description\": \"<string>\",\n \"size\": \"<integer>\",\n \"path_collection\": [\n  {\n   \"id\": \"<string>\",\n   \"type\": \"<string>\",\n   \"sequence_id\": \"<string>\",\n   \"etag\": \"<string>\",\n   \"name\": \"<string>\"\n  },\n  {\n   \"id\": \"<string>\",\n   \"type\": \"<string>\",\n   \"sequence_id\": \"<string>\",\n   \"etag\": \"<string>\",\n   \"name\": \"<string>\"\n  }\n ],\n \"created_at\": \"<dateTime>\",\n \"modified_at\": \"<dateTime>\",\n \"trashed_at\": \"<dateTime>\",\n \"purged_at\": \"<dateTime>\",\n \"content_created_at\": \"<dateTime>\",\n \"content_modified_at\": \"<dateTime>\",\n \"expires_at\": \"<dateTime>\",\n \"created_by\": {\n  \"id\": \"<string>\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"modified_by\": {\n  \"id\": \"<string>\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"owned_by\": {\n  \"id\": \"<string>\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"shared_link\": {\n  \"url\": \"<url>\",\n  \"download_url\": \"<url>\",\n  \"vanity_url\": \"<url>\",\n  \"access\": \"<string>\",\n  \"effective_access\": \"<string>\",\n  \"effective_permission\": \"<string>\",\n  \"unshared_at\": \"<dateTime>\",\n  \"is_password_enabled\": \"<boolean>\",\n  \"permissions\": {\n   \"can_download\": \"<boolean>\",\n   \"can_preview\": \"<boolean>\"\n  },\n  \"download_count\": \"<integer>\",\n  \"preview_count\": \"<integer>\"\n },\n \"parent\": {\n  \"id\": \"<string>\",\n  \"type\": \"<string>\",\n  \"sequence_id\": \"<string>\",\n  \"etag\": \"<string>\",\n  \"name\": \"<string>\"\n },\n \"item_status\": \"<string>\",\n \"version_number\": \"<string>\",\n \"comment_count\": \"<integer>\",\n \"permissions\": {\n  \"can_delete\": \"<boolean>\",\n  \"can_download\": \"<boolean>\",\n  \"can_invite_collaborator\": \"<boolean>\",\n  \"can_rename\": \"<boolean>\",\n  \"can_set_share_access\": \"<boolean>\",\n  \"can_share\": \"<boolean>\",\n  \"can_annotate\": \"<boolean>\",\n  \"can_comment\": \"<boolean>\",\n  \"can_preview\": \"<boolean>\",\n  \"can_upload\": \"<boolean>\",\n  \"can_view_annotations_all\": \"<boolean>\",\n  \"can_view_annotations_self\": \"<boolean>\"\n },\n \"tags\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"lock\": {\n  \"id\": \"<string>\",\n  \"type\": \"<string>\",\n  \"created_by\": {\n   \"id\": \"<string>\",\n   \"type\": \"<string>\",\n   \"name\": \"<string>\",\n   \"login\": \"<email>\"\n  },\n  \"created_at\": \"<dateTime>\",\n  \"expired_at\": \"<dateTime>\",\n  \"is_download_prevented\": \"<boolean>\"\n },\n \"extension\": \"<string>\",\n \"is_package\": \"<boolean>\",\n \"expiring_embed_link\": \"<string>\",\n \"watermark_info\": {\n  \"is_watermarked\": \"<boolean>\"\n },\n \"allowed_invitee_roles\": \"company\",\n \"is_externally_owned\": \"<boolean>\",\n \"has_collaborations\": \"<boolean>\",\n \"metadata\": \"<object>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "fb52d02c-1490-456b-8555-cd33f03b2aa0",
              "name": "Returns an error if the user does not have access to the folder\nthe file is being restored to, or the user does not have permission\nto restore files from the trash.",
              "originalRequest": {
                "url": {
                  "path": [
                    "files",
                    "<string>"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "<string>,<string>"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"<string>\",\n    \"parent\": {\n        \"id\": \"<string>\"\n    }\n}"
                }
              },
              "status": "Forbidden",
              "code": 403,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "d4a74833-9069-4ae4-90e1-464b4a4cb878",
              "name": "Returns an error if the file is not in the trash.",
              "originalRequest": {
                "url": {
                  "path": [
                    "files",
                    "<string>"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "<string>,<string>"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"<string>\",\n    \"parent\": {\n        \"id\": \"<string>\"\n    }\n}"
                }
              },
              "status": "Not Found",
              "code": 404,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "a943e03e-c7f8-4abf-ab91-a1c58aa60bc8",
              "name": "Returns an error if there is an file with the same name\nin the folder the file is being restored to.",
              "originalRequest": {
                "url": {
                  "path": [
                    "files",
                    "<string>"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "<string>,<string>"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"<string>\",\n    \"parent\": {\n        \"id\": \"<string>\"\n    }\n}"
                }
              },
              "status": "Conflict",
              "code": 409,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "da97d315-d1eb-4dfb-b1e7-70e2d2ed8ac7",
          "name": "Restore folder",
          "request": {
            "name": "Restore folder",
            "description": {
              "content": "Restores a folder that has been moved to the trash.\n\n# Folder locking\n\nDuring this operation, part of the file tree will be locked, mainly\nthe source folder and all of its descendants, as well as the destination\nfolder.\n\nFor the duration of the operation, no other move, copy, delete, or restore\noperation can performed on any of the locked folders.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "folders",
                ":folder_id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response, unless explicitly specified.",
                  "key": "fields",
                  "value": "<string>,<string>"
                }
              ],
              "variable": [
                {
                  "description": {
                    "content": "The unique identifier that represent a folder.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the url `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder of a Box account is\nalways represented by the ID `0`.",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "folder_id"
                }
              ]
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": {
              "type": "oauth2"
            },
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"<string>\",\n    \"parent\": {\n        \"id\": \"<string>\"\n    }\n}"
            }
          },
          "response": [
            {
              "id": "af021ec4-bad4-43c4-a4e8-a993fb9b0fad",
              "name": "Returns a folder object when the folder has been restored.",
              "originalRequest": {
                "url": {
                  "path": [
                    "folders",
                    "<string>"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "<string>,<string>"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"<string>\",\n    \"parent\": {\n        \"id\": \"<string>\"\n    }\n}"
                }
              },
              "status": "Created",
              "code": 201,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"sequence_id\": \"<string>\",\n \"etag\": \"<string>\",\n \"name\": \"<string>\",\n \"created_at\": \"<dateTime>\",\n \"modified_at\": \"<dateTime>\",\n \"description\": {},\n \"size\": \"<long>\",\n \"path_collection\": {\n  \"total_count\": \"<long>\",\n  \"entries\": [\n   {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\"\n   },\n   {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\"\n   }\n  ]\n },\n \"created_by\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"modified_by\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"trashed_at\": \"<dateTime>\",\n \"purged_at\": \"<dateTime>\",\n \"content_created_at\": \"<dateTime>\",\n \"content_modified_at\": \"<dateTime>\",\n \"expires_at\": \"<dateTime>\",\n \"owned_by\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"shared_link\": {\n  \"url\": \"<url>\",\n  \"download_url\": \"<url>\",\n  \"vanity_url\": \"<url>\",\n  \"access\": \"<string>\",\n  \"effective_access\": \"<string>\",\n  \"effective_permission\": \"<string>\",\n  \"unshared_at\": \"<dateTime>\",\n  \"is_password_enabled\": \"<boolean>\",\n  \"permissions\": {\n   \"can_download\": \"<boolean>\",\n   \"can_preview\": \"<boolean>\"\n  },\n  \"download_count\": \"<integer>\",\n  \"preview_count\": \"<integer>\"\n },\n \"folder_upload_email\": {\n  \"access\": \"<string>\",\n  \"email\": \"<email>\"\n },\n \"parent\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"sequence_id\": \"<string>\",\n  \"etag\": \"<string>\",\n  \"name\": \"<string>\"\n },\n \"item_status\": \"<string>\",\n \"item_collection\": {\n  \"total_count\": \"<long>\",\n  \"limit\": \"<long>\",\n  \"offset\": \"<long>\",\n  \"order\": [\n   {\n    \"by\": \"<string>\",\n    \"direction\": \"<string>\"\n   },\n   {\n    \"by\": \"<string>\",\n    \"direction\": \"<string>\"\n   }\n  ],\n  \"entries\": [\n   {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\"\n   },\n   {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\"\n   }\n  ]\n },\n \"sync_state\": {},\n \"has_collaborations\": \"<boolean>\",\n \"permissions\": {\n  \"can_delete\": \"<boolean>\",\n  \"can_download\": \"<boolean>\",\n  \"can_invite_collaborator\": \"<boolean>\",\n  \"can_rename\": \"<boolean>\",\n  \"can_set_share_access\": \"<boolean>\",\n  \"can_share\": \"<boolean>\",\n  \"can_upload\": \"<boolean>\"\n },\n \"tags\": {},\n \"can_non_owners_invite\": {},\n \"is_externally_owned\": \"<boolean>\",\n \"is_collaboration_restricted_to_enterprise\": {},\n \"allowed_shared_link_access_levels\": \"company\",\n \"allowed_invitee_roles\": \"co-owner\",\n \"watermark_info\": {\n  \"is_watermarked\": \"<boolean>\"\n }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "1726f686-bc04-40c0-9f3e-47630da28896",
              "name": "Returns an error if the user does not have access to the folder\nthe folder is being restored to, or the user does not have permission\nto restore folders from the trash.",
              "originalRequest": {
                "url": {
                  "path": [
                    "folders",
                    "<string>"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "<string>,<string>"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"<string>\",\n    \"parent\": {\n        \"id\": \"<string>\"\n    }\n}"
                }
              },
              "status": "Forbidden",
              "code": 403,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "320a636e-b163-4c3b-854a-017f16f3f9fa",
              "name": "Returns an error if the folder is not in the trash.",
              "originalRequest": {
                "url": {
                  "path": [
                    "folders",
                    "<string>"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "<string>,<string>"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"<string>\",\n    \"parent\": {\n        \"id\": \"<string>\"\n    }\n}"
                }
              },
              "status": "Not Found",
              "code": 404,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "be7e7e38-57f0-4e84-96fe-ff62f65c3fae",
              "name": "* Returned an error if there is a folder with the same name\n  in the destination folder.\n\n* `operation_blocked_temporary`: Returned if either of the destination\n  or source folders is locked due to another move, copy, delete or\n  restore operation in process.\n\n  The operation can be retried at a later point.",
              "originalRequest": {
                "url": {
                  "path": [
                    "folders",
                    "<string>"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "<string>,<string>"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"<string>\",\n    \"parent\": {\n        \"id\": \"<string>\"\n    }\n}"
                }
              },
              "status": "Conflict",
              "code": 409,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "ba252d28-1516-4ae7-bf24-7c708ebf28c3",
          "name": "Restore web link",
          "request": {
            "name": "Restore web link",
            "description": {
              "content": "Restores an web link that has been moved to the trash.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "web_links",
                ":web_link_id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response, unless explicitly specified.",
                  "key": "fields",
                  "value": "<string>,<string>"
                }
              ],
              "variable": [
                {
                  "description": {
                    "content": "The ID of the web link.",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "web_link_id"
                }
              ]
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": {
              "type": "oauth2"
            },
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"<string>\",\n    \"parent\": {\n        \"id\": \"<string>\"\n    }\n}"
            }
          },
          "response": [
            {
              "id": "2fefa9f3-80af-4882-b1c7-6d6b7d69e528",
              "name": "Returns a web link object when it has been restored.",
              "originalRequest": {
                "url": {
                  "path": [
                    "web_links",
                    "<string>"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "<string>,<string>"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"<string>\",\n    \"parent\": {\n        \"id\": \"<string>\"\n    }\n}"
                }
              },
              "status": "Created",
              "code": 201,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"sequence_id\": \"<string>\",\n \"etag\": \"<string>\",\n \"name\": \"<string>\",\n \"url\": \"<string>\",\n \"parent\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"sequence_id\": \"<string>\",\n  \"etag\": \"<string>\",\n  \"name\": \"<string>\"\n },\n \"description\": \"<string>\",\n \"path_collection\": [\n  {\n   \"id\": \"schema type not provided\",\n   \"type\": \"<string>\",\n   \"sequence_id\": \"<string>\",\n   \"etag\": \"<string>\",\n   \"name\": \"<string>\"\n  },\n  {\n   \"id\": \"schema type not provided\",\n   \"type\": \"<string>\",\n   \"sequence_id\": \"<string>\",\n   \"etag\": \"<string>\",\n   \"name\": \"<string>\"\n  }\n ],\n \"created_at\": \"<dateTime>\",\n \"modified_at\": \"<dateTime>\",\n \"trashed_at\": \"<dateTime>\",\n \"purged_at\": \"<dateTime>\",\n \"created_by\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"modified_by\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"owned_by\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"shared_link\": {\n  \"url\": \"<url>\",\n  \"download_url\": \"<url>\",\n  \"vanity_url\": \"<url>\",\n  \"access\": \"<string>\",\n  \"effective_access\": \"<string>\",\n  \"effective_permission\": \"<string>\",\n  \"unshared_at\": \"<dateTime>\",\n  \"is_password_enabled\": \"<boolean>\",\n  \"permissions\": {\n   \"can_download\": \"<boolean>\",\n   \"can_preview\": \"<boolean>\"\n  },\n  \"download_count\": \"<integer>\",\n  \"preview_count\": \"<integer>\"\n },\n \"item_status\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "2bbb4a7d-e5b7-4818-b7ec-d8facb645e73",
              "name": "Returns an error if the user does not have access to the folder\nthe web link is being restored to, or the user does not have permission\nto restore web link from the trash.",
              "originalRequest": {
                "url": {
                  "path": [
                    "web_links",
                    "<string>"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "<string>,<string>"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"<string>\",\n    \"parent\": {\n        \"id\": \"<string>\"\n    }\n}"
                }
              },
              "status": "Forbidden",
              "code": 403,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "b34d1de3-c44b-4244-8e42-ceba1f6d7693",
              "name": "Returns an error if the web link is not in the trash.",
              "originalRequest": {
                "url": {
                  "path": [
                    "web_links",
                    "<string>"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "<string>,<string>"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"<string>\",\n    \"parent\": {\n        \"id\": \"<string>\"\n    }\n}"
                }
              },
              "status": "Not Found",
              "code": 404,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "3b9624a5-f95a-43fd-aaba-408c6af73ed9",
              "name": "Returns an error if there is an web link with the same name\nin the folder the web link is being restored to.",
              "originalRequest": {
                "url": {
                  "path": [
                    "web_links",
                    "<string>"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "<string>,<string>"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"<string>\",\n    \"parent\": {\n        \"id\": \"<string>\"\n    }\n}"
                }
              },
              "status": "Conflict",
              "code": 409,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        }
      ]
    },
    {
      "id": "6eed2539-1389-4dc1-bd2d-83e40a9410e9",
      "name": "File Uploads",
      "item": [
        {
          "id": "dde399f4-c643-44eb-81af-517c89e9f029",
          "name": "Upload a file version",
          "request": {
            "name": "Upload a file version",
            "description": {
              "content": "Update a file's content. For file sizes over 50MB we recommend\nusing the Chunk Upload APIs.",
              "type": "text/plain"
            },
            "url": {
              "protocol": "https",
              "path": [
                "api",
                "2.0",
                "files",
                ":file_id",
                "content"
              ],
              "host": [
                "upload",
                "box",
                "com"
              ],
              "query": [
                {
                  "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response, unless explicitly specified.",
                  "key": "fields",
                  "value": "<string>,<string>"
                }
              ],
              "variable": [
                {
                  "description": {
                    "content": "The ID of the file.",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "file_id"
                }
              ]
            },
            "header": [
              {
                "key": "If-Match",
                "value": "<string>",
                "description": "Ensure this item hasn't recently changed\nby ensuring the item's current `etag` matches the\n`etag` passed into this header."
              },
              {
                "key": "Content-MD5",
                "value": "<string>",
                "description": "An optional header containing the SHA-1 hash of the file to\nensure that the file was not corrupted in transit."
              },
              {
                "key": "Content-Type",
                "value": "multipart/form-data"
              }
            ],
            "method": "POST",
            "auth": {
              "type": "oauth2"
            },
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "attributes",
                  "value": "{\"name\":\"<string>\",\"content_modified_at\":\"<dateTime>\"}"
                },
                {
                  "key": "file",
                  "value": "<binary>"
                }
              ]
            }
          },
          "response": [
            {
              "id": "7977ec86-3cec-4dc9-b9ca-15a1dd916d9a",
              "name": "Returns the new file object in a list.",
              "originalRequest": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "2.0",
                    "files",
                    "<string>",
                    "content"
                  ],
                  "host": [
                    "upload",
                    "box",
                    "com"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "<string>,<string>"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Ensure this item hasn't recently changed\nby ensuring the item's current `etag` matches the\n`etag` passed into this header.",
                      "type": "text/plain"
                    },
                    "key": "If-Match",
                    "value": "<string>"
                  },
                  {
                    "description": {
                      "content": "An optional header containing the SHA-1 hash of the file to\nensure that the file was not corrupted in transit.",
                      "type": "text/plain"
                    },
                    "key": "Content-MD5",
                    "value": "<string>"
                  },
                  {
                    "key": "Content-Type",
                    "value": "multipart/form-data"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "attributes",
                      "value": "{\"name\":\"<string>\",\"content_modified_at\":\"<dateTime>\"}"
                    },
                    {
                      "key": "file",
                      "value": "<binary>"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"total_count\": \"<long>\",\n \"entries\": [\n  {\n   \"id\": \"<string>\",\n   \"type\": \"<string>\",\n   \"sequence_id\": \"<string>\",\n   \"etag\": \"<string>\",\n   \"name\": \"<string>\",\n   \"sha1\": \"<digest>\",\n   \"description\": \"<string>\",\n   \"size\": \"<integer>\",\n   \"path_collection\": [\n    {\n     \"id\": \"<string>\",\n     \"type\": \"<string>\",\n     \"sequence_id\": \"<string>\",\n     \"etag\": \"<string>\",\n     \"name\": \"<string>\"\n    },\n    {\n     \"id\": \"<string>\",\n     \"type\": \"<string>\",\n     \"sequence_id\": \"<string>\",\n     \"etag\": \"<string>\",\n     \"name\": \"<string>\"\n    }\n   ],\n   \"created_at\": \"<dateTime>\",\n   \"modified_at\": \"<dateTime>\",\n   \"trashed_at\": \"<dateTime>\",\n   \"purged_at\": \"<dateTime>\",\n   \"content_created_at\": \"<dateTime>\",\n   \"content_modified_at\": \"<dateTime>\",\n   \"expires_at\": \"<dateTime>\",\n   \"created_by\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"modified_by\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"owned_by\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"shared_link\": {\n    \"url\": \"<url>\",\n    \"download_url\": \"<url>\",\n    \"vanity_url\": \"<url>\",\n    \"access\": \"<string>\",\n    \"effective_access\": \"<string>\",\n    \"effective_permission\": \"<string>\",\n    \"unshared_at\": \"<dateTime>\",\n    \"is_password_enabled\": \"<boolean>\",\n    \"permissions\": {\n     \"can_download\": \"<boolean>\",\n     \"can_preview\": \"<boolean>\"\n    },\n    \"download_count\": \"<integer>\",\n    \"preview_count\": \"<integer>\"\n   },\n   \"parent\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\"\n   },\n   \"item_status\": \"<string>\",\n   \"version_number\": \"<string>\",\n   \"comment_count\": \"<integer>\",\n   \"permissions\": {\n    \"can_delete\": \"<boolean>\",\n    \"can_download\": \"<boolean>\",\n    \"can_invite_collaborator\": \"<boolean>\",\n    \"can_rename\": \"<boolean>\",\n    \"can_set_share_access\": \"<boolean>\",\n    \"can_share\": \"<boolean>\",\n    \"can_annotate\": \"<boolean>\",\n    \"can_comment\": \"<boolean>\",\n    \"can_preview\": \"<boolean>\",\n    \"can_upload\": \"<boolean>\",\n    \"can_view_annotations_all\": \"<boolean>\",\n    \"can_view_annotations_self\": \"<boolean>\"\n   },\n   \"tags\": [\n    \"<string>\",\n    \"<string>\"\n   ],\n   \"lock\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\",\n    \"created_by\": {\n     \"id\": \"<string>\",\n     \"type\": \"<string>\",\n     \"name\": \"<string>\",\n     \"login\": \"<email>\"\n    },\n    \"created_at\": \"<dateTime>\",\n    \"expired_at\": \"<dateTime>\",\n    \"is_download_prevented\": \"<boolean>\"\n   },\n   \"extension\": \"<string>\",\n   \"is_package\": \"<boolean>\",\n   \"expiring_embed_link\": \"<string>\",\n   \"watermark_info\": {\n    \"is_watermarked\": \"<boolean>\"\n   },\n   \"allowed_invitee_roles\": \"company\",\n   \"is_externally_owned\": \"<boolean>\",\n   \"has_collaborations\": \"<boolean>\",\n   \"metadata\": \"<object>\"\n  },\n  {\n   \"id\": \"<string>\",\n   \"type\": \"<string>\",\n   \"sequence_id\": \"<string>\",\n   \"etag\": \"<string>\",\n   \"name\": \"<string>\",\n   \"sha1\": \"<digest>\",\n   \"description\": \"<string>\",\n   \"size\": \"<integer>\",\n   \"path_collection\": [\n    {\n     \"id\": \"<string>\",\n     \"type\": \"<string>\",\n     \"sequence_id\": \"<string>\",\n     \"etag\": \"<string>\",\n     \"name\": \"<string>\"\n    },\n    {\n     \"id\": \"<string>\",\n     \"type\": \"<string>\",\n     \"sequence_id\": \"<string>\",\n     \"etag\": \"<string>\",\n     \"name\": \"<string>\"\n    }\n   ],\n   \"created_at\": \"<dateTime>\",\n   \"modified_at\": \"<dateTime>\",\n   \"trashed_at\": \"<dateTime>\",\n   \"purged_at\": \"<dateTime>\",\n   \"content_created_at\": \"<dateTime>\",\n   \"content_modified_at\": \"<dateTime>\",\n   \"expires_at\": \"<dateTime>\",\n   \"created_by\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"modified_by\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"owned_by\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"shared_link\": {\n    \"url\": \"<url>\",\n    \"download_url\": \"<url>\",\n    \"vanity_url\": \"<url>\",\n    \"access\": \"<string>\",\n    \"effective_access\": \"<string>\",\n    \"effective_permission\": \"<string>\",\n    \"unshared_at\": \"<dateTime>\",\n    \"is_password_enabled\": \"<boolean>\",\n    \"permissions\": {\n     \"can_download\": \"<boolean>\",\n     \"can_preview\": \"<boolean>\"\n    },\n    \"download_count\": \"<integer>\",\n    \"preview_count\": \"<integer>\"\n   },\n   \"parent\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\"\n   },\n   \"item_status\": \"<string>\",\n   \"version_number\": \"<string>\",\n   \"comment_count\": \"<integer>\",\n   \"permissions\": {\n    \"can_delete\": \"<boolean>\",\n    \"can_download\": \"<boolean>\",\n    \"can_invite_collaborator\": \"<boolean>\",\n    \"can_rename\": \"<boolean>\",\n    \"can_set_share_access\": \"<boolean>\",\n    \"can_share\": \"<boolean>\",\n    \"can_annotate\": \"<boolean>\",\n    \"can_comment\": \"<boolean>\",\n    \"can_preview\": \"<boolean>\",\n    \"can_upload\": \"<boolean>\",\n    \"can_view_annotations_all\": \"<boolean>\",\n    \"can_view_annotations_self\": \"<boolean>\"\n   },\n   \"tags\": [\n    \"<string>\",\n    \"<string>\"\n   ],\n   \"lock\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\",\n    \"created_by\": {\n     \"id\": \"<string>\",\n     \"type\": \"<string>\",\n     \"name\": \"<string>\",\n     \"login\": \"<email>\"\n    },\n    \"created_at\": \"<dateTime>\",\n    \"expired_at\": \"<dateTime>\",\n    \"is_download_prevented\": \"<boolean>\"\n   },\n   \"extension\": \"<string>\",\n   \"is_package\": \"<boolean>\",\n   \"expiring_embed_link\": \"<string>\",\n   \"watermark_info\": {\n    \"is_watermarked\": \"<boolean>\"\n   },\n   \"allowed_invitee_roles\": \"company\",\n   \"is_externally_owned\": \"<boolean>\",\n   \"has_collaborations\": \"<boolean>\",\n   \"metadata\": \"<object>\"\n  }\n ]\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "646a53f8-a5b3-4207-bae5-21ea63736a70",
          "name": "Upload a file",
          "request": {
            "name": "Upload a file",
            "description": {
              "content": "Uploads a small file to Box. For file sizes over 50MB we recommend\nusing the Chunk Upload APIs.",
              "type": "text/plain"
            },
            "url": {
              "protocol": "https",
              "path": [
                "api",
                "2.0",
                "files",
                "content",
                "files",
                "content"
              ],
              "host": [
                "upload",
                "box",
                "com"
              ],
              "query": [
                {
                  "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response, unless explicitly specified.",
                  "key": "fields",
                  "value": "<string>,<string>"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Content-MD5",
                "value": "<string>",
                "description": "An optional header containing the SHA-1 hash of the file to\nensure that the file was not corrupted in transit."
              },
              {
                "key": "Content-Type",
                "value": "multipart/form-data"
              }
            ],
            "method": "POST",
            "auth": {
              "type": "oauth2"
            },
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "attributes",
                  "value": "{\"name\":\"<string>\",\"parent\":{\"id\":\"<string>\"},\"content_created_at\":\"<dateTime>\",\"content_modified_at\":\"<dateTime>\"}"
                },
                {
                  "key": "file",
                  "value": "<binary>"
                }
              ]
            }
          },
          "response": [
            {
              "id": "ff00f5c0-7d93-49dc-96d4-0e968fe496e1",
              "name": "Returns the new file object in a list.",
              "originalRequest": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "2.0",
                    "files",
                    "content",
                    "files",
                    "content"
                  ],
                  "host": [
                    "upload",
                    "box",
                    "com"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "<string>,<string>"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "An optional header containing the SHA-1 hash of the file to\nensure that the file was not corrupted in transit.",
                      "type": "text/plain"
                    },
                    "key": "Content-MD5",
                    "value": "<string>"
                  },
                  {
                    "key": "Content-Type",
                    "value": "multipart/form-data"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "attributes",
                      "value": "{\"name\":\"<string>\",\"parent\":{\"id\":\"<string>\"},\"content_created_at\":\"<dateTime>\",\"content_modified_at\":\"<dateTime>\"}"
                    },
                    {
                      "key": "file",
                      "value": "<binary>"
                    }
                  ]
                }
              },
              "status": "Created",
              "code": 201,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"total_count\": \"<long>\",\n \"entries\": [\n  {\n   \"id\": \"<string>\",\n   \"type\": \"<string>\",\n   \"sequence_id\": \"<string>\",\n   \"etag\": \"<string>\",\n   \"name\": \"<string>\",\n   \"sha1\": \"<digest>\",\n   \"description\": \"<string>\",\n   \"size\": \"<integer>\",\n   \"path_collection\": [\n    {\n     \"id\": \"<string>\",\n     \"type\": \"<string>\",\n     \"sequence_id\": \"<string>\",\n     \"etag\": \"<string>\",\n     \"name\": \"<string>\"\n    },\n    {\n     \"id\": \"<string>\",\n     \"type\": \"<string>\",\n     \"sequence_id\": \"<string>\",\n     \"etag\": \"<string>\",\n     \"name\": \"<string>\"\n    }\n   ],\n   \"created_at\": \"<dateTime>\",\n   \"modified_at\": \"<dateTime>\",\n   \"trashed_at\": \"<dateTime>\",\n   \"purged_at\": \"<dateTime>\",\n   \"content_created_at\": \"<dateTime>\",\n   \"content_modified_at\": \"<dateTime>\",\n   \"expires_at\": \"<dateTime>\",\n   \"created_by\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"modified_by\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"owned_by\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"shared_link\": {\n    \"url\": \"<url>\",\n    \"download_url\": \"<url>\",\n    \"vanity_url\": \"<url>\",\n    \"access\": \"<string>\",\n    \"effective_access\": \"<string>\",\n    \"effective_permission\": \"<string>\",\n    \"unshared_at\": \"<dateTime>\",\n    \"is_password_enabled\": \"<boolean>\",\n    \"permissions\": {\n     \"can_download\": \"<boolean>\",\n     \"can_preview\": \"<boolean>\"\n    },\n    \"download_count\": \"<integer>\",\n    \"preview_count\": \"<integer>\"\n   },\n   \"parent\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\"\n   },\n   \"item_status\": \"<string>\",\n   \"version_number\": \"<string>\",\n   \"comment_count\": \"<integer>\",\n   \"permissions\": {\n    \"can_delete\": \"<boolean>\",\n    \"can_download\": \"<boolean>\",\n    \"can_invite_collaborator\": \"<boolean>\",\n    \"can_rename\": \"<boolean>\",\n    \"can_set_share_access\": \"<boolean>\",\n    \"can_share\": \"<boolean>\",\n    \"can_annotate\": \"<boolean>\",\n    \"can_comment\": \"<boolean>\",\n    \"can_preview\": \"<boolean>\",\n    \"can_upload\": \"<boolean>\",\n    \"can_view_annotations_all\": \"<boolean>\",\n    \"can_view_annotations_self\": \"<boolean>\"\n   },\n   \"tags\": [\n    \"<string>\",\n    \"<string>\"\n   ],\n   \"lock\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\",\n    \"created_by\": {\n     \"id\": \"<string>\",\n     \"type\": \"<string>\",\n     \"name\": \"<string>\",\n     \"login\": \"<email>\"\n    },\n    \"created_at\": \"<dateTime>\",\n    \"expired_at\": \"<dateTime>\",\n    \"is_download_prevented\": \"<boolean>\"\n   },\n   \"extension\": \"<string>\",\n   \"is_package\": \"<boolean>\",\n   \"expiring_embed_link\": \"<string>\",\n   \"watermark_info\": {\n    \"is_watermarked\": \"<boolean>\"\n   },\n   \"allowed_invitee_roles\": \"open\",\n   \"is_externally_owned\": \"<boolean>\",\n   \"has_collaborations\": \"<boolean>\",\n   \"metadata\": \"<object>\"\n  },\n  {\n   \"id\": \"<string>\",\n   \"type\": \"<string>\",\n   \"sequence_id\": \"<string>\",\n   \"etag\": \"<string>\",\n   \"name\": \"<string>\",\n   \"sha1\": \"<digest>\",\n   \"description\": \"<string>\",\n   \"size\": \"<integer>\",\n   \"path_collection\": [\n    {\n     \"id\": \"<string>\",\n     \"type\": \"<string>\",\n     \"sequence_id\": \"<string>\",\n     \"etag\": \"<string>\",\n     \"name\": \"<string>\"\n    },\n    {\n     \"id\": \"<string>\",\n     \"type\": \"<string>\",\n     \"sequence_id\": \"<string>\",\n     \"etag\": \"<string>\",\n     \"name\": \"<string>\"\n    }\n   ],\n   \"created_at\": \"<dateTime>\",\n   \"modified_at\": \"<dateTime>\",\n   \"trashed_at\": \"<dateTime>\",\n   \"purged_at\": \"<dateTime>\",\n   \"content_created_at\": \"<dateTime>\",\n   \"content_modified_at\": \"<dateTime>\",\n   \"expires_at\": \"<dateTime>\",\n   \"created_by\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"modified_by\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"owned_by\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"shared_link\": {\n    \"url\": \"<url>\",\n    \"download_url\": \"<url>\",\n    \"vanity_url\": \"<url>\",\n    \"access\": \"<string>\",\n    \"effective_access\": \"<string>\",\n    \"effective_permission\": \"<string>\",\n    \"unshared_at\": \"<dateTime>\",\n    \"is_password_enabled\": \"<boolean>\",\n    \"permissions\": {\n     \"can_download\": \"<boolean>\",\n     \"can_preview\": \"<boolean>\"\n    },\n    \"download_count\": \"<integer>\",\n    \"preview_count\": \"<integer>\"\n   },\n   \"parent\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\"\n   },\n   \"item_status\": \"<string>\",\n   \"version_number\": \"<string>\",\n   \"comment_count\": \"<integer>\",\n   \"permissions\": {\n    \"can_delete\": \"<boolean>\",\n    \"can_download\": \"<boolean>\",\n    \"can_invite_collaborator\": \"<boolean>\",\n    \"can_rename\": \"<boolean>\",\n    \"can_set_share_access\": \"<boolean>\",\n    \"can_share\": \"<boolean>\",\n    \"can_annotate\": \"<boolean>\",\n    \"can_comment\": \"<boolean>\",\n    \"can_preview\": \"<boolean>\",\n    \"can_upload\": \"<boolean>\",\n    \"can_view_annotations_all\": \"<boolean>\",\n    \"can_view_annotations_self\": \"<boolean>\"\n   },\n   \"tags\": [\n    \"<string>\",\n    \"<string>\"\n   ],\n   \"lock\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\",\n    \"created_by\": {\n     \"id\": \"<string>\",\n     \"type\": \"<string>\",\n     \"name\": \"<string>\",\n     \"login\": \"<email>\"\n    },\n    \"created_at\": \"<dateTime>\",\n    \"expired_at\": \"<dateTime>\",\n    \"is_download_prevented\": \"<boolean>\"\n   },\n   \"extension\": \"<string>\",\n   \"is_package\": \"<boolean>\",\n   \"expiring_embed_link\": \"<string>\",\n   \"watermark_info\": {\n    \"is_watermarked\": \"<boolean>\"\n   },\n   \"allowed_invitee_roles\": \"company\",\n   \"is_externally_owned\": \"<boolean>\",\n   \"has_collaborations\": \"<boolean>\",\n   \"metadata\": \"<object>\"\n  }\n ]\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "02254fc3-6b7d-456c-b249-7c45877356fe",
              "name": "Returns an error if the file already exists,\nor the account has run out of disk space.",
              "originalRequest": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "2.0",
                    "files",
                    "content",
                    "files",
                    "content"
                  ],
                  "host": [
                    "upload",
                    "box",
                    "com"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "<string>,<string>"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "An optional header containing the SHA-1 hash of the file to\nensure that the file was not corrupted in transit.",
                      "type": "text/plain"
                    },
                    "key": "Content-MD5",
                    "value": "<string>"
                  },
                  {
                    "key": "Content-Type",
                    "value": "multipart/form-data"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "attributes",
                      "value": "{\"name\":\"<string>\",\"parent\":{\"id\":\"<string>\"},\"content_created_at\":\"<dateTime>\",\"content_modified_at\":\"<dateTime>\"}"
                    },
                    {
                      "key": "file",
                      "value": "<binary>"
                    }
                  ]
                }
              },
              "status": "Conflict",
              "code": 409,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        }
      ]
    },
    {
      "id": "7595e975-8e58-4c01-9df7-d1017b7f5c70",
      "name": "Chunked Uploads",
      "item": [
        {
          "id": "bfe9a8c6-74be-4317-97e7-3b1084d35f1c",
          "name": "Create upload session for existing file",
          "request": {
            "name": "Create upload session for existing file",
            "description": {
              "content": "Creates an upload session for an existing file.",
              "type": "text/plain"
            },
            "url": {
              "protocol": "https",
              "path": [
                "api",
                "2.0",
                "files",
                ":file_id",
                "upload_sessions"
              ],
              "host": [
                "upload",
                "box",
                "com"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "The ID of the file.",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "file_id"
                }
              ]
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": {
              "type": "oauth2"
            },
            "body": {
              "mode": "raw",
              "raw": "{\n    \"file_size\": \"<long>\",\n    \"file_name\": \"<string>\"\n}"
            }
          },
          "response": [
            {
              "id": "635cf5df-42dd-4492-aca5-45a97ca0e1c6",
              "name": "Returns a new upload session.",
              "originalRequest": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "2.0",
                    "files",
                    "<string>",
                    "upload_sessions"
                  ],
                  "host": [
                    "upload",
                    "box",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"file_size\": \"<long>\",\n    \"file_name\": \"<string>\"\n}"
                }
              },
              "status": "Created",
              "code": 201,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"id\": \"<string>\",\n \"type\": \"<string>\",\n \"session_expires_at\": \"<dateTime>\",\n \"part_size\": \"<long>\",\n \"total_parts\": \"<integer>\",\n \"num_parts_processed\": \"<integer>\",\n \"session_endpoints\": {\n  \"upload_part\": \"<string>\",\n  \"commit\": \"<string>\",\n  \"abort\": \"<string>\",\n  \"list_parts\": \"<string>\",\n  \"status\": \"<string>\",\n  \"log_event\": \"<string>\"\n }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "be26348a-128f-4717-ae0b-03d0607809e8",
              "name": "Returns an error if the file already exists,\nor the account has run out of disk space.",
              "originalRequest": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "2.0",
                    "files",
                    "<string>",
                    "upload_sessions"
                  ],
                  "host": [
                    "upload",
                    "box",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"file_size\": \"<long>\",\n    \"file_name\": \"<string>\"\n}"
                }
              },
              "status": "Conflict",
              "code": 409,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "a2cba6e6-8998-4dd8-b471-ee4b0c79931c",
          "name": "Create upload session",
          "request": {
            "name": "Create upload session",
            "description": {
              "content": "Creates an upload session for a new file.",
              "type": "text/plain"
            },
            "url": {
              "protocol": "https",
              "path": [
                "api",
                "2.0",
                "files",
                "upload_sessions"
              ],
              "host": [
                "upload",
                "box",
                "com"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": {
              "type": "oauth2"
            },
            "body": {
              "mode": "raw",
              "raw": "{\n    \"folder_id\": \"<string>\",\n    \"file_size\": \"<long>\",\n    \"file_name\": \"<string>\"\n}"
            }
          },
          "response": [
            {
              "id": "d0a02ffe-1b10-420c-824d-ff885df7fb66",
              "name": "Returns a new upload session.",
              "originalRequest": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "2.0",
                    "files",
                    "upload_sessions"
                  ],
                  "host": [
                    "upload",
                    "box",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"folder_id\": \"<string>\",\n    \"file_size\": \"<long>\",\n    \"file_name\": \"<string>\"\n}"
                }
              },
              "status": "Created",
              "code": 201,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"session_expires_at\": \"<dateTime>\",\n \"part_size\": \"<long>\",\n \"total_parts\": \"<integer>\",\n \"num_parts_processed\": \"<integer>\",\n \"session_endpoints\": {\n  \"upload_part\": \"<string>\",\n  \"commit\": \"<string>\",\n  \"abort\": \"<string>\",\n  \"list_parts\": \"<string>\",\n  \"status\": \"<string>\",\n  \"log_event\": \"<string>\"\n }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "365c60d7-f825-4f08-a79d-42fa7f1feb5f",
              "name": "Returns an error if the file already exists,\nor the account has run out of disk space.",
              "originalRequest": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "2.0",
                    "files",
                    "upload_sessions"
                  ],
                  "host": [
                    "upload",
                    "box",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"folder_id\": \"<string>\",\n    \"file_size\": \"<long>\",\n    \"file_name\": \"<string>\"\n}"
                }
              },
              "status": "Conflict",
              "code": 409,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "1225d89a-8377-4b79-9d82-a33c8666da9d",
          "name": "Get upload session",
          "request": {
            "name": "Get upload session",
            "description": {
              "content": "Return information about an upload session.",
              "type": "text/plain"
            },
            "url": {
              "protocol": "https",
              "path": [
                "api",
                "2.0",
                "files",
                "upload_sessions",
                ":upload_session_id"
              ],
              "host": [
                "upload",
                "box",
                "com"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "The ID of the upload session.",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "upload_session_id"
                }
              ]
            },
            "method": "GET",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "2a31f017-85ce-4960-a4f2-a31d51ec7da0",
              "name": "Returns an upload session object.",
              "originalRequest": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "2.0",
                    "files",
                    "upload_sessions",
                    "<string>"
                  ],
                  "host": [
                    "upload",
                    "box",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"session_expires_at\": \"<dateTime>\",\n \"part_size\": \"<long>\",\n \"total_parts\": \"<integer>\",\n \"num_parts_processed\": \"<integer>\",\n \"session_endpoints\": {\n  \"upload_part\": \"<string>\",\n  \"commit\": \"<string>\",\n  \"abort\": \"<string>\",\n  \"list_parts\": \"<string>\",\n  \"status\": \"<string>\",\n  \"log_event\": \"<string>\"\n }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "88d048e5-353a-48bd-8805-9ef5c02d6060",
          "name": "Upload a part",
          "request": {
            "name": "Upload a part",
            "description": {
              "content": "Updates a chunk of an upload session for a file.",
              "type": "text/plain"
            },
            "url": {
              "protocol": "https",
              "path": [
                "api",
                "2.0",
                "files",
                "upload_sessions",
                ":upload_session_id"
              ],
              "host": [
                "upload",
                "box",
                "com"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "The ID of the upload session.",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "upload_session_id"
                }
              ]
            },
            "header": [
              {
                "key": "Digest",
                "value": "<string>",
                "description": "The [RFC3230][1] message digest of the chunk uploaded.\n\nOnly SHA-1 is supported. The SHA-1 digest must be Base64\nencoded. The format of this header is as\n`sha=BASE64_ENCODED_DIGEST`.\n\n[1]: https://tools.ietf.org/html/rfc3230"
              },
              {
                "key": "Content-Range",
                "value": "<string>",
                "description": "The byte range of the chunk.\n\nMust not overlap with the range of a part already\nuploaded this session."
              },
              {
                "key": "Content-Type",
                "value": "application/octet-stream"
              }
            ],
            "method": "PUT",
            "auth": {
              "type": "oauth2"
            },
            "body": {
              "mode": "raw",
              "raw": "\"<binary>\""
            }
          },
          "response": [
            {
              "id": "cd8cc155-3c72-4142-b0a3-b5ba28ec501b",
              "name": "Chunk has been uploaded successfully.",
              "originalRequest": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "2.0",
                    "files",
                    "upload_sessions",
                    "<string>"
                  ],
                  "host": [
                    "upload",
                    "box",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "The [RFC3230][1] message digest of the chunk uploaded.\n\nOnly SHA-1 is supported. The SHA-1 digest must be Base64\nencoded. The format of this header is as\n`sha=BASE64_ENCODED_DIGEST`.\n\n[1]: https://tools.ietf.org/html/rfc3230",
                      "type": "text/plain"
                    },
                    "key": "Digest",
                    "value": "<string>"
                  },
                  {
                    "description": {
                      "content": "The byte range of the chunk.\n\nMust not overlap with the range of a part already\nuploaded this session.",
                      "type": "text/plain"
                    },
                    "key": "Content-Range",
                    "value": "<string>"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/octet-stream"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "\"<binary>\""
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"part_id\": \"<string>\",\n \"offset\": \"<long>\",\n \"size\": \"<long>\",\n \"sha1\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "d344de05-fd4a-452c-b06d-649930830694",
              "name": "Returns an error if the chunk conflicts with another\nchunk previously uploaded.",
              "originalRequest": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "2.0",
                    "files",
                    "upload_sessions",
                    "<string>"
                  ],
                  "host": [
                    "upload",
                    "box",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "The [RFC3230][1] message digest of the chunk uploaded.\n\nOnly SHA-1 is supported. The SHA-1 digest must be Base64\nencoded. The format of this header is as\n`sha=BASE64_ENCODED_DIGEST`.\n\n[1]: https://tools.ietf.org/html/rfc3230",
                      "type": "text/plain"
                    },
                    "key": "Digest",
                    "value": "<string>"
                  },
                  {
                    "description": {
                      "content": "The byte range of the chunk.\n\nMust not overlap with the range of a part already\nuploaded this session.",
                      "type": "text/plain"
                    },
                    "key": "Content-Range",
                    "value": "<string>"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/octet-stream"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "\"<binary>\""
                }
              },
              "status": "Conflict",
              "code": 409,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "3ee9f72c-9178-46b9-82a9-fde872c6ea9b",
              "name": "Returns an error if a precondition failed.",
              "originalRequest": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "2.0",
                    "files",
                    "upload_sessions",
                    "<string>"
                  ],
                  "host": [
                    "upload",
                    "box",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "The [RFC3230][1] message digest of the chunk uploaded.\n\nOnly SHA-1 is supported. The SHA-1 digest must be Base64\nencoded. The format of this header is as\n`sha=BASE64_ENCODED_DIGEST`.\n\n[1]: https://tools.ietf.org/html/rfc3230",
                      "type": "text/plain"
                    },
                    "key": "Digest",
                    "value": "<string>"
                  },
                  {
                    "description": {
                      "content": "The byte range of the chunk.\n\nMust not overlap with the range of a part already\nuploaded this session.",
                      "type": "text/plain"
                    },
                    "key": "Content-Range",
                    "value": "<string>"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/octet-stream"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "\"<binary>\""
                }
              },
              "status": "Precondition Failed",
              "code": 412,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "abab2dd3-4991-4fc6-8769-02af9dfa8195",
              "name": "Returns an error if the content range does not match a specified range\nfor the session.",
              "originalRequest": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "2.0",
                    "files",
                    "upload_sessions",
                    "<string>"
                  ],
                  "host": [
                    "upload",
                    "box",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "The [RFC3230][1] message digest of the chunk uploaded.\n\nOnly SHA-1 is supported. The SHA-1 digest must be Base64\nencoded. The format of this header is as\n`sha=BASE64_ENCODED_DIGEST`.\n\n[1]: https://tools.ietf.org/html/rfc3230",
                      "type": "text/plain"
                    },
                    "key": "Digest",
                    "value": "<string>"
                  },
                  {
                    "description": {
                      "content": "The byte range of the chunk.\n\nMust not overlap with the range of a part already\nuploaded this session.",
                      "type": "text/plain"
                    },
                    "key": "Content-Range",
                    "value": "<string>"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/octet-stream"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "\"<binary>\""
                }
              },
              "status": "Requested Range Not Satisfiable",
              "code": 416,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "2e7dd834-fd21-4ef6-aa36-e7b3a5110bd2",
          "name": "Abort upload session",
          "request": {
            "name": "Abort upload session",
            "description": {
              "content": "Abort an upload session and discard all data uploaded.\n\nThis cannot be reversed.",
              "type": "text/plain"
            },
            "url": {
              "protocol": "https",
              "path": [
                "api",
                "2.0",
                "files",
                "upload_sessions",
                ":upload_session_id"
              ],
              "host": [
                "upload",
                "box",
                "com"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "The ID of the upload session.",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "upload_session_id"
                }
              ]
            },
            "method": "DELETE",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "11cb1c96-baeb-45b3-accc-db01504a3d90",
              "name": "A blank response is returned if the session was\nsuccessfully aborted.",
              "originalRequest": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "2.0",
                    "files",
                    "upload_sessions",
                    "<string>"
                  ],
                  "host": [
                    "upload",
                    "box",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE",
                "body": {}
              },
              "status": "No Content",
              "code": 204,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            }
          ],
          "event": []
        },
        {
          "id": "a48562bb-1a9e-4c39-932a-307103efe000",
          "name": "List parts",
          "request": {
            "name": "List parts",
            "description": {
              "content": "Return a list of the chunks uploaded to the upload\nsession so far.",
              "type": "text/plain"
            },
            "url": {
              "protocol": "https",
              "path": [
                "api",
                "2.0",
                "files",
                "upload_sessions",
                ":upload_session_id",
                "parts"
              ],
              "host": [
                "upload",
                "box",
                "com"
              ],
              "query": [
                {
                  "description": "The offset of the item at which to begin the response.",
                  "key": "offset",
                  "value": "<long>"
                },
                {
                  "description": "The maximum number of items to return per page.",
                  "key": "limit",
                  "value": "100"
                }
              ],
              "variable": [
                {
                  "description": {
                    "content": "The ID of the upload session.",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "upload_session_id"
                }
              ]
            },
            "method": "GET",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "4405c611-943e-4e60-9e2c-3ea15f3f0fbe",
              "name": "Returns a list of parts that have been uploaded.",
              "originalRequest": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "2.0",
                    "files",
                    "upload_sessions",
                    "<string>",
                    "parts"
                  ],
                  "host": [
                    "upload",
                    "box",
                    "com"
                  ],
                  "query": [
                    {
                      "key": "offset",
                      "value": "<long>"
                    },
                    {
                      "key": "limit",
                      "value": "100"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"total_count\": \"<long>\",\n \"limit\": \"<long>\",\n \"offset\": \"<long>\",\n \"order\": [\n  {\n   \"by\": \"<string>\",\n   \"direction\": \"<string>\"\n  },\n  {\n   \"by\": \"<string>\",\n   \"direction\": \"<string>\"\n  }\n ],\n \"entries\": [\n  {\n   \"part_id\": \"<string>\",\n   \"offset\": \"<long>\",\n   \"size\": \"<long>\",\n   \"sha1\": \"<string>\"\n  },\n  {\n   \"part_id\": \"<string>\",\n   \"offset\": \"<long>\",\n   \"size\": \"<long>\",\n   \"sha1\": \"<string>\"\n  }\n ]\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "504d6ebd-d404-4d79-a5a0-a9e832dbb64e",
          "name": "Commit upload session",
          "request": {
            "name": "Commit upload session",
            "description": {
              "content": "Close an upload session and create a file from the\nuploaded chunks.",
              "type": "text/plain"
            },
            "url": {
              "protocol": "https",
              "path": [
                "api",
                "2.0",
                "files",
                "upload_sessions",
                ":upload_session_id",
                "commit"
              ],
              "host": [
                "upload",
                "box",
                "com"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "The ID of the upload session.",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "upload_session_id"
                }
              ]
            },
            "header": [
              {
                "key": "Digest",
                "value": "<string>",
                "description": "The [RFC3230][1] message digest of the whole file.\n\nOnly SHA-1 is supported. The SHA-1 digest must be Base64\nencoded. The format of this header is as\n`sha=BASE64_ENCODED_DIGEST`.\n\n[1]: https://tools.ietf.org/html/rfc3230"
              },
              {
                "key": "If-Match",
                "value": "<string>",
                "description": "Ensure this item hasn't recently changed\nby ensuring the item's current `etag` matches the\n`etag` passed into this header."
              },
              {
                "key": "If-None-Match",
                "value": "<string>",
                "description": "Ensures the changes are only applied if the\nitem's `etag` does not match the provided\n`etag`, ensuring that the item is only updated\nif the content has changed."
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": {
              "type": "oauth2"
            },
            "body": {
              "mode": "raw",
              "raw": "{\n    \"parts\": [\n        {\n            \"part_id\": \"<string>\",\n            \"offset\": \"<long>\",\n            \"size\": \"<long>\"\n        },\n        {\n            \"part_id\": \"<string>\",\n            \"offset\": \"<long>\",\n            \"size\": \"<long>\"\n        }\n    ]\n}"
            }
          },
          "response": [
            {
              "id": "30bdf81d-3fac-4121-9205-09fb9064bea8",
              "name": "Returns the file object in a list.",
              "originalRequest": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "2.0",
                    "files",
                    "upload_sessions",
                    "<string>",
                    "commit"
                  ],
                  "host": [
                    "upload",
                    "box",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "The [RFC3230][1] message digest of the whole file.\n\nOnly SHA-1 is supported. The SHA-1 digest must be Base64\nencoded. The format of this header is as\n`sha=BASE64_ENCODED_DIGEST`.\n\n[1]: https://tools.ietf.org/html/rfc3230",
                      "type": "text/plain"
                    },
                    "key": "Digest",
                    "value": "<string>"
                  },
                  {
                    "description": {
                      "content": "Ensure this item hasn't recently changed\nby ensuring the item's current `etag` matches the\n`etag` passed into this header.",
                      "type": "text/plain"
                    },
                    "key": "If-Match",
                    "value": "<string>"
                  },
                  {
                    "description": {
                      "content": "Ensures the changes are only applied if the\nitem's `etag` does not match the provided\n`etag`, ensuring that the item is only updated\nif the content has changed.",
                      "type": "text/plain"
                    },
                    "key": "If-None-Match",
                    "value": "<string>"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"parts\": [\n        {\n            \"part_id\": \"<string>\",\n            \"offset\": \"<long>\",\n            \"size\": \"<long>\"\n        },\n        {\n            \"part_id\": \"<string>\",\n            \"offset\": \"<long>\",\n            \"size\": \"<long>\"\n        }\n    ]\n}"
                }
              },
              "status": "Created",
              "code": 201,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"total_count\": \"<long>\",\n \"entries\": [\n  {\n   \"id\": \"<string>\",\n   \"type\": \"<string>\",\n   \"sequence_id\": \"<string>\",\n   \"etag\": \"<string>\",\n   \"name\": \"<string>\",\n   \"sha1\": \"<digest>\",\n   \"description\": \"<string>\",\n   \"size\": \"<integer>\",\n   \"path_collection\": [\n    {\n     \"id\": \"<string>\",\n     \"type\": \"<string>\",\n     \"sequence_id\": \"<string>\",\n     \"etag\": \"<string>\",\n     \"name\": \"<string>\"\n    },\n    {\n     \"id\": \"<string>\",\n     \"type\": \"<string>\",\n     \"sequence_id\": \"<string>\",\n     \"etag\": \"<string>\",\n     \"name\": \"<string>\"\n    }\n   ],\n   \"created_at\": \"<dateTime>\",\n   \"modified_at\": \"<dateTime>\",\n   \"trashed_at\": \"<dateTime>\",\n   \"purged_at\": \"<dateTime>\",\n   \"content_created_at\": \"<dateTime>\",\n   \"content_modified_at\": \"<dateTime>\",\n   \"expires_at\": \"<dateTime>\",\n   \"created_by\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"modified_by\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"owned_by\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"shared_link\": {\n    \"url\": \"<url>\",\n    \"download_url\": \"<url>\",\n    \"vanity_url\": \"<url>\",\n    \"access\": \"<string>\",\n    \"effective_access\": \"<string>\",\n    \"effective_permission\": \"<string>\",\n    \"unshared_at\": \"<dateTime>\",\n    \"is_password_enabled\": \"<boolean>\",\n    \"permissions\": {\n     \"can_download\": \"<boolean>\",\n     \"can_preview\": \"<boolean>\"\n    },\n    \"download_count\": \"<integer>\",\n    \"preview_count\": \"<integer>\"\n   },\n   \"parent\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\"\n   },\n   \"item_status\": \"<string>\",\n   \"version_number\": \"<string>\",\n   \"comment_count\": \"<integer>\",\n   \"permissions\": {\n    \"can_delete\": \"<boolean>\",\n    \"can_download\": \"<boolean>\",\n    \"can_invite_collaborator\": \"<boolean>\",\n    \"can_rename\": \"<boolean>\",\n    \"can_set_share_access\": \"<boolean>\",\n    \"can_share\": \"<boolean>\",\n    \"can_annotate\": \"<boolean>\",\n    \"can_comment\": \"<boolean>\",\n    \"can_preview\": \"<boolean>\",\n    \"can_upload\": \"<boolean>\",\n    \"can_view_annotations_all\": \"<boolean>\",\n    \"can_view_annotations_self\": \"<boolean>\"\n   },\n   \"tags\": [\n    \"<string>\",\n    \"<string>\"\n   ],\n   \"lock\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\",\n    \"created_by\": {\n     \"id\": \"<string>\",\n     \"type\": \"<string>\",\n     \"name\": \"<string>\",\n     \"login\": \"<email>\"\n    },\n    \"created_at\": \"<dateTime>\",\n    \"expired_at\": \"<dateTime>\",\n    \"is_download_prevented\": \"<boolean>\"\n   },\n   \"extension\": \"<string>\",\n   \"is_package\": \"<boolean>\",\n   \"expiring_embed_link\": \"<string>\",\n   \"watermark_info\": {\n    \"is_watermarked\": \"<boolean>\"\n   },\n   \"allowed_invitee_roles\": \"company\",\n   \"is_externally_owned\": \"<boolean>\",\n   \"has_collaborations\": \"<boolean>\",\n   \"metadata\": \"<object>\"\n  },\n  {\n   \"id\": \"<string>\",\n   \"type\": \"<string>\",\n   \"sequence_id\": \"<string>\",\n   \"etag\": \"<string>\",\n   \"name\": \"<string>\",\n   \"sha1\": \"<digest>\",\n   \"description\": \"<string>\",\n   \"size\": \"<integer>\",\n   \"path_collection\": [\n    {\n     \"id\": \"<string>\",\n     \"type\": \"<string>\",\n     \"sequence_id\": \"<string>\",\n     \"etag\": \"<string>\",\n     \"name\": \"<string>\"\n    },\n    {\n     \"id\": \"<string>\",\n     \"type\": \"<string>\",\n     \"sequence_id\": \"<string>\",\n     \"etag\": \"<string>\",\n     \"name\": \"<string>\"\n    }\n   ],\n   \"created_at\": \"<dateTime>\",\n   \"modified_at\": \"<dateTime>\",\n   \"trashed_at\": \"<dateTime>\",\n   \"purged_at\": \"<dateTime>\",\n   \"content_created_at\": \"<dateTime>\",\n   \"content_modified_at\": \"<dateTime>\",\n   \"expires_at\": \"<dateTime>\",\n   \"created_by\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"modified_by\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"owned_by\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"shared_link\": {\n    \"url\": \"<url>\",\n    \"download_url\": \"<url>\",\n    \"vanity_url\": \"<url>\",\n    \"access\": \"<string>\",\n    \"effective_access\": \"<string>\",\n    \"effective_permission\": \"<string>\",\n    \"unshared_at\": \"<dateTime>\",\n    \"is_password_enabled\": \"<boolean>\",\n    \"permissions\": {\n     \"can_download\": \"<boolean>\",\n     \"can_preview\": \"<boolean>\"\n    },\n    \"download_count\": \"<integer>\",\n    \"preview_count\": \"<integer>\"\n   },\n   \"parent\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\"\n   },\n   \"item_status\": \"<string>\",\n   \"version_number\": \"<string>\",\n   \"comment_count\": \"<integer>\",\n   \"permissions\": {\n    \"can_delete\": \"<boolean>\",\n    \"can_download\": \"<boolean>\",\n    \"can_invite_collaborator\": \"<boolean>\",\n    \"can_rename\": \"<boolean>\",\n    \"can_set_share_access\": \"<boolean>\",\n    \"can_share\": \"<boolean>\",\n    \"can_annotate\": \"<boolean>\",\n    \"can_comment\": \"<boolean>\",\n    \"can_preview\": \"<boolean>\",\n    \"can_upload\": \"<boolean>\",\n    \"can_view_annotations_all\": \"<boolean>\",\n    \"can_view_annotations_self\": \"<boolean>\"\n   },\n   \"tags\": [\n    \"<string>\",\n    \"<string>\"\n   ],\n   \"lock\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\",\n    \"created_by\": {\n     \"id\": \"<string>\",\n     \"type\": \"<string>\",\n     \"name\": \"<string>\",\n     \"login\": \"<email>\"\n    },\n    \"created_at\": \"<dateTime>\",\n    \"expired_at\": \"<dateTime>\",\n    \"is_download_prevented\": \"<boolean>\"\n   },\n   \"extension\": \"<string>\",\n   \"is_package\": \"<boolean>\",\n   \"expiring_embed_link\": \"<string>\",\n   \"watermark_info\": {\n    \"is_watermarked\": \"<boolean>\"\n   },\n   \"allowed_invitee_roles\": \"collaborators\",\n   \"is_externally_owned\": \"<boolean>\",\n   \"has_collaborations\": \"<boolean>\",\n   \"metadata\": \"<object>\"\n  }\n ]\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "0151b49d-ae4f-48f0-9edf-37d530474a9b",
              "name": "Returns when all chunks have been uploaded but not yet processed.\n\nInspect the upload session to get more information about the\nprogress of processing the chunks, then retry committing the file\nwhen all chunks have processed.",
              "originalRequest": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "2.0",
                    "files",
                    "upload_sessions",
                    "<string>",
                    "commit"
                  ],
                  "host": [
                    "upload",
                    "box",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "The [RFC3230][1] message digest of the whole file.\n\nOnly SHA-1 is supported. The SHA-1 digest must be Base64\nencoded. The format of this header is as\n`sha=BASE64_ENCODED_DIGEST`.\n\n[1]: https://tools.ietf.org/html/rfc3230",
                      "type": "text/plain"
                    },
                    "key": "Digest",
                    "value": "<string>"
                  },
                  {
                    "description": {
                      "content": "Ensure this item hasn't recently changed\nby ensuring the item's current `etag` matches the\n`etag` passed into this header.",
                      "type": "text/plain"
                    },
                    "key": "If-Match",
                    "value": "<string>"
                  },
                  {
                    "description": {
                      "content": "Ensures the changes are only applied if the\nitem's `etag` does not match the provided\n`etag`, ensuring that the item is only updated\nif the content has changed.",
                      "type": "text/plain"
                    },
                    "key": "If-None-Match",
                    "value": "<string>"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"parts\": [\n        {\n            \"part_id\": \"<string>\",\n            \"offset\": \"<long>\",\n            \"size\": \"<long>\"\n        },\n        {\n            \"part_id\": \"<string>\",\n            \"offset\": \"<long>\",\n            \"size\": \"<long>\"\n        }\n    ]\n}"
                }
              },
              "status": "Accepted",
              "code": 202,
              "header": [
                {
                  "key": "Retry-After",
                  "value": "<integer>",
                  "description": "Indicates the number of seconds the client should wait before\nattempting their commit request again."
                },
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "cefe22c0-6ea8-4f0f-bdf1-18c2076538e3",
              "name": "Returns an error if there is already a file with the same name\nin the target folder.",
              "originalRequest": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "2.0",
                    "files",
                    "upload_sessions",
                    "<string>",
                    "commit"
                  ],
                  "host": [
                    "upload",
                    "box",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "The [RFC3230][1] message digest of the whole file.\n\nOnly SHA-1 is supported. The SHA-1 digest must be Base64\nencoded. The format of this header is as\n`sha=BASE64_ENCODED_DIGEST`.\n\n[1]: https://tools.ietf.org/html/rfc3230",
                      "type": "text/plain"
                    },
                    "key": "Digest",
                    "value": "<string>"
                  },
                  {
                    "description": {
                      "content": "Ensure this item hasn't recently changed\nby ensuring the item's current `etag` matches the\n`etag` passed into this header.",
                      "type": "text/plain"
                    },
                    "key": "If-Match",
                    "value": "<string>"
                  },
                  {
                    "description": {
                      "content": "Ensures the changes are only applied if the\nitem's `etag` does not match the provided\n`etag`, ensuring that the item is only updated\nif the content has changed.",
                      "type": "text/plain"
                    },
                    "key": "If-None-Match",
                    "value": "<string>"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"parts\": [\n        {\n            \"part_id\": \"<string>\",\n            \"offset\": \"<long>\",\n            \"size\": \"<long>\"\n        },\n        {\n            \"part_id\": \"<string>\",\n            \"offset\": \"<long>\",\n            \"size\": \"<long>\"\n        }\n    ]\n}"
                }
              },
              "status": "Conflict",
              "code": 409,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "ac9dc2be-1ae1-4666-a3d5-2697b45e0a47",
              "name": "Returns an error if the `If-Match` or `If-None-Match` conditions fail.",
              "originalRequest": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "2.0",
                    "files",
                    "upload_sessions",
                    "<string>",
                    "commit"
                  ],
                  "host": [
                    "upload",
                    "box",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "The [RFC3230][1] message digest of the whole file.\n\nOnly SHA-1 is supported. The SHA-1 digest must be Base64\nencoded. The format of this header is as\n`sha=BASE64_ENCODED_DIGEST`.\n\n[1]: https://tools.ietf.org/html/rfc3230",
                      "type": "text/plain"
                    },
                    "key": "Digest",
                    "value": "<string>"
                  },
                  {
                    "description": {
                      "content": "Ensure this item hasn't recently changed\nby ensuring the item's current `etag` matches the\n`etag` passed into this header.",
                      "type": "text/plain"
                    },
                    "key": "If-Match",
                    "value": "<string>"
                  },
                  {
                    "description": {
                      "content": "Ensures the changes are only applied if the\nitem's `etag` does not match the provided\n`etag`, ensuring that the item is only updated\nif the content has changed.",
                      "type": "text/plain"
                    },
                    "key": "If-None-Match",
                    "value": "<string>"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"parts\": [\n        {\n            \"part_id\": \"<string>\",\n            \"offset\": \"<long>\",\n            \"size\": \"<long>\"\n        },\n        {\n            \"part_id\": \"<string>\",\n            \"offset\": \"<long>\",\n            \"size\": \"<long>\"\n        }\n    ]\n}"
                }
              },
              "status": "Precondition Failed",
              "code": 412,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        }
      ]
    },
    {
      "id": "25f61927-9e88-421c-9bd5-2417aead3515",
      "name": "Collaborations",
      "item": [
        {
          "id": "808e8586-be29-49d5-bcd3-a57b55e2b93e",
          "name": "Get file collaborations",
          "request": {
            "name": "Get file collaborations",
            "description": {
              "content": "Retrieves a list of collaborations for a file. This\nreturns all the users that have access to the file.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "files",
                ":file_id",
                "collaborations"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response, unless explicitly specified.",
                  "key": "fields",
                  "value": "<string>,<string>"
                },
                {
                  "description": "The maximum number of items to return per page.",
                  "key": "limit",
                  "value": "100"
                },
                {
                  "description": "The offset of the item at which to begin the response.",
                  "key": "offset",
                  "value": "<long>"
                }
              ],
              "variable": [
                {
                  "description": {
                    "content": "The ID of the file.",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "file_id"
                }
              ]
            },
            "method": "GET",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "45437df6-6ddb-4bb3-b0e7-611ca92703b2",
              "name": "Returns a collection of collaboration objects. If there are no\ncollaborations on this file an empty collection will be returned.",
              "originalRequest": {
                "url": {
                  "path": [
                    "files",
                    "<string>",
                    "collaborations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "<string>,<string>"
                    },
                    {
                      "key": "limit",
                      "value": "100"
                    },
                    {
                      "key": "offset",
                      "value": "<long>"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"total_count\": \"<long>\",\n \"limit\": \"<long>\",\n \"offset\": \"<long>\",\n \"order\": [\n  {\n   \"by\": \"<string>\",\n   \"direction\": \"<string>\"\n  },\n  {\n   \"by\": \"<string>\",\n   \"direction\": \"<string>\"\n  }\n ],\n \"entries\": [\n  {\n   \"id\": \"<string>\",\n   \"type\": \"<string>\",\n   \"item\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\"\n   },\n   \"accessible_by\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"invite_email\": \"<string>\",\n   \"role\": \"<string>\",\n   \"expires_at\": \"<dateTime>\",\n   \"can_view_path\": \"<boolean>\",\n   \"status\": \"<string>\",\n   \"acknowledged_at\": \"<dateTime>\",\n   \"created_by\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"created_at\": \"<dateTime>\",\n   \"modified_at\": \"<dateTime>\",\n   \"acceptance_requirements_status\": {\n    \"terms_of_service_requirement\": {\n     \"is_accepted\": \"<boolean>\",\n     \"terms_of_service\": {\n      \"id\": \"<string>\",\n      \"type\": \"<string>\"\n     }\n    },\n    \"strong_password_requirement\": {\n     \"enterprise_has_strong_password_required_for_external_users\": \"<boolean>\",\n     \"user_has_strong_password\": \"<boolean>\"\n    },\n    \"two_factor_authentication_requirement\": {\n     \"enterprise_has_two_factor_auth_enabled\": \"<boolean>\",\n     \"user_has_two_factor_authentication_enabled\": \"<boolean>\"\n    }\n   }\n  },\n  {\n   \"id\": \"<string>\",\n   \"type\": \"<string>\",\n   \"item\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\"\n   },\n   \"accessible_by\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"invite_email\": \"<string>\",\n   \"role\": \"<string>\",\n   \"expires_at\": \"<dateTime>\",\n   \"can_view_path\": \"<boolean>\",\n   \"status\": \"<string>\",\n   \"acknowledged_at\": \"<dateTime>\",\n   \"created_by\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"created_at\": \"<dateTime>\",\n   \"modified_at\": \"<dateTime>\",\n   \"acceptance_requirements_status\": {\n    \"terms_of_service_requirement\": {\n     \"is_accepted\": \"<boolean>\",\n     \"terms_of_service\": {\n      \"id\": \"<string>\",\n      \"type\": \"<string>\"\n     }\n    },\n    \"strong_password_requirement\": {\n     \"enterprise_has_strong_password_required_for_external_users\": \"<boolean>\",\n     \"user_has_strong_password\": \"<boolean>\"\n    },\n    \"two_factor_authentication_requirement\": {\n     \"enterprise_has_two_factor_auth_enabled\": \"<boolean>\",\n     \"user_has_two_factor_authentication_enabled\": \"<boolean>\"\n    }\n   }\n  }\n ]\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "b509326d-d11e-4b25-ba3b-96e75f38332d",
          "name": "Get folder collaborations",
          "request": {
            "name": "Get folder collaborations",
            "description": {
              "content": "Retrieves a list of collaborations for a folder. This\nreturns all the users that have access to the folder.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "folders",
                ":folder_id",
                "collaborations"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response, unless explicitly specified.",
                  "key": "fields",
                  "value": "<string>,<string>"
                },
                {
                  "description": "The maximum number of items to return per page.",
                  "key": "limit",
                  "value": "100"
                },
                {
                  "description": "The offset of the item at which to begin the response.",
                  "key": "offset",
                  "value": "<long>"
                }
              ],
              "variable": [
                {
                  "description": {
                    "content": "The unique identifier that represent a folder.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the url `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder of a Box account is\nalways represented by the ID `0`.",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "folder_id"
                }
              ]
            },
            "method": "GET",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "977608da-1083-4b5f-8a67-1b83eff31a3a",
              "name": "Returns a collection of collaboration objects. If there are no\ncollaborations on this folder an empty collection will be returned.",
              "originalRequest": {
                "url": {
                  "path": [
                    "folders",
                    "<string>",
                    "collaborations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "<string>,<string>"
                    },
                    {
                      "key": "limit",
                      "value": "100"
                    },
                    {
                      "key": "offset",
                      "value": "<long>"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"total_count\": \"<long>\",\n \"limit\": \"<long>\",\n \"offset\": \"<long>\",\n \"order\": [\n  {\n   \"by\": \"<string>\",\n   \"direction\": \"<string>\"\n  },\n  {\n   \"by\": \"<string>\",\n   \"direction\": \"<string>\"\n  }\n ],\n \"entries\": [\n  {\n   \"id\": \"<string>\",\n   \"type\": \"<string>\",\n   \"item\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\"\n   },\n   \"accessible_by\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"invite_email\": \"<string>\",\n   \"role\": \"<string>\",\n   \"expires_at\": \"<dateTime>\",\n   \"can_view_path\": \"<boolean>\",\n   \"status\": \"<string>\",\n   \"acknowledged_at\": \"<dateTime>\",\n   \"created_by\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"created_at\": \"<dateTime>\",\n   \"modified_at\": \"<dateTime>\",\n   \"acceptance_requirements_status\": {\n    \"terms_of_service_requirement\": {\n     \"is_accepted\": \"<boolean>\",\n     \"terms_of_service\": {\n      \"id\": \"<string>\",\n      \"type\": \"<string>\"\n     }\n    },\n    \"strong_password_requirement\": {\n     \"enterprise_has_strong_password_required_for_external_users\": \"<boolean>\",\n     \"user_has_strong_password\": \"<boolean>\"\n    },\n    \"two_factor_authentication_requirement\": {\n     \"enterprise_has_two_factor_auth_enabled\": \"<boolean>\",\n     \"user_has_two_factor_authentication_enabled\": \"<boolean>\"\n    }\n   }\n  },\n  {\n   \"id\": \"<string>\",\n   \"type\": \"<string>\",\n   \"item\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\"\n   },\n   \"accessible_by\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"invite_email\": \"<string>\",\n   \"role\": \"<string>\",\n   \"expires_at\": \"<dateTime>\",\n   \"can_view_path\": \"<boolean>\",\n   \"status\": \"<string>\",\n   \"acknowledged_at\": \"<dateTime>\",\n   \"created_by\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"created_at\": \"<dateTime>\",\n   \"modified_at\": \"<dateTime>\",\n   \"acceptance_requirements_status\": {\n    \"terms_of_service_requirement\": {\n     \"is_accepted\": \"<boolean>\",\n     \"terms_of_service\": {\n      \"id\": \"<string>\",\n      \"type\": \"<string>\"\n     }\n    },\n    \"strong_password_requirement\": {\n     \"enterprise_has_strong_password_required_for_external_users\": \"<boolean>\",\n     \"user_has_strong_password\": \"<boolean>\"\n    },\n    \"two_factor_authentication_requirement\": {\n     \"enterprise_has_two_factor_auth_enabled\": \"<boolean>\",\n     \"user_has_two_factor_authentication_enabled\": \"<boolean>\"\n    }\n   }\n  }\n ]\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "a75f4f6c-206d-4f3f-86f0-892b7d18bf14",
          "name": "List pending collaborations",
          "request": {
            "name": "List pending collaborations",
            "description": {
              "content": "Retrieves all pending collaboration invites for this user.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "collaborations"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "description": "The status of the collaborations to retrieve",
                  "key": "status",
                  "value": "<string>"
                },
                {
                  "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response, unless explicitly specified.",
                  "key": "fields",
                  "value": "<string>,<string>"
                },
                {
                  "description": "The offset of the item at which to begin the response.",
                  "key": "offset",
                  "value": "<long>"
                },
                {
                  "description": "The maximum number of items to return per page.",
                  "key": "limit",
                  "value": "100"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "263ac388-0f79-49a1-98cc-be29fe2be8d1",
              "name": "Returns a collection of pending collaboration objects.\n\nIf the user has no pending collaborations, the collection\nwill be empty.",
              "originalRequest": {
                "url": {
                  "path": [
                    "collaborations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "status",
                      "value": "<string>"
                    },
                    {
                      "key": "fields",
                      "value": "<string>,<string>"
                    },
                    {
                      "key": "offset",
                      "value": "<long>"
                    },
                    {
                      "key": "limit",
                      "value": "100"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"total_count\": \"<long>\",\n \"limit\": \"<long>\",\n \"offset\": \"<long>\",\n \"order\": [\n  {\n   \"by\": \"<string>\",\n   \"direction\": \"<string>\"\n  },\n  {\n   \"by\": \"<string>\",\n   \"direction\": \"<string>\"\n  }\n ],\n \"entries\": [\n  {\n   \"id\": \"<string>\",\n   \"type\": \"<string>\",\n   \"item\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\"\n   },\n   \"accessible_by\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"invite_email\": \"<string>\",\n   \"role\": \"<string>\",\n   \"expires_at\": \"<dateTime>\",\n   \"can_view_path\": \"<boolean>\",\n   \"status\": \"<string>\",\n   \"acknowledged_at\": \"<dateTime>\",\n   \"created_by\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"created_at\": \"<dateTime>\",\n   \"modified_at\": \"<dateTime>\",\n   \"acceptance_requirements_status\": {\n    \"terms_of_service_requirement\": {\n     \"is_accepted\": \"<boolean>\",\n     \"terms_of_service\": {\n      \"id\": \"<string>\",\n      \"type\": \"<string>\"\n     }\n    },\n    \"strong_password_requirement\": {\n     \"enterprise_has_strong_password_required_for_external_users\": \"<boolean>\",\n     \"user_has_strong_password\": \"<boolean>\"\n    },\n    \"two_factor_authentication_requirement\": {\n     \"enterprise_has_two_factor_auth_enabled\": \"<boolean>\",\n     \"user_has_two_factor_authentication_enabled\": \"<boolean>\"\n    }\n   }\n  },\n  {\n   \"id\": \"<string>\",\n   \"type\": \"<string>\",\n   \"item\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\"\n   },\n   \"accessible_by\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"invite_email\": \"<string>\",\n   \"role\": \"<string>\",\n   \"expires_at\": \"<dateTime>\",\n   \"can_view_path\": \"<boolean>\",\n   \"status\": \"<string>\",\n   \"acknowledged_at\": \"<dateTime>\",\n   \"created_by\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"created_at\": \"<dateTime>\",\n   \"modified_at\": \"<dateTime>\",\n   \"acceptance_requirements_status\": {\n    \"terms_of_service_requirement\": {\n     \"is_accepted\": \"<boolean>\",\n     \"terms_of_service\": {\n      \"id\": \"<string>\",\n      \"type\": \"<string>\"\n     }\n    },\n    \"strong_password_requirement\": {\n     \"enterprise_has_strong_password_required_for_external_users\": \"<boolean>\",\n     \"user_has_strong_password\": \"<boolean>\"\n    },\n    \"two_factor_authentication_requirement\": {\n     \"enterprise_has_two_factor_auth_enabled\": \"<boolean>\",\n     \"user_has_two_factor_authentication_enabled\": \"<boolean>\"\n    }\n   }\n  }\n ]\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "42348218-1cf4-4faa-92dd-943375aa55bc",
          "name": "Create collaboration",
          "request": {
            "name": "Create collaboration",
            "description": {
              "content": "Adds a collaboration for a single user or a single group to a file\nor folder.\n\nCollaborations can be created using email address, user IDs, or a\ngroup IDs.\n\nIf a collaboration is being created with a group, access to\nthis endpoint is dependent on the group's ability to be invited.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "collaborations"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response, unless explicitly specified.",
                  "key": "fields",
                  "value": "<string>,<string>"
                },
                {
                  "description": "Determines if users should receive email notification\nfor the action performed.",
                  "key": "notify",
                  "value": "<boolean>"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": {
              "type": "oauth2"
            },
            "body": {
              "mode": "raw",
              "raw": "{\n    \"item\": {\n        \"id\": \"<string>\",\n        \"type\": \"<string>\"\n    },\n    \"accessible_by\": {\n        \"type\": \"<string>\",\n        \"id\": \"<string>\",\n        \"login\": \"<string>\"\n    },\n    \"role\": \"<string>\",\n    \"can_view_path\": \"<boolean>\"\n}"
            }
          },
          "response": [
            {
              "id": "cb246a63-c183-4920-9422-734b8ae0e3cc",
              "name": "Returns a new collaboration object.",
              "originalRequest": {
                "url": {
                  "path": [
                    "collaborations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "<string>,<string>"
                    },
                    {
                      "key": "notify",
                      "value": "<boolean>"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"item\": {\n        \"id\": \"<string>\",\n        \"type\": \"<string>\"\n    },\n    \"accessible_by\": {\n        \"type\": \"<string>\",\n        \"id\": \"<string>\",\n        \"login\": \"<string>\"\n    },\n    \"role\": \"<string>\",\n    \"can_view_path\": \"<boolean>\"\n}"
                }
              },
              "status": "Created",
              "code": 201,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"item\": {\n  \"id\": \"<string>\",\n  \"type\": \"<string>\",\n  \"sequence_id\": \"<string>\",\n  \"etag\": \"<string>\",\n  \"name\": \"<string>\"\n },\n \"accessible_by\": {\n  \"id\": \"<string>\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"invite_email\": \"<string>\",\n \"role\": \"<string>\",\n \"expires_at\": \"<dateTime>\",\n \"can_view_path\": \"<boolean>\",\n \"status\": \"<string>\",\n \"acknowledged_at\": \"<dateTime>\",\n \"created_by\": {\n  \"id\": \"<string>\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"created_at\": \"<dateTime>\",\n \"modified_at\": \"<dateTime>\",\n \"acceptance_requirements_status\": {\n  \"terms_of_service_requirement\": {\n   \"is_accepted\": \"<boolean>\",\n   \"terms_of_service\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\"\n   }\n  },\n  \"strong_password_requirement\": {\n   \"enterprise_has_strong_password_required_for_external_users\": \"<boolean>\",\n   \"user_has_strong_password\": \"<boolean>\"\n  },\n  \"two_factor_authentication_requirement\": {\n   \"enterprise_has_two_factor_auth_enabled\": \"<boolean>\",\n   \"user_has_two_factor_authentication_enabled\": \"<boolean>\"\n  }\n }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "0d575a4f-654c-4582-ba9c-27898b389b95",
          "name": "Get collaboration",
          "request": {
            "name": "Get collaboration",
            "description": {
              "content": "Retrieves a single collaboration.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "collaborations",
                ":collaboration_id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response, unless explicitly specified.",
                  "key": "fields",
                  "value": "<string>,<string>"
                }
              ],
              "variable": [
                {
                  "description": {
                    "content": "The ID of the collaboration",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "collaboration_id"
                }
              ]
            },
            "method": "GET",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "12184e93-1ff0-4aae-b417-6f03a900f28d",
              "name": "Returns a collaboration object.",
              "originalRequest": {
                "url": {
                  "path": [
                    "collaborations",
                    "<string>"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "<string>,<string>"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"item\": {\n  \"id\": \"<string>\",\n  \"type\": \"<string>\",\n  \"sequence_id\": \"<string>\",\n  \"etag\": \"<string>\",\n  \"name\": \"<string>\"\n },\n \"accessible_by\": {\n  \"id\": \"<string>\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"invite_email\": \"<string>\",\n \"role\": \"<string>\",\n \"expires_at\": \"<dateTime>\",\n \"can_view_path\": \"<boolean>\",\n \"status\": \"<string>\",\n \"acknowledged_at\": \"<dateTime>\",\n \"created_by\": {\n  \"id\": \"<string>\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"created_at\": \"<dateTime>\",\n \"modified_at\": \"<dateTime>\",\n \"acceptance_requirements_status\": {\n  \"terms_of_service_requirement\": {\n   \"is_accepted\": \"<boolean>\",\n   \"terms_of_service\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\"\n   }\n  },\n  \"strong_password_requirement\": {\n   \"enterprise_has_strong_password_required_for_external_users\": \"<boolean>\",\n   \"user_has_strong_password\": \"<boolean>\"\n  },\n  \"two_factor_authentication_requirement\": {\n   \"enterprise_has_two_factor_auth_enabled\": \"<boolean>\",\n   \"user_has_two_factor_authentication_enabled\": \"<boolean>\"\n  }\n }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "9ab814b0-4649-48d3-ac14-24e122508602",
          "name": "Update collaboration",
          "request": {
            "name": "Update collaboration",
            "description": {
              "content": "Updates a collaboration.\n\nCan be used to change the owner of an item, or to\naccept collaboration invites.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "collaborations",
                ":collaboration_id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response, unless explicitly specified.",
                  "key": "fields",
                  "value": "<string>,<string>"
                }
              ],
              "variable": [
                {
                  "description": {
                    "content": "The ID of the collaboration",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "collaboration_id"
                }
              ]
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "auth": {
              "type": "oauth2"
            },
            "body": {
              "mode": "raw",
              "raw": "{\n    \"role\": \"<string>\",\n    \"can_view_path\": \"<boolean>\",\n    \"status\": \"<string>\",\n    \"expires_at\": \"<dateTime>\"\n}"
            }
          },
          "response": [
            {
              "id": "2e7714e1-682a-4ec6-81a4-5e6b24373684",
              "name": "Returns an updated collaboration object unless the owner has changed.",
              "originalRequest": {
                "url": {
                  "path": [
                    "collaborations",
                    "<string>"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "<string>,<string>"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"role\": \"<string>\",\n    \"can_view_path\": \"<boolean>\",\n    \"status\": \"<string>\",\n    \"expires_at\": \"<dateTime>\"\n}"
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"item\": {\n  \"id\": \"<string>\",\n  \"type\": \"<string>\",\n  \"sequence_id\": \"<string>\",\n  \"etag\": \"<string>\",\n  \"name\": \"<string>\"\n },\n \"accessible_by\": {\n  \"id\": \"<string>\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"invite_email\": \"<string>\",\n \"role\": \"<string>\",\n \"expires_at\": \"<dateTime>\",\n \"can_view_path\": \"<boolean>\",\n \"status\": \"<string>\",\n \"acknowledged_at\": \"<dateTime>\",\n \"created_by\": {\n  \"id\": \"<string>\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"created_at\": \"<dateTime>\",\n \"modified_at\": \"<dateTime>\",\n \"acceptance_requirements_status\": {\n  \"terms_of_service_requirement\": {\n   \"is_accepted\": \"<boolean>\",\n   \"terms_of_service\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\"\n   }\n  },\n  \"strong_password_requirement\": {\n   \"enterprise_has_strong_password_required_for_external_users\": \"<boolean>\",\n   \"user_has_strong_password\": \"<boolean>\"\n  },\n  \"two_factor_authentication_requirement\": {\n   \"enterprise_has_two_factor_auth_enabled\": \"<boolean>\",\n   \"user_has_two_factor_authentication_enabled\": \"<boolean>\"\n  }\n }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "50722ab6-333c-4575-9e41-9f21e8649caa",
              "name": "If the role is changed to `owner`, the collaboration is deleted\nand a new collaboration is created. The previous `owner` of\nthe old collaboration will be a `co-owner` on the new collaboration.",
              "originalRequest": {
                "url": {
                  "path": [
                    "collaborations",
                    "<string>"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "<string>,<string>"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"role\": \"<string>\",\n    \"can_view_path\": \"<boolean>\",\n    \"status\": \"<string>\",\n    \"expires_at\": \"<dateTime>\"\n}"
                }
              },
              "status": "No Content",
              "code": 204,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"item\": {\n  \"id\": \"<string>\",\n  \"type\": \"<string>\",\n  \"sequence_id\": \"<string>\",\n  \"etag\": \"<string>\",\n  \"name\": \"<string>\"\n },\n \"accessible_by\": {\n  \"id\": \"<string>\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"invite_email\": \"<string>\",\n \"role\": \"<string>\",\n \"expires_at\": \"<dateTime>\",\n \"can_view_path\": \"<boolean>\",\n \"status\": \"<string>\",\n \"acknowledged_at\": \"<dateTime>\",\n \"created_by\": {\n  \"id\": \"<string>\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"created_at\": \"<dateTime>\",\n \"modified_at\": \"<dateTime>\",\n \"acceptance_requirements_status\": {\n  \"terms_of_service_requirement\": {\n   \"is_accepted\": \"<boolean>\",\n   \"terms_of_service\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\"\n   }\n  },\n  \"strong_password_requirement\": {\n   \"enterprise_has_strong_password_required_for_external_users\": \"<boolean>\",\n   \"user_has_strong_password\": \"<boolean>\"\n  },\n  \"two_factor_authentication_requirement\": {\n   \"enterprise_has_two_factor_auth_enabled\": \"<boolean>\",\n   \"user_has_two_factor_authentication_enabled\": \"<boolean>\"\n  }\n }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "f6db9a26-2793-4fde-8947-4a89d9d3cf18",
          "name": "Delete collaboration",
          "request": {
            "name": "Delete collaboration",
            "description": {
              "content": "Deletes a single collaboration.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "collaborations",
                ":collaboration_id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "The ID of the collaboration",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "collaboration_id"
                }
              ]
            },
            "method": "DELETE",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "03b9ca8c-a9c1-48c7-9e29-5a8c827a758b",
              "name": "A blank response is returned if the collaboration was\nsuccessfully deleted.",
              "originalRequest": {
                "url": {
                  "path": [
                    "collaborations",
                    "<string>"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE",
                "body": {}
              },
              "status": "No Content",
              "code": 204,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            }
          ],
          "event": []
        }
      ]
    },
    {
      "id": "534b1c4d-f3c3-4a99-bc39-d711bec0b981",
      "name": "Comments",
      "item": [
        {
          "id": "70e5015d-5d3b-419c-a91d-bfe3effc0fd0",
          "name": "List a file's comments",
          "request": {
            "name": "List a file's comments",
            "description": {
              "content": "Retrieves a list of comments for a file.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "files",
                ":file_id",
                "comments"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response, unless explicitly specified.",
                  "key": "fields",
                  "value": "<string>,<string>"
                },
                {
                  "description": "The maximum number of items to return per page.",
                  "key": "limit",
                  "value": "100"
                },
                {
                  "description": "The offset of the item at which to begin the response.",
                  "key": "offset",
                  "value": "<long>"
                }
              ],
              "variable": [
                {
                  "description": {
                    "content": "The ID of the file.",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "file_id"
                }
              ]
            },
            "method": "GET",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "f88d9544-ac64-47c5-a9bd-6b3f6be1d7a0",
              "name": "Returns a collection of comment objects. If there are no\ncomments on this file an empty collection will be returned.",
              "originalRequest": {
                "url": {
                  "path": [
                    "files",
                    "<string>",
                    "comments"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "<string>,<string>"
                    },
                    {
                      "key": "limit",
                      "value": "100"
                    },
                    {
                      "key": "offset",
                      "value": "<long>"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"total_count\": \"<long>\",\n \"limit\": \"<long>\",\n \"offset\": \"<long>\",\n \"order\": [\n  {\n   \"by\": \"<string>\",\n   \"direction\": \"<string>\"\n  },\n  {\n   \"by\": \"<string>\",\n   \"direction\": \"<string>\"\n  }\n ],\n \"entries\": [\n  {\n   \"id\": \"<string>\",\n   \"type\": \"<string>\",\n   \"is_reply_comment\": \"<boolean>\",\n   \"message\": \"<string>\",\n   \"created_by\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"created_at\": \"<dateTime>\",\n   \"modified_at\": \"<dateTime>\",\n   \"item\": {\n    \"id\": \"<string>\"\n   },\n   \"tagged_message\": \"<string>\"\n  },\n  {\n   \"id\": \"<string>\",\n   \"type\": \"<string>\",\n   \"is_reply_comment\": \"<boolean>\",\n   \"message\": \"<string>\",\n   \"created_by\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"created_at\": \"<dateTime>\",\n   \"modified_at\": \"<dateTime>\",\n   \"item\": {\n    \"id\": \"<string>\"\n   },\n   \"tagged_message\": \"<string>\"\n  }\n ]\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "44c0fc11-c659-4ae4-98bb-b906c10f9962",
          "name": "Create comment",
          "request": {
            "name": "Create comment",
            "description": {
              "content": "Adds a comment comment by the user to a specific file, or\nas a reply to an other comment.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "comments"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response, unless explicitly specified.",
                  "key": "fields",
                  "value": "<string>,<string>"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": {
              "type": "oauth2"
            },
            "body": {
              "mode": "raw",
              "raw": "{\n    \"message\": \"<string>\",\n    \"tagged_message\": \"<string>\",\n    \"item\": {\n        \"id\": \"<string>\",\n        \"type\": \"<string>\"\n    }\n}"
            }
          },
          "response": [
            {
              "id": "79987c87-4181-4704-8520-1b1807797f4f",
              "name": "Returns the newly created comment object.\n\n[Some fields are optional](#comment) and need to be explicitly\nrequested using the [fields](#post_comments--request--fields) parameter.",
              "originalRequest": {
                "url": {
                  "path": [
                    "comments"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "<string>,<string>"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"message\": \"<string>\",\n    \"tagged_message\": \"<string>\",\n    \"item\": {\n        \"id\": \"<string>\",\n        \"type\": \"<string>\"\n    }\n}"
                }
              },
              "status": "Created",
              "code": 201,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"is_reply_comment\": \"<boolean>\",\n \"message\": \"<string>\",\n \"created_by\": {\n  \"id\": \"<string>\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"created_at\": \"<dateTime>\",\n \"modified_at\": \"<dateTime>\",\n \"item\": {\n  \"id\": \"<string>\"\n },\n \"tagged_message\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "4c02b755-0f82-4e9f-8d3c-0a3129a6b499",
          "name": "Get comment",
          "request": {
            "name": "Get comment",
            "description": {
              "content": "Retrieves the message and metadata for a specific comment, as well\nas information on the user who created the comment.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "comments",
                ":comment_id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response, unless explicitly specified.",
                  "key": "fields",
                  "value": "<string>,<string>"
                }
              ],
              "variable": [
                {
                  "description": {
                    "content": "The ID of the comment.",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "comment_id"
                }
              ]
            },
            "method": "GET",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "8d05d911-04fd-423f-b0e6-94c0f4516b43",
              "name": "Returns a full comment object.",
              "originalRequest": {
                "url": {
                  "path": [
                    "comments",
                    "<string>"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "<string>,<string>"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"is_reply_comment\": \"<boolean>\",\n \"message\": \"<string>\",\n \"created_by\": {\n  \"id\": \"<string>\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"created_at\": \"<dateTime>\",\n \"modified_at\": \"<dateTime>\",\n \"item\": {\n  \"id\": \"<string>\"\n },\n \"tagged_message\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "4c4202a8-dcee-4a41-9b21-ecd0f1c5a883",
          "name": "Update comment",
          "request": {
            "name": "Update comment",
            "description": {
              "content": "Update the message of a comment.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "comments",
                ":comment_id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response, unless explicitly specified.",
                  "key": "fields",
                  "value": "<string>,<string>"
                }
              ],
              "variable": [
                {
                  "description": {
                    "content": "The ID of the comment.",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "comment_id"
                }
              ]
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "auth": {
              "type": "oauth2"
            },
            "body": {
              "mode": "raw",
              "raw": "{\n    \"message\": \"<string>\"\n}"
            }
          },
          "response": [
            {
              "id": "cc29aa64-8535-4578-89b4-8106642ab04c",
              "name": "Returns the updated comment object.",
              "originalRequest": {
                "url": {
                  "path": [
                    "comments",
                    "<string>"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "<string>,<string>"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"message\": \"<string>\"\n}"
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"is_reply_comment\": \"<boolean>\",\n \"message\": \"<string>\",\n \"created_by\": {\n  \"id\": \"<string>\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"created_at\": \"<dateTime>\",\n \"modified_at\": \"<dateTime>\",\n \"item\": {\n  \"id\": \"<string>\"\n },\n \"tagged_message\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "ac0e7cf9-4f5d-478f-9d68-6860dc91985c",
          "name": "Delete comment",
          "request": {
            "name": "Delete comment",
            "description": {
              "content": "Permanently deletes a comment.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "comments",
                ":comment_id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "The ID of the comment.",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "comment_id"
                }
              ]
            },
            "method": "DELETE",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "ad4ab973-cf44-4fc8-a309-e95d99fd5795",
              "name": "Returns an empty response when the comment has been deleted.",
              "originalRequest": {
                "url": {
                  "path": [
                    "comments",
                    "<string>"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE",
                "body": {}
              },
              "status": "No Content",
              "code": 204,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            }
          ],
          "event": []
        }
      ]
    },
    {
      "id": "27c5a62f-62ce-4c36-bdb4-87b1ae7d2e26",
      "name": "Tasks",
      "item": [
        {
          "id": "1756041f-d2bd-4a85-99d6-3314fccb2b4d",
          "name": "Get file tasks",
          "request": {
            "name": "Get file tasks",
            "description": {
              "content": "Retrieves a list of all the tasks for a file. This\nendpoint does not support paging.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "files",
                ":file_id",
                "tasks"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "The ID of the file.",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "file_id"
                }
              ]
            },
            "method": "GET",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "537fe912-f80a-4fe1-b485-4cf3fd92a75e",
              "name": "Returns a collection of task objects. If there are no\ntasks on this file an empty collection will be returned.",
              "originalRequest": {
                "url": {
                  "path": [
                    "files",
                    "<string>",
                    "tasks"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"total_count\": \"<long>\",\n \"entries\": [\n  {\n   \"id\": \"schema type not provided\",\n   \"type\": \"<string>\",\n   \"item\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\"\n   },\n   \"due_at\": \"<dateTime>\",\n   \"action\": \"<string>\",\n   \"message\": \"<string>\",\n   \"task_assignment_collection\": {\n    \"total_count\": \"<long>\",\n    \"limit\": \"<long>\",\n    \"offset\": \"<long>\",\n    \"order\": [\n     {\n      \"by\": \"<string>\",\n      \"direction\": \"<string>\"\n     },\n     {\n      \"by\": \"<string>\",\n      \"direction\": \"<string>\"\n     }\n    ],\n    \"entries\": [\n     {\n      \"id\": \"schema type not provided\",\n      \"type\": \"<string>\",\n      \"item\": {\n       \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       },\n       \"type\": \"<string>\",\n       \"sequence_id\": \"<string>\",\n       \"etag\": \"<string>\",\n       \"name\": \"<string>\"\n      },\n      \"assigned_to\": {\n       \"id\": \"schema type not provided\",\n       \"type\": \"<string>\",\n       \"name\": \"<string>\",\n       \"login\": \"<email>\"\n      },\n      \"message\": \"<string>\",\n      \"completed_at\": \"<dateTime>\",\n      \"assigned_at\": \"<dateTime>\",\n      \"reminded_at\": \"<dateTime>\",\n      \"resolution_state\": \"<string>\",\n      \"assigned_by\": {\n       \"id\": \"schema type not provided\",\n       \"type\": \"<string>\",\n       \"name\": \"<string>\",\n       \"login\": \"<email>\"\n      }\n     },\n     {\n      \"id\": \"schema type not provided\",\n      \"type\": \"<string>\",\n      \"item\": {\n       \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       },\n       \"type\": \"<string>\",\n       \"sequence_id\": \"<string>\",\n       \"etag\": \"<string>\",\n       \"name\": \"<string>\"\n      },\n      \"assigned_to\": {\n       \"id\": \"schema type not provided\",\n       \"type\": \"<string>\",\n       \"name\": \"<string>\",\n       \"login\": \"<email>\"\n      },\n      \"message\": \"<string>\",\n      \"completed_at\": \"<dateTime>\",\n      \"assigned_at\": \"<dateTime>\",\n      \"reminded_at\": \"<dateTime>\",\n      \"resolution_state\": \"<string>\",\n      \"assigned_by\": {\n       \"id\": \"schema type not provided\",\n       \"type\": \"<string>\",\n       \"name\": \"<string>\",\n       \"login\": \"<email>\"\n      }\n     }\n    ]\n   },\n   \"is_completed\": \"<boolean>\",\n   \"created_by\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"created_at\": \"<dateTime>\"\n  },\n  {\n   \"id\": \"schema type not provided\",\n   \"type\": \"<string>\",\n   \"item\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\"\n   },\n   \"due_at\": \"<dateTime>\",\n   \"action\": \"<string>\",\n   \"message\": \"<string>\",\n   \"task_assignment_collection\": {\n    \"total_count\": \"<long>\",\n    \"limit\": \"<long>\",\n    \"offset\": \"<long>\",\n    \"order\": [\n     {\n      \"by\": \"<string>\",\n      \"direction\": \"<string>\"\n     },\n     {\n      \"by\": \"<string>\",\n      \"direction\": \"<string>\"\n     }\n    ],\n    \"entries\": [\n     {\n      \"id\": \"schema type not provided\",\n      \"type\": \"<string>\",\n      \"item\": {\n       \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       },\n       \"type\": \"<string>\",\n       \"sequence_id\": \"<string>\",\n       \"etag\": \"<string>\",\n       \"name\": \"<string>\"\n      },\n      \"assigned_to\": {\n       \"id\": \"schema type not provided\",\n       \"type\": \"<string>\",\n       \"name\": \"<string>\",\n       \"login\": \"<email>\"\n      },\n      \"message\": \"<string>\",\n      \"completed_at\": \"<dateTime>\",\n      \"assigned_at\": \"<dateTime>\",\n      \"reminded_at\": \"<dateTime>\",\n      \"resolution_state\": \"<string>\",\n      \"assigned_by\": {\n       \"id\": \"schema type not provided\",\n       \"type\": \"<string>\",\n       \"name\": \"<string>\",\n       \"login\": \"<email>\"\n      }\n     },\n     {\n      \"id\": \"schema type not provided\",\n      \"type\": \"<string>\",\n      \"item\": {\n       \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       },\n       \"type\": \"<string>\",\n       \"sequence_id\": \"<string>\",\n       \"etag\": \"<string>\",\n       \"name\": \"<string>\"\n      },\n      \"assigned_to\": {\n       \"id\": \"schema type not provided\",\n       \"type\": \"<string>\",\n       \"name\": \"<string>\",\n       \"login\": \"<email>\"\n      },\n      \"message\": \"<string>\",\n      \"completed_at\": \"<dateTime>\",\n      \"assigned_at\": \"<dateTime>\",\n      \"reminded_at\": \"<dateTime>\",\n      \"resolution_state\": \"<string>\",\n      \"assigned_by\": {\n       \"id\": \"schema type not provided\",\n       \"type\": \"<string>\",\n       \"name\": \"<string>\",\n       \"login\": \"<email>\"\n      }\n     }\n    ]\n   },\n   \"is_completed\": \"<boolean>\",\n   \"created_by\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"created_at\": \"<dateTime>\"\n  }\n ]\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "771523a0-6d67-4c89-9ba6-ada712e28b17",
              "name": "Returns an error if the file for the given ID does not exist or\nis inaccessible to your account.",
              "originalRequest": {
                "url": {
                  "path": [
                    "files",
                    "<string>",
                    "tasks"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Not Found",
              "code": 404,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "399c290a-5c02-423b-9146-984c27a8b28c",
          "name": "Create task",
          "request": {
            "name": "Create task",
            "description": {
              "content": "Creates a single task on a file.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "tasks"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": {
              "type": "oauth2"
            },
            "body": {
              "mode": "raw",
              "raw": "{\n    \"item\": {\n        \"id\": \"<string>\",\n        \"type\": \"<string>\"\n    },\n    \"action\": \"<string>\",\n    \"message\": \"<string>\",\n    \"due_at\": \"<dateTime>\"\n}"
            }
          },
          "response": [
            {
              "id": "a6989611-3ead-40f4-83ce-de6a85193778",
              "name": "Returns a new task object",
              "originalRequest": {
                "url": {
                  "path": [
                    "tasks"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"item\": {\n        \"id\": \"<string>\",\n        \"type\": \"<string>\"\n    },\n    \"action\": \"<string>\",\n    \"message\": \"<string>\",\n    \"due_at\": \"<dateTime>\"\n}"
                }
              },
              "status": "Created",
              "code": 201,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"item\": {\n  \"id\": \"<string>\",\n  \"type\": \"<string>\",\n  \"sequence_id\": \"<string>\",\n  \"etag\": \"<string>\",\n  \"name\": \"<string>\"\n },\n \"due_at\": \"<dateTime>\",\n \"action\": \"<string>\",\n \"message\": \"<string>\",\n \"task_assignment_collection\": {\n  \"total_count\": \"<long>\",\n  \"limit\": \"<long>\",\n  \"offset\": \"<long>\",\n  \"order\": [\n   {\n    \"by\": \"<string>\",\n    \"direction\": \"<string>\"\n   },\n   {\n    \"by\": \"<string>\",\n    \"direction\": \"<string>\"\n   }\n  ],\n  \"entries\": [\n   {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"item\": {\n     \"id\": \"schema type not provided\",\n     \"type\": \"<string>\",\n     \"sequence_id\": \"<string>\",\n     \"etag\": \"<string>\",\n     \"name\": \"<string>\"\n    },\n    \"assigned_to\": {\n     \"id\": \"schema type not provided\",\n     \"type\": \"<string>\",\n     \"name\": \"<string>\",\n     \"login\": \"<email>\"\n    },\n    \"message\": \"<string>\",\n    \"completed_at\": \"<dateTime>\",\n    \"assigned_at\": \"<dateTime>\",\n    \"reminded_at\": \"<dateTime>\",\n    \"resolution_state\": \"<string>\",\n    \"assigned_by\": {\n     \"id\": \"schema type not provided\",\n     \"type\": \"<string>\",\n     \"name\": \"<string>\",\n     \"login\": \"<email>\"\n    }\n   },\n   {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"item\": {\n     \"id\": \"schema type not provided\",\n     \"type\": \"<string>\",\n     \"sequence_id\": \"<string>\",\n     \"etag\": \"<string>\",\n     \"name\": \"<string>\"\n    },\n    \"assigned_to\": {\n     \"id\": \"schema type not provided\",\n     \"type\": \"<string>\",\n     \"name\": \"<string>\",\n     \"login\": \"<email>\"\n    },\n    \"message\": \"<string>\",\n    \"completed_at\": \"<dateTime>\",\n    \"assigned_at\": \"<dateTime>\",\n    \"reminded_at\": \"<dateTime>\",\n    \"resolution_state\": \"<string>\",\n    \"assigned_by\": {\n     \"id\": \"schema type not provided\",\n     \"type\": \"<string>\",\n     \"name\": \"<string>\",\n     \"login\": \"<email>\"\n    }\n   }\n  ]\n },\n \"is_completed\": \"<boolean>\",\n \"created_by\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"created_at\": \"<dateTime>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "a524e75b-ea59-4647-b83f-f9098507942c",
          "name": "Get task",
          "request": {
            "name": "Get task",
            "description": {
              "content": "Fetches a specific task.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "tasks",
                ":task_id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "The ID of the task.",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "task_id"
                }
              ]
            },
            "method": "GET",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "088ab9a1-6c63-4773-a5bc-7c4de00d6c63",
              "name": "Returns a task object.",
              "originalRequest": {
                "url": {
                  "path": [
                    "tasks",
                    "<string>"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"item\": {\n  \"id\": \"<string>\",\n  \"type\": \"<string>\",\n  \"sequence_id\": \"<string>\",\n  \"etag\": \"<string>\",\n  \"name\": \"<string>\"\n },\n \"due_at\": \"<dateTime>\",\n \"action\": \"<string>\",\n \"message\": \"<string>\",\n \"task_assignment_collection\": {\n  \"total_count\": \"<long>\",\n  \"limit\": \"<long>\",\n  \"offset\": \"<long>\",\n  \"order\": [\n   {\n    \"by\": \"<string>\",\n    \"direction\": \"<string>\"\n   },\n   {\n    \"by\": \"<string>\",\n    \"direction\": \"<string>\"\n   }\n  ],\n  \"entries\": [\n   {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"item\": {\n     \"id\": \"schema type not provided\",\n     \"type\": \"<string>\",\n     \"sequence_id\": \"<string>\",\n     \"etag\": \"<string>\",\n     \"name\": \"<string>\"\n    },\n    \"assigned_to\": {\n     \"id\": \"schema type not provided\",\n     \"type\": \"<string>\",\n     \"name\": \"<string>\",\n     \"login\": \"<email>\"\n    },\n    \"message\": \"<string>\",\n    \"completed_at\": \"<dateTime>\",\n    \"assigned_at\": \"<dateTime>\",\n    \"reminded_at\": \"<dateTime>\",\n    \"resolution_state\": \"<string>\",\n    \"assigned_by\": {\n     \"id\": \"schema type not provided\",\n     \"type\": \"<string>\",\n     \"name\": \"<string>\",\n     \"login\": \"<email>\"\n    }\n   },\n   {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"item\": {\n     \"id\": \"schema type not provided\",\n     \"type\": \"<string>\",\n     \"sequence_id\": \"<string>\",\n     \"etag\": \"<string>\",\n     \"name\": \"<string>\"\n    },\n    \"assigned_to\": {\n     \"id\": \"schema type not provided\",\n     \"type\": \"<string>\",\n     \"name\": \"<string>\",\n     \"login\": \"<email>\"\n    },\n    \"message\": \"<string>\",\n    \"completed_at\": \"<dateTime>\",\n    \"assigned_at\": \"<dateTime>\",\n    \"reminded_at\": \"<dateTime>\",\n    \"resolution_state\": \"<string>\",\n    \"assigned_by\": {\n     \"id\": \"schema type not provided\",\n     \"type\": \"<string>\",\n     \"name\": \"<string>\",\n     \"login\": \"<email>\"\n    }\n   }\n  ]\n },\n \"is_completed\": \"<boolean>\",\n \"created_by\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"created_at\": \"<dateTime>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "d10f2378-3b05-46aa-9801-ad82a1e01532",
              "name": "Returns an error if the task for the given ID does not exist or\nis inaccessible to your account.",
              "originalRequest": {
                "url": {
                  "path": [
                    "tasks",
                    "<string>"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Not Found",
              "code": 404,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "28340b6e-c87e-40b9-ad36-40ca8433fc2b",
          "name": "Update task",
          "request": {
            "name": "Update task",
            "description": {
              "content": "Updates a specific task.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "tasks",
                ":task_id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "The ID of the task.",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "task_id"
                }
              ]
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "auth": {
              "type": "oauth2"
            },
            "body": {
              "mode": "raw",
              "raw": "{\n    \"action\": \"<string>\",\n    \"message\": \"<string>\",\n    \"due_at\": \"<dateTime>\"\n}"
            }
          },
          "response": [
            {
              "id": "7b96a96e-0103-40ff-a56a-cea48582b326",
              "name": "Returns the updated task object",
              "originalRequest": {
                "url": {
                  "path": [
                    "tasks",
                    "<string>"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"action\": \"<string>\",\n    \"message\": \"<string>\",\n    \"due_at\": \"<dateTime>\"\n}"
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"item\": {\n  \"id\": \"<string>\",\n  \"type\": \"<string>\",\n  \"sequence_id\": \"<string>\",\n  \"etag\": \"<string>\",\n  \"name\": \"<string>\"\n },\n \"due_at\": \"<dateTime>\",\n \"action\": \"<string>\",\n \"message\": \"<string>\",\n \"task_assignment_collection\": {\n  \"total_count\": \"<long>\",\n  \"limit\": \"<long>\",\n  \"offset\": \"<long>\",\n  \"order\": [\n   {\n    \"by\": \"<string>\",\n    \"direction\": \"<string>\"\n   },\n   {\n    \"by\": \"<string>\",\n    \"direction\": \"<string>\"\n   }\n  ],\n  \"entries\": [\n   {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"item\": {\n     \"id\": \"schema type not provided\",\n     \"type\": \"<string>\",\n     \"sequence_id\": \"<string>\",\n     \"etag\": \"<string>\",\n     \"name\": \"<string>\"\n    },\n    \"assigned_to\": {\n     \"id\": \"schema type not provided\",\n     \"type\": \"<string>\",\n     \"name\": \"<string>\",\n     \"login\": \"<email>\"\n    },\n    \"message\": \"<string>\",\n    \"completed_at\": \"<dateTime>\",\n    \"assigned_at\": \"<dateTime>\",\n    \"reminded_at\": \"<dateTime>\",\n    \"resolution_state\": \"<string>\",\n    \"assigned_by\": {\n     \"id\": \"schema type not provided\",\n     \"type\": \"<string>\",\n     \"name\": \"<string>\",\n     \"login\": \"<email>\"\n    }\n   },\n   {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"item\": {\n     \"id\": \"schema type not provided\",\n     \"type\": \"<string>\",\n     \"sequence_id\": \"<string>\",\n     \"etag\": \"<string>\",\n     \"name\": \"<string>\"\n    },\n    \"assigned_to\": {\n     \"id\": \"schema type not provided\",\n     \"type\": \"<string>\",\n     \"name\": \"<string>\",\n     \"login\": \"<email>\"\n    },\n    \"message\": \"<string>\",\n    \"completed_at\": \"<dateTime>\",\n    \"assigned_at\": \"<dateTime>\",\n    \"reminded_at\": \"<dateTime>\",\n    \"resolution_state\": \"<string>\",\n    \"assigned_by\": {\n     \"id\": \"schema type not provided\",\n     \"type\": \"<string>\",\n     \"name\": \"<string>\",\n     \"login\": \"<email>\"\n    }\n   }\n  ]\n },\n \"is_completed\": \"<boolean>\",\n \"created_by\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"created_at\": \"<dateTime>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "81066a4a-a025-4c3d-a137-0c0e532ef02e",
              "name": "Returns an error if the task for the given ID does not exist or\nis inaccessible to your account.",
              "originalRequest": {
                "url": {
                  "path": [
                    "tasks",
                    "<string>"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"action\": \"<string>\",\n    \"message\": \"<string>\",\n    \"due_at\": \"<dateTime>\"\n}"
                }
              },
              "status": "Not Found",
              "code": 404,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "f7638446-607d-4557-94c0-21ca3d3f2725",
          "name": "Delete task",
          "request": {
            "name": "Delete task",
            "description": {
              "content": "Deletes a specific task.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "tasks",
                ":task_id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "The ID of the task.",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "task_id"
                }
              ]
            },
            "method": "DELETE",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "63450193-fa92-4441-bf02-f4f681f9c101",
              "name": "An empty response will be returned when the task was successfully deleted.",
              "originalRequest": {
                "url": {
                  "path": [
                    "tasks",
                    "<string>"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE",
                "body": {}
              },
              "status": "No Content",
              "code": 204,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "b0812d80-2a07-40dd-9e60-642f217e76f2",
              "name": "Returns an error if the task for the given ID does not exist or\nis inaccessible to your account.",
              "originalRequest": {
                "url": {
                  "path": [
                    "tasks",
                    "<string>"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE",
                "body": {}
              },
              "status": "Not Found",
              "code": 404,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "d4296f90-1ad9-4b55-b0b8-cb965adaae44",
          "name": "List task's assignments",
          "request": {
            "name": "List task's assignments",
            "description": {
              "content": "Retrieves all of the assignments for a given task.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "tasks",
                ":task_id",
                "assignments"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "The ID of the task.",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "task_id"
                }
              ]
            },
            "method": "GET",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "d7cbbb78-2310-4fde-82f9-76513742a56e",
              "name": "Returns a collection of task assignment specifying what task on\na file has been assigned to which users and by who.",
              "originalRequest": {
                "url": {
                  "path": [
                    "tasks",
                    "<string>",
                    "assignments"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"total_count\": \"<long>\",\n \"limit\": \"<long>\",\n \"offset\": \"<long>\",\n \"order\": [\n  {\n   \"by\": \"<string>\",\n   \"direction\": \"<string>\"\n  },\n  {\n   \"by\": \"<string>\",\n   \"direction\": \"<string>\"\n  }\n ],\n \"entries\": [\n  {\n   \"id\": \"schema type not provided\",\n   \"type\": \"<string>\",\n   \"item\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\"\n   },\n   \"assigned_to\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"message\": \"<string>\",\n   \"completed_at\": \"<dateTime>\",\n   \"assigned_at\": \"<dateTime>\",\n   \"reminded_at\": \"<dateTime>\",\n   \"resolution_state\": \"<string>\",\n   \"assigned_by\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   }\n  },\n  {\n   \"id\": \"schema type not provided\",\n   \"type\": \"<string>\",\n   \"item\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\"\n   },\n   \"assigned_to\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"message\": \"<string>\",\n   \"completed_at\": \"<dateTime>\",\n   \"assigned_at\": \"<dateTime>\",\n   \"reminded_at\": \"<dateTime>\",\n   \"resolution_state\": \"<string>\",\n   \"assigned_by\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   }\n  }\n ]\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "be57b0b1-194f-47bb-b49c-46a857fb322d",
              "name": "Returns an error if the task assignment ID was omitted in\nthe request.",
              "originalRequest": {
                "url": {
                  "path": [
                    "tasks",
                    "<string>",
                    "assignments"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Internal Server Error",
              "code": 500,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "14259d7e-feb1-47f7-841c-ef41ab9a29d2",
          "name": "Assign task",
          "request": {
            "name": "Assign task",
            "description": {
              "content": "Assigns a task to a user.\n\nMultiple assignments to different users\nare allowed per task.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "task_assignments"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": {
              "type": "oauth2"
            },
            "body": {
              "mode": "raw",
              "raw": "{\n    \"task\": {\n        \"id\": \"<string>\",\n        \"type\": \"<string>\"\n    },\n    \"assign_to\": {\n        \"id\": \"<string>\",\n        \"login\": \"<string>\"\n    }\n}"
            }
          },
          "response": [
            {
              "id": "44e6450b-421a-4a16-862b-27197da21502",
              "name": "Returns a new task assignment object.",
              "originalRequest": {
                "url": {
                  "path": [
                    "task_assignments"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"task\": {\n        \"id\": \"<string>\",\n        \"type\": \"<string>\"\n    },\n    \"assign_to\": {\n        \"id\": \"<string>\",\n        \"login\": \"<string>\"\n    }\n}"
                }
              },
              "status": "Created",
              "code": 201,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"item\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"sequence_id\": \"<string>\",\n  \"etag\": \"<string>\",\n  \"name\": \"<string>\"\n },\n \"assigned_to\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"message\": \"<string>\",\n \"completed_at\": \"<dateTime>\",\n \"assigned_at\": \"<dateTime>\",\n \"reminded_at\": \"<dateTime>\",\n \"resolution_state\": \"<string>\",\n \"assigned_by\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "e8b5662d-2be9-4890-9a55-bc2f70fa1818",
          "name": "Get task assignment",
          "request": {
            "name": "Get task assignment",
            "description": {
              "content": "Fetches a specific task assignment.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "task_assignments",
                ":task_assignment_id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "The ID of the task assignment.",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "task_assignment_id"
                }
              ]
            },
            "method": "GET",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "d1548a55-79a7-4b40-a8de-7fea644a0f34",
              "name": "Returns the requested task assignment, specifying who\nthe task has been assigned to and by whom.",
              "originalRequest": {
                "url": {
                  "path": [
                    "task_assignments",
                    "<string>"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"item\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"sequence_id\": \"<string>\",\n  \"etag\": \"<string>\",\n  \"name\": \"<string>\"\n },\n \"assigned_to\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"message\": \"<string>\",\n \"completed_at\": \"<dateTime>\",\n \"assigned_at\": \"<dateTime>\",\n \"reminded_at\": \"<dateTime>\",\n \"resolution_state\": \"<string>\",\n \"assigned_by\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "9ef1170b-a9f3-414a-b717-9207d3c0fefe",
              "name": "Returns an error if the task assignment for the given ID does not exist or\nis inaccessible to your account.",
              "originalRequest": {
                "url": {
                  "path": [
                    "task_assignments",
                    "<string>"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Not Found",
              "code": 404,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "0d181b6a-7da2-4489-84c9-0fb98956979d",
          "name": "Update task assignment",
          "request": {
            "name": "Update task assignment",
            "description": {
              "content": "Updates a task assignment. This endpoint can be\nused to update the state of a task.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "task_assignments",
                ":task_assignment_id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "The ID of the task assignment.",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "task_assignment_id"
                }
              ]
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "auth": {
              "type": "oauth2"
            },
            "body": {
              "mode": "raw",
              "raw": "{\n    \"message\": \"<string>\",\n    \"resolution_state\": \"<string>\"\n}"
            }
          },
          "response": [
            {
              "id": "cb9df6da-b518-40bc-bab5-332aba8cf2c8",
              "name": "Returns the updated task assignment object.",
              "originalRequest": {
                "url": {
                  "path": [
                    "task_assignments",
                    "<string>"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"message\": \"<string>\",\n    \"resolution_state\": \"<string>\"\n}"
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"item\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"sequence_id\": \"<string>\",\n  \"etag\": \"<string>\",\n  \"name\": \"<string>\"\n },\n \"assigned_to\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"message\": \"<string>\",\n \"completed_at\": \"<dateTime>\",\n \"assigned_at\": \"<dateTime>\",\n \"reminded_at\": \"<dateTime>\",\n \"resolution_state\": \"<string>\",\n \"assigned_by\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "890721a6-6164-495d-bf10-c687f14953c9",
              "name": "Returns an error if the task assignment for the given ID does not exist or\nis inaccessible to your account.",
              "originalRequest": {
                "url": {
                  "path": [
                    "task_assignments",
                    "<string>"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"message\": \"<string>\",\n    \"resolution_state\": \"<string>\"\n}"
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "e207ea0a-acec-402a-98ba-5cc933fcc48b",
          "name": "Unassign task",
          "request": {
            "name": "Unassign task",
            "description": {
              "content": "Deletes a specific task assignment.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "task_assignments",
                ":task_assignment_id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "The ID of the task assignment.",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "task_assignment_id"
                }
              ]
            },
            "method": "DELETE",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "68292d5a-a20a-496f-8139-5381beb7021e",
              "name": "An empty response will be returned when the task\nassignment was successfully deleted.",
              "originalRequest": {
                "url": {
                  "path": [
                    "task_assignments",
                    "<string>"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE",
                "body": {}
              },
              "status": "No Content",
              "code": 204,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "fcb953cd-6679-417f-91f3-d1efc572f60f",
              "name": "Returns an error if the task assignment for the given ID does not exist\nor is inaccessible to your account.",
              "originalRequest": {
                "url": {
                  "path": [
                    "task_assignments",
                    "<string>"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE",
                "body": {}
              },
              "status": "Not Found",
              "code": 404,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        }
      ]
    },
    {
      "id": "edaaddc6-b8e7-4795-9d8e-2158266230a6",
      "name": "File & Folder Metadata",
      "item": [
        {
          "id": "8ca29c6c-14c5-4983-a3fd-d25cd92ec248",
          "name": "List file's metadata",
          "request": {
            "name": "List file's metadata",
            "description": {
              "content": "Retrieves all metadata for a given file.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "files",
                ":file_id",
                "metadata"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "The ID of the file.",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "file_id"
                }
              ]
            },
            "method": "GET",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "e4005447-0c7b-443f-b1a4-8b809144b2cc",
              "name": "Returns all the metadata associated with a file.\n\nThis API does not support pagination and will therefore always return\nall of the metadata associated to the file.",
              "originalRequest": {
                "url": {
                  "path": [
                    "files",
                    "<string>",
                    "metadata"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"entries\": [\n  {\n   \"$canEdit\": \"<boolean>\",\n   \"$id\": \"<uuid>\",\n   \"$parent\": \"<string>\",\n   \"$scope\": \"<string>\",\n   \"$template\": \"<string>\",\n   \"$type\": \"<string>\",\n   \"$typeVersion\": \"<integer>\",\n   \"$version\": \"<integer>\"\n  },\n  {\n   \"$canEdit\": \"<boolean>\",\n   \"$id\": \"<uuid>\",\n   \"$parent\": \"<string>\",\n   \"$scope\": \"<string>\",\n   \"$template\": \"<string>\",\n   \"$type\": \"<string>\",\n   \"$typeVersion\": \"<integer>\",\n   \"$version\": \"<integer>\"\n  }\n ]\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "d143e965-6503-4ea8-9e61-2076075468d8",
          "name": "Create metadata on file",
          "request": {
            "name": "Create metadata on file",
            "description": {
              "content": "Creates a piece of metadata on a file based on the specified template.\n\nOnly values that are present in the metadata template\nwill be accepted.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "files",
                ":file_id",
                "metadata",
                ":scope",
                ":template_key"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "The ID of the file.",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "file_id"
                },
                {
                  "description": {
                    "content": "The scope of the metadata template",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "scope"
                },
                {
                  "description": {
                    "content": "The name of the metadata template",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "template_key"
                }
              ]
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": {
              "type": "oauth2"
            },
            "body": {
              "mode": "raw",
              "raw": "\"<object>\""
            }
          },
          "response": [
            {
              "id": "0f129021-b09a-4dc2-868d-c2cbbb66a08e",
              "name": "Returns an instance of the template that was specified, with the\ncustom template data included.",
              "originalRequest": {
                "url": {
                  "path": [
                    "files",
                    "<string>",
                    "metadata",
                    "<string>",
                    "<string>"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "\"<object>\""
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"$canEdit\": \"<boolean>\",\n \"$id\": \"<uuid>\",\n \"$parent\": \"<string>\",\n \"$scope\": \"<string>\",\n \"$template\": \"<string>\",\n \"$type\": \"<string>\",\n \"$typeVersion\": \"<integer>\",\n \"$version\": \"<integer>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "f31f34f7-79bb-4c28-b908-3b38caddcfb1",
              "name": "If the piece of metadata already exists, a conflict error\nwill be returned. The metadata can then instead be updated with the\n`PUT` method.",
              "originalRequest": {
                "url": {
                  "path": [
                    "files",
                    "<string>",
                    "metadata",
                    "<string>",
                    "<string>"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "\"<object>\""
                }
              },
              "status": "Conflict",
              "code": 409,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "2e122967-2560-45a7-b158-3740463fc3de",
          "name": "Update file metadata",
          "request": {
            "name": "Update file metadata",
            "description": {
              "content": "Updates a piece of metadata on a file.\n\nThe metadata instance can only be updated if the instance\nalready exists. When editing metadata, only values that adhere to the\nmetadata template schema will be accepted.\n\nThe update is applied atomically. If any errors occur during the\napplication of the operations, the metadata instance remains unchanged.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "files",
                ":file_id",
                "metadata",
                ":scope",
                ":template_key"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "The ID of the file.",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "file_id"
                },
                {
                  "description": {
                    "content": "The scope of the metadata template",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "scope"
                },
                {
                  "description": {
                    "content": "The name of the metadata template",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "template_key"
                }
              ]
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "auth": {
              "type": "oauth2"
            },
            "body": {
              "mode": "raw",
              "raw": "[\n    {\n        \"op\": \"<string>\",\n        \"path\": \"<string>\",\n        \"value\": \"<string>\",\n        \"from\": \"<string>\"\n    },\n    {\n        \"op\": \"<string>\",\n        \"path\": \"<string>\",\n        \"value\": \"<string>\",\n        \"from\": \"<string>\"\n    }\n]"
            }
          },
          "response": [
            {
              "id": "a81e5740-7fa2-4b6a-a48e-351c70f5312f",
              "name": "Returns the updated metadata template instance, with the\ncustom template data included.",
              "originalRequest": {
                "url": {
                  "path": [
                    "files",
                    "<string>",
                    "metadata",
                    "<string>",
                    "<string>"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "[\n    {\n        \"op\": \"<string>\",\n        \"path\": \"<string>\",\n        \"value\": \"<string>\",\n        \"from\": \"<string>\"\n    },\n    {\n        \"op\": \"<string>\",\n        \"path\": \"<string>\",\n        \"value\": \"<string>\",\n        \"from\": \"<string>\"\n    }\n]"
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"$canEdit\": \"<boolean>\",\n \"$id\": \"<uuid>\",\n \"$parent\": \"<string>\",\n \"$scope\": \"<string>\",\n \"$template\": \"<string>\",\n \"$type\": \"<string>\",\n \"$typeVersion\": \"<integer>\",\n \"$version\": \"<integer>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "aa6880af-ec13-4f52-83f5-9fef7dab6dc7",
              "name": "If the piece of metadata already exists, a conflict error\nwill be returned. The metadata can then instead be updated with the\n`PUT` method.",
              "originalRequest": {
                "url": {
                  "path": [
                    "files",
                    "<string>",
                    "metadata",
                    "<string>",
                    "<string>"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "[\n    {\n        \"op\": \"<string>\",\n        \"path\": \"<string>\",\n        \"value\": \"<string>\",\n        \"from\": \"<string>\"\n    },\n    {\n        \"op\": \"<string>\",\n        \"path\": \"<string>\",\n        \"value\": \"<string>\",\n        \"from\": \"<string>\"\n    }\n]"
                }
              },
              "status": "Conflict",
              "code": 409,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "4203e5ab-070f-4aa6-81e3-8e437e72232d",
          "name": "Delete file metadata",
          "request": {
            "name": "Delete file metadata",
            "description": {
              "content": "Deletes a piece of file metadata.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "files",
                ":file_id",
                "metadata",
                ":scope",
                ":template_key"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "The ID of the file.",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "file_id"
                },
                {
                  "description": {
                    "content": "The scope of the metadata template",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "scope"
                },
                {
                  "description": {
                    "content": "The name of the metadata template",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "template_key"
                }
              ]
            },
            "method": "DELETE",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "7be722e4-932d-4faf-a7a8-ff0164bdd6a9",
              "name": "Returns an empty response when the metadata is\nsuccessfully deleted.",
              "originalRequest": {
                "url": {
                  "path": [
                    "files",
                    "<string>",
                    "metadata",
                    "<string>",
                    "<string>"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE",
                "body": {}
              },
              "status": "No Content",
              "code": 204,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            }
          ],
          "event": []
        },
        {
          "id": "e4fcfa1d-ba08-43e0-afaa-76570acbcb08",
          "name": "List folder's metadata",
          "request": {
            "name": "List folder's metadata",
            "description": {
              "content": "Retrieves all metadata for a given folder.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "folders",
                ":folder_id",
                "metadata"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "The unique identifier that represent a folder.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the url `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder of a Box account is\nalways represented by the ID `0`.",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "folder_id"
                }
              ]
            },
            "method": "GET",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "95fe187c-b136-4dcf-b7d2-167e9c3443d9",
              "name": "Returns all the metadata associated with a folder.\n\nThis API does not support pagination and will therefore always return\nall of the metadata associated to the folder.",
              "originalRequest": {
                "url": {
                  "path": [
                    "folders",
                    "<string>",
                    "metadata"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"entries\": [\n  {\n   \"$canEdit\": \"<boolean>\",\n   \"$id\": \"<uuid>\",\n   \"$parent\": \"<string>\",\n   \"$scope\": \"<string>\",\n   \"$template\": \"<string>\",\n   \"$type\": \"<string>\",\n   \"$typeVersion\": \"<integer>\",\n   \"$version\": \"<integer>\"\n  },\n  {\n   \"$canEdit\": \"<boolean>\",\n   \"$id\": \"<uuid>\",\n   \"$parent\": \"<string>\",\n   \"$scope\": \"<string>\",\n   \"$template\": \"<string>\",\n   \"$type\": \"<string>\",\n   \"$typeVersion\": \"<integer>\",\n   \"$version\": \"<integer>\"\n  }\n ]\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "b8d78bd3-adf4-4b5d-99f1-e178a32efd2c",
          "name": "Get specific folder metadata",
          "request": {
            "name": "Get specific folder metadata",
            "description": {
              "content": "Retrieve a specific metadata template instance for a folder",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "folders",
                ":folder_id",
                "metadata",
                ":scope",
                ":template_key"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "The unique identifier that represent a folder.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the url `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder of a Box account is\nalways represented by the ID `0`.",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "folder_id"
                },
                {
                  "description": {
                    "content": "The scope of the metadata template",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "scope"
                },
                {
                  "description": {
                    "content": "The name of the metadata template",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "template_key"
                }
              ]
            },
            "method": "GET",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "0f3ea10e-54e3-4704-a301-a80171c21dd6",
              "name": "An instance of the metadata template that includes\nadditional \"key:value\" pairs defined by the user or\nan application.",
              "originalRequest": {
                "url": {
                  "path": [
                    "folders",
                    "<string>",
                    "metadata",
                    "<string>",
                    "<string>"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Created",
              "code": 201,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"$canEdit\": \"<boolean>\",\n \"$id\": \"<uuid>\",\n \"$parent\": \"<string>\",\n \"$scope\": \"<string>\",\n \"$template\": \"<string>\",\n \"$type\": \"<string>\",\n \"$typeVersion\": \"<integer>\",\n \"$version\": \"<integer>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "6acf9a0e-fd05-49b9-a690-a0774ac24d1e",
              "name": "Returned if the metadata template specified\nwas not applied to this folder.",
              "originalRequest": {
                "url": {
                  "path": [
                    "folders",
                    "<string>",
                    "metadata",
                    "<string>",
                    "<string>"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Not Found",
              "code": 404,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "1e67202f-540d-4168-a67d-cf57569042cb",
          "name": "Create metadata on folder",
          "request": {
            "name": "Create metadata on folder",
            "description": {
              "content": "Creates a piece of metadata on a folder based on the specified template.\n\nOnly values that are present in the metadata template\nwill be accepted.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "folders",
                ":folder_id",
                "metadata",
                ":scope",
                ":template_key"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "The unique identifier that represent a folder.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the url `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder of a Box account is\nalways represented by the ID `0`.",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "folder_id"
                },
                {
                  "description": {
                    "content": "The scope of the metadata template",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "scope"
                },
                {
                  "description": {
                    "content": "The name of the metadata template",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "template_key"
                }
              ]
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": {
              "type": "oauth2"
            },
            "body": {
              "mode": "raw",
              "raw": "\"<object>\""
            }
          },
          "response": [
            {
              "id": "65ed7b0c-372e-4197-a1c5-e18fd437cc8b",
              "name": "Returns an instance of the template that was specified, with the\ncustom template data included.",
              "originalRequest": {
                "url": {
                  "path": [
                    "folders",
                    "<string>",
                    "metadata",
                    "<string>",
                    "<string>"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "\"<object>\""
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"$canEdit\": \"<boolean>\",\n \"$id\": \"<uuid>\",\n \"$parent\": \"<string>\",\n \"$scope\": \"<string>\",\n \"$template\": \"<string>\",\n \"$type\": \"<string>\",\n \"$typeVersion\": \"<integer>\",\n \"$version\": \"<integer>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "6d07960c-0924-4fe1-ac1e-6b125c8f4668",
              "name": "If the piece of metadata already exists, a conflict error\nwill be returned. The metadata can then instead be updated with the\n`PUT` method.",
              "originalRequest": {
                "url": {
                  "path": [
                    "folders",
                    "<string>",
                    "metadata",
                    "<string>",
                    "<string>"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "\"<object>\""
                }
              },
              "status": "Conflict",
              "code": 409,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "e302f656-57a8-44c5-afae-f39975bbcbc4",
          "name": "Update folder metadata",
          "request": {
            "name": "Update folder metadata",
            "description": {
              "content": "Updates a piece of metadata on a folder based.\n\nThe metadata instance can only be updated if the instance\nalready exists. When editing metadata, only values that adhere to the\nmetadata template schema will be accepted.\n\nThe update is applied atomically. If any errors occur during the\napplication of the operations, the metadata instance remains unchanged.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "folders",
                ":folder_id",
                "metadata",
                ":scope",
                ":template_key"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "The unique identifier that represent a folder.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the url `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder of a Box account is\nalways represented by the ID `0`.",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "folder_id"
                },
                {
                  "description": {
                    "content": "The scope of the metadata template",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "scope"
                },
                {
                  "description": {
                    "content": "The name of the metadata template",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "template_key"
                }
              ]
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "auth": {
              "type": "oauth2"
            },
            "body": {
              "mode": "raw",
              "raw": "[\n    {\n        \"op\": \"<string>\",\n        \"path\": \"<string>\",\n        \"value\": \"<string>\",\n        \"from\": \"<string>\"\n    },\n    {\n        \"op\": \"<string>\",\n        \"path\": \"<string>\",\n        \"value\": \"<string>\",\n        \"from\": \"<string>\"\n    }\n]"
            }
          },
          "response": [
            {
              "id": "01dafbbf-0f9c-4586-a924-7bc28247427c",
              "name": "Returns the updated metadata template instance, with the\ncustom template data included.",
              "originalRequest": {
                "url": {
                  "path": [
                    "folders",
                    "<string>",
                    "metadata",
                    "<string>",
                    "<string>"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "[\n    {\n        \"op\": \"<string>\",\n        \"path\": \"<string>\",\n        \"value\": \"<string>\",\n        \"from\": \"<string>\"\n    },\n    {\n        \"op\": \"<string>\",\n        \"path\": \"<string>\",\n        \"value\": \"<string>\",\n        \"from\": \"<string>\"\n    }\n]"
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"$canEdit\": \"<boolean>\",\n \"$id\": \"<uuid>\",\n \"$parent\": \"<string>\",\n \"$scope\": \"<string>\",\n \"$template\": \"<string>\",\n \"$type\": \"<string>\",\n \"$typeVersion\": \"<integer>\",\n \"$version\": \"<integer>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "2d815708-562a-48d2-899c-772d7b2b3037",
              "name": "If the piece of metadata already exists, a conflict error\nwill be returned. The metadata can then instead be updated with the\n`PUT` method.",
              "originalRequest": {
                "url": {
                  "path": [
                    "folders",
                    "<string>",
                    "metadata",
                    "<string>",
                    "<string>"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "[\n    {\n        \"op\": \"<string>\",\n        \"path\": \"<string>\",\n        \"value\": \"<string>\",\n        \"from\": \"<string>\"\n    },\n    {\n        \"op\": \"<string>\",\n        \"path\": \"<string>\",\n        \"value\": \"<string>\",\n        \"from\": \"<string>\"\n    }\n]"
                }
              },
              "status": "Conflict",
              "code": 409,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "7467f964-bd43-4d8c-8b27-c35d3fbf4735",
          "name": "Delete folder metadata",
          "request": {
            "name": "Delete folder metadata",
            "description": {
              "content": "Deletes a piece of folder metadata.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "folders",
                ":folder_id",
                "metadata",
                ":scope",
                ":template_key"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "The unique identifier that represent a folder.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the url `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder of a Box account is\nalways represented by the ID `0`.",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "folder_id"
                },
                {
                  "description": {
                    "content": "The scope of the metadata template",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "scope"
                },
                {
                  "description": {
                    "content": "The name of the metadata template",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "template_key"
                }
              ]
            },
            "method": "DELETE",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "867f17c7-cf9e-44ae-88cd-4caf34498f97",
              "name": "Returns an empty response when the metadata is\nsuccessfully deleted.",
              "originalRequest": {
                "url": {
                  "path": [
                    "folders",
                    "<string>",
                    "metadata",
                    "<string>",
                    "<string>"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE",
                "body": {}
              },
              "status": "No Content",
              "code": 204,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            }
          ],
          "event": []
        }
      ]
    },
    {
      "id": "d54675f8-ebfa-460a-8503-07afb4a7cfc7",
      "name": "Files & Folder Metadata",
      "item": [
        {
          "id": "6234471c-3a84-4dbb-9d27-94d6190d8248",
          "name": "Get specific file metadata",
          "request": {
            "name": "Get specific file metadata",
            "description": {
              "content": "Retrieve a specific metadata template instance for a file",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "files",
                ":file_id",
                "metadata",
                ":scope",
                ":template_key"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "The ID of the file.",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "file_id"
                },
                {
                  "description": {
                    "content": "The scope of the metadata template",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "scope"
                },
                {
                  "description": {
                    "content": "The name of the metadata template",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "template_key"
                }
              ]
            },
            "method": "GET",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "cc128db6-0d1e-463c-8b0c-10a240e6dd5d",
              "name": "An instance of the metadata template that includes\nadditional \"key:value\" pairs defined by the user or\nan application.",
              "originalRequest": {
                "url": {
                  "path": [
                    "files",
                    "<string>",
                    "metadata",
                    "<string>",
                    "<string>"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Created",
              "code": 201,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"$canEdit\": \"<boolean>\",\n \"$id\": \"<uuid>\",\n \"$parent\": \"<string>\",\n \"$scope\": \"<string>\",\n \"$template\": \"<string>\",\n \"$type\": \"<string>\",\n \"$typeVersion\": \"<integer>\",\n \"$version\": \"<integer>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "63d97969-94c6-4f2b-8b10-35b133107baf",
              "name": "Returned if the metadata template specified\nwas not applied to this file.",
              "originalRequest": {
                "url": {
                  "path": [
                    "files",
                    "<string>",
                    "metadata",
                    "<string>",
                    "<string>"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Not Found",
              "code": 404,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        }
      ]
    },
    {
      "id": "a6eba4d6-ecb9-43a1-ade3-80f4ba6e5dc9",
      "name": "Watermarks",
      "item": [
        {
          "id": "73c0d8ef-bedb-4bb9-a74b-45bf30f910ab",
          "name": "Get file watermark",
          "request": {
            "name": "Get file watermark",
            "description": {
              "content": "Retrieve the watermark for a file.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "files",
                ":file_id",
                "watermark"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "The ID of the file.",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "file_id"
                }
              ]
            },
            "method": "GET",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "344b05ca-aa2b-4196-9679-36c0a22c60f3",
              "name": "Returns an object containing information about the\nwatermark associated for to this file.",
              "originalRequest": {
                "url": {
                  "path": [
                    "files",
                    "<string>",
                    "watermark"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"watermark\": {\n  \"created_at\": \"<dateTime>\",\n  \"modified_at\": \"<dateTime>\"\n }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "20c13f6d-6f93-4ec6-9142-21bc9deef704",
              "name": "Returns an error if the file does not have a watermark applied.",
              "originalRequest": {
                "url": {
                  "path": [
                    "files",
                    "<string>",
                    "watermark"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Not Found",
              "code": 404,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "d92df6ba-23c0-46df-8224-6a63d5eb2e6e",
          "name": "Apply watermark to file",
          "request": {
            "name": "Apply watermark to file",
            "description": {
              "content": "Applies or update a watermark on a file.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "files",
                ":file_id",
                "watermark"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "The ID of the file.",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "file_id"
                }
              ]
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "auth": {
              "type": "oauth2"
            },
            "body": {
              "mode": "raw",
              "raw": "{\n    \"watermark\": {\n        \"imprint\": \"<string>\"\n    }\n}"
            }
          },
          "response": [
            {
              "id": "a539c755-6a0a-4cce-9f7b-b765fd00f323",
              "name": "Returns an updated watermark if a watermark already\nexisted on this file.",
              "originalRequest": {
                "url": {
                  "path": [
                    "files",
                    "<string>",
                    "watermark"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"watermark\": {\n        \"imprint\": \"<string>\"\n    }\n}"
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"watermark\": {\n  \"created_at\": \"<dateTime>\",\n  \"modified_at\": \"<dateTime>\"\n }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "894a9ec9-7044-40d4-b557-75efbfbde750",
              "name": "Returns a new watermark if no watermark existed on\nthis file yet.",
              "originalRequest": {
                "url": {
                  "path": [
                    "files",
                    "<string>",
                    "watermark"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"watermark\": {\n        \"imprint\": \"<string>\"\n    }\n}"
                }
              },
              "status": "Created",
              "code": 201,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"watermark\": {\n  \"created_at\": \"<dateTime>\",\n  \"modified_at\": \"<dateTime>\"\n }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "b517eb61-44ba-45d0-9ab6-79ca5e799fb6",
          "name": "Get folder watermark",
          "request": {
            "name": "Get folder watermark",
            "description": {
              "content": "Retrieve the watermark for a folder.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "folders",
                ":folder_id",
                "watermark"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "The unique identifier that represent a folder.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the url `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder of a Box account is\nalways represented by the ID `0`.",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "folder_id"
                }
              ]
            },
            "method": "GET",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "bbefbbec-be7e-43b2-b7a0-40412a0d0cc4",
              "name": "Returns an object containing information about the\nwatermark associated for to this folder.",
              "originalRequest": {
                "url": {
                  "path": [
                    "folders",
                    "<string>",
                    "watermark"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"watermark\": {\n  \"created_at\": \"<dateTime>\",\n  \"modified_at\": \"<dateTime>\"\n }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "b7ae4d14-750e-401f-b5c5-f72c130e3b0b",
              "name": "Returns an error if the folder does not have a watermark applied.",
              "originalRequest": {
                "url": {
                  "path": [
                    "folders",
                    "<string>",
                    "watermark"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Not Found",
              "code": 404,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "9485c31c-d945-4d19-87c6-41f4d084b7cf",
          "name": "Apply watermark to folder",
          "request": {
            "name": "Apply watermark to folder",
            "description": {
              "content": "Applies or update a watermark on a folder.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "folders",
                ":folder_id",
                "watermark"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "The unique identifier that represent a folder.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the url `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder of a Box account is\nalways represented by the ID `0`.",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "folder_id"
                }
              ]
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "auth": {
              "type": "oauth2"
            },
            "body": {
              "mode": "raw",
              "raw": "{\n    \"watermark\": {\n        \"imprint\": \"<string>\"\n    }\n}"
            }
          },
          "response": [
            {
              "id": "94522e83-b6d4-485b-84e3-2bcfcb9fcfde",
              "name": "Returns an updated watermark if a watermark already\nexisted on this folder.",
              "originalRequest": {
                "url": {
                  "path": [
                    "folders",
                    "<string>",
                    "watermark"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"watermark\": {\n        \"imprint\": \"<string>\"\n    }\n}"
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"watermark\": {\n  \"created_at\": \"<dateTime>\",\n  \"modified_at\": \"<dateTime>\"\n }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "31e5dac4-c6d6-40a5-807c-bcc3106b208f",
              "name": "Returns a new watermark if no watermark existed on\nthis folder yet.",
              "originalRequest": {
                "url": {
                  "path": [
                    "folders",
                    "<string>",
                    "watermark"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"watermark\": {\n        \"imprint\": \"<string>\"\n    }\n}"
                }
              },
              "status": "Created",
              "code": 201,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"watermark\": {\n  \"created_at\": \"<dateTime>\",\n  \"modified_at\": \"<dateTime>\"\n }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        }
      ]
    },
    {
      "id": "685006d0-3437-40c8-80a0-bf299558e218",
      "name": "Watermark",
      "item": [
        {
          "id": "26fa8541-6d61-4e96-ba78-f985982d73d8",
          "name": "Remove file watermark",
          "request": {
            "name": "Remove file watermark",
            "description": {
              "content": "Removes the watermark from a file.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "files",
                ":file_id",
                "watermark"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "The ID of the file.",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "file_id"
                }
              ]
            },
            "method": "DELETE",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "34e71848-fced-44c8-a671-8d4a23f47a28",
              "name": "An empty response will be returned when the watermark\nwas successfully deleted.",
              "originalRequest": {
                "url": {
                  "path": [
                    "files",
                    "<string>",
                    "watermark"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE",
                "body": {}
              },
              "status": "No Content",
              "code": 204,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "8bdcc642-6240-42bb-9d10-cecc6c161ade",
              "name": "Returns an error if the file did not have\na watermark applied to it",
              "originalRequest": {
                "url": {
                  "path": [
                    "files",
                    "<string>",
                    "watermark"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE",
                "body": {}
              },
              "status": "Not Found",
              "code": 404,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "76cd7874-83d2-4aa2-9876-9a60c409df74",
          "name": "Remove folder watermark",
          "request": {
            "name": "Remove folder watermark",
            "description": {
              "content": "Removes the watermark from a folder.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "folders",
                ":folder_id",
                "watermark"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "The unique identifier that represent a folder.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the url `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder of a Box account is\nalways represented by the ID `0`.",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "folder_id"
                }
              ]
            },
            "method": "DELETE",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "77441d12-9e60-42ec-b7a8-94512f2181b4",
              "name": "An empty response will be returned when the watermark\nwas successfully deleted.",
              "originalRequest": {
                "url": {
                  "path": [
                    "folders",
                    "<string>",
                    "watermark"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE",
                "body": {}
              },
              "status": "No Content",
              "code": 204,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "374d8872-56f1-46fb-bd49-3adb7df4e75d",
              "name": "Returns an error if the folder did not have\na watermark applied to it",
              "originalRequest": {
                "url": {
                  "path": [
                    "folders",
                    "<string>",
                    "watermark"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE",
                "body": {}
              },
              "status": "Not Found",
              "code": 404,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        }
      ]
    },
    {
      "id": "7cd234a6-40c6-4dab-8abb-50e6a0cad57e",
      "name": "Folders",
      "item": [
        {
          "id": "e52f53fb-eec9-4264-a0ae-17469c9691f1",
          "name": "Create a folder",
          "request": {
            "name": "Create a folder",
            "description": {
              "content": "Creates a new empty folder within the specified parent folder.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "folders"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response, unless explicitly specified.",
                  "key": "fields",
                  "value": "<string>,<string>"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": {
              "type": "oauth2"
            },
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"<string>\",\n    \"parent\": {\n        \"id\": \"<string>\"\n    }\n}"
            }
          },
          "response": [
            {
              "id": "6abe8d92-f352-46c4-a281-90877575fcb9",
              "name": "Returns a folder object.\n\n[Some fields are optional](#folder) and need to be explicitly\nrequested using the [fields](##post_folders-fields) parameter.",
              "originalRequest": {
                "url": {
                  "path": [
                    "folders"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "<string>,<string>"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"<string>\",\n    \"parent\": {\n        \"id\": \"<string>\"\n    }\n}"
                }
              },
              "status": "Created",
              "code": 201,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"sequence_id\": \"<string>\",\n \"etag\": \"<string>\",\n \"name\": \"<string>\",\n \"created_at\": \"<dateTime>\",\n \"modified_at\": \"<dateTime>\",\n \"description\": {},\n \"size\": \"<long>\",\n \"path_collection\": {\n  \"total_count\": \"<long>\",\n  \"entries\": [\n   {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\"\n   },\n   {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\"\n   }\n  ]\n },\n \"created_by\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"modified_by\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"trashed_at\": \"<dateTime>\",\n \"purged_at\": \"<dateTime>\",\n \"content_created_at\": \"<dateTime>\",\n \"content_modified_at\": \"<dateTime>\",\n \"expires_at\": \"<dateTime>\",\n \"owned_by\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"shared_link\": {\n  \"url\": \"<url>\",\n  \"download_url\": \"<url>\",\n  \"vanity_url\": \"<url>\",\n  \"access\": \"<string>\",\n  \"effective_access\": \"<string>\",\n  \"effective_permission\": \"<string>\",\n  \"unshared_at\": \"<dateTime>\",\n  \"is_password_enabled\": \"<boolean>\",\n  \"permissions\": {\n   \"can_download\": \"<boolean>\",\n   \"can_preview\": \"<boolean>\"\n  },\n  \"download_count\": \"<integer>\",\n  \"preview_count\": \"<integer>\"\n },\n \"folder_upload_email\": {\n  \"access\": \"<string>\",\n  \"email\": \"<email>\"\n },\n \"parent\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"sequence_id\": \"<string>\",\n  \"etag\": \"<string>\",\n  \"name\": \"<string>\"\n },\n \"item_status\": \"<string>\",\n \"item_collection\": {\n  \"total_count\": \"<long>\",\n  \"limit\": \"<long>\",\n  \"offset\": \"<long>\",\n  \"order\": [\n   {\n    \"by\": \"<string>\",\n    \"direction\": \"<string>\"\n   },\n   {\n    \"by\": \"<string>\",\n    \"direction\": \"<string>\"\n   }\n  ],\n  \"entries\": [\n   {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\"\n   },\n   {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\"\n   }\n  ]\n },\n \"sync_state\": {},\n \"has_collaborations\": \"<boolean>\",\n \"permissions\": {\n  \"can_delete\": \"<boolean>\",\n  \"can_download\": \"<boolean>\",\n  \"can_invite_collaborator\": \"<boolean>\",\n  \"can_rename\": \"<boolean>\",\n  \"can_set_share_access\": \"<boolean>\",\n  \"can_share\": \"<boolean>\",\n  \"can_upload\": \"<boolean>\"\n },\n \"tags\": {},\n \"can_non_owners_invite\": {},\n \"is_externally_owned\": \"<boolean>\",\n \"is_collaboration_restricted_to_enterprise\": {},\n \"allowed_shared_link_access_levels\": \"company\",\n \"allowed_invitee_roles\": \"viewer\",\n \"watermark_info\": {\n  \"is_watermarked\": \"<boolean>\"\n }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "65e87fcb-96df-4a2e-9741-041eb3fcb010",
              "name": "Returns an error if some of the parameters are missing or\ninvalid.\n\n* `bad_request` when a parameter is missing.\n* `item_name_too_long` when the folder name is too long.",
              "originalRequest": {
                "url": {
                  "path": [
                    "folders"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "<string>,<string>"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"<string>\",\n    \"parent\": {\n        \"id\": \"<string>\"\n    }\n}"
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "61f891d5-d798-4617-9ce1-5237698f4587",
              "name": "Returns an error if the parent folder could not be found,\nor the authenticated user does not have access to the parent\nfolder.\n\n* `not_found` when the authenticated user does not have access\n  to the parent folder",
              "originalRequest": {
                "url": {
                  "path": [
                    "folders"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "<string>,<string>"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"<string>\",\n    \"parent\": {\n        \"id\": \"<string>\"\n    }\n}"
                }
              },
              "status": "Not Found",
              "code": 404,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "2040a178-ad3e-4c51-8c94-fdc0ae10e81f",
              "name": "Returns an error if a folder by this name already exists,\nor if the parent folder is locked.\n\n* `item_name_in_use` when a folder with the same name already\n  exists.",
              "originalRequest": {
                "url": {
                  "path": [
                    "folders"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "<string>,<string>"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"<string>\",\n    \"parent\": {\n        \"id\": \"<string>\"\n    }\n}"
                }
              },
              "status": "Conflict",
              "code": 409,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "06e24373-cc1f-4fac-801b-e69acfae2caf",
          "name": "Get a folder",
          "request": {
            "name": "Get a folder",
            "description": {
              "content": "Retrieves details for a folder, including the first 100 entries\nin the folder.\n\nTo fetch more items within the folder, please use the\n[Get items in a folder](#get-folders-id-items) endpoint.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "folders",
                ":folder_id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response, unless explicitly specified.",
                  "key": "fields",
                  "value": "<string>,<string>"
                }
              ],
              "variable": [
                {
                  "description": {
                    "content": "The unique identifier that represent a folder.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the url `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder of a Box account is\nalways represented by the ID `0`.",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "folder_id"
                }
              ]
            },
            "method": "GET",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "967b69dc-2711-4fe8-88ff-b6d0a20cc44a",
              "name": "Returns a folder, including the first 100 entries in the folder.\n\nTo fetch more items within the folder, please use the\n[Get items in a folder](#get-folders-id-items) endpoint.\n\n[Some fields are optional](#folder) and need to be explicitly\nrequested using the [fields](#get_folders_id-fields)\nparameter.",
              "originalRequest": {
                "url": {
                  "path": [
                    "folders",
                    "<string>"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "<string>,<string>"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"sequence_id\": \"<string>\",\n \"etag\": \"<string>\",\n \"name\": \"<string>\",\n \"created_at\": \"<dateTime>\",\n \"modified_at\": \"<dateTime>\",\n \"description\": {},\n \"size\": \"<long>\",\n \"path_collection\": {\n  \"total_count\": \"<long>\",\n  \"entries\": [\n   {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\"\n   },\n   {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\"\n   }\n  ]\n },\n \"created_by\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"modified_by\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"trashed_at\": \"<dateTime>\",\n \"purged_at\": \"<dateTime>\",\n \"content_created_at\": \"<dateTime>\",\n \"content_modified_at\": \"<dateTime>\",\n \"expires_at\": \"<dateTime>\",\n \"owned_by\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"shared_link\": {\n  \"url\": \"<url>\",\n  \"download_url\": \"<url>\",\n  \"vanity_url\": \"<url>\",\n  \"access\": \"<string>\",\n  \"effective_access\": \"<string>\",\n  \"effective_permission\": \"<string>\",\n  \"unshared_at\": \"<dateTime>\",\n  \"is_password_enabled\": \"<boolean>\",\n  \"permissions\": {\n   \"can_download\": \"<boolean>\",\n   \"can_preview\": \"<boolean>\"\n  },\n  \"download_count\": \"<integer>\",\n  \"preview_count\": \"<integer>\"\n },\n \"folder_upload_email\": {\n  \"access\": \"<string>\",\n  \"email\": \"<email>\"\n },\n \"parent\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"sequence_id\": \"<string>\",\n  \"etag\": \"<string>\",\n  \"name\": \"<string>\"\n },\n \"item_status\": \"<string>\",\n \"item_collection\": {\n  \"total_count\": \"<long>\",\n  \"limit\": \"<long>\",\n  \"offset\": \"<long>\",\n  \"order\": [\n   {\n    \"by\": \"<string>\",\n    \"direction\": \"<string>\"\n   },\n   {\n    \"by\": \"<string>\",\n    \"direction\": \"<string>\"\n   }\n  ],\n  \"entries\": [\n   {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\"\n   },\n   {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\"\n   }\n  ]\n },\n \"sync_state\": {},\n \"has_collaborations\": \"<boolean>\",\n \"permissions\": {\n  \"can_delete\": \"<boolean>\",\n  \"can_download\": \"<boolean>\",\n  \"can_invite_collaborator\": \"<boolean>\",\n  \"can_rename\": \"<boolean>\",\n  \"can_set_share_access\": \"<boolean>\",\n  \"can_share\": \"<boolean>\",\n  \"can_upload\": \"<boolean>\"\n },\n \"tags\": {},\n \"can_non_owners_invite\": {},\n \"is_externally_owned\": \"<boolean>\",\n \"is_collaboration_restricted_to_enterprise\": {},\n \"allowed_shared_link_access_levels\": \"collaborators\",\n \"allowed_invitee_roles\": \"uploader\",\n \"watermark_info\": {\n  \"is_watermarked\": \"<boolean>\"\n }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "5f138728-6408-4741-8119-6b6167925d8c",
              "name": "Returned when the access token provided in the `Authorization` header\nis not recognized or not provided.",
              "originalRequest": {
                "url": {
                  "path": [
                    "folders",
                    "<string>"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "<string>,<string>"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Forbidden",
              "code": 403,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "6477737f-0fdc-4a91-9665-de8daf32803e",
              "name": "Returned if the folder is not found, or the user does not\nhave access to the folder.",
              "originalRequest": {
                "url": {
                  "path": [
                    "folders",
                    "<string>"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "<string>,<string>"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Not Found",
              "code": 404,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "efb26a3a-f9eb-46e1-9476-635654274074",
              "name": "Returned if the `folder_id` is not in a recognized format.",
              "originalRequest": {
                "url": {
                  "path": [
                    "folders",
                    "<string>"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "<string>,<string>"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Method Not Allowed",
              "code": 405,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "e18ef366-ac56-4a0e-90be-61998247dfbc",
          "name": "Update a folder",
          "request": {
            "name": "Update a folder",
            "description": {
              "content": "Updates a folder. This can be also be used to move the folder,\ncreate shared links, update collaborations, and more.\n\n# Folder locking\n\nWhen moving a folder, part of the file tree will be locked, mainly\nthe source folder and all of its descendants, as well as the destination\nfolder.\n\nFor the duration of the move, no other move, copy, delete, or restore\noperation can performed on any of the locked folders.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "folders",
                ":folder_id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response, unless explicitly specified.",
                  "key": "fields",
                  "value": "<string>,<string>"
                }
              ],
              "variable": [
                {
                  "description": {
                    "content": "The unique identifier that represent a folder.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the url `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder of a Box account is\nalways represented by the ID `0`.",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "folder_id"
                }
              ]
            },
            "header": [
              {
                "key": "If-Match",
                "value": "<string>",
                "description": "Ensure this item hasn't recently changed\nby ensuring the item's current `etag` matches the\n`etag` passed into this header."
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "auth": {
              "type": "oauth2"
            },
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"sync_state\": \"<string>\",\n    \"can_non_owners_invite\": \"<boolean>\",\n    \"is_collaboration_restricted_to_enterprise\": \"<boolean>\",\n    \"parent\": {\n        \"id\": \"<string>\"\n    },\n    \"shared_link\": {\n        \"access\": \"<string>\",\n        \"password\": \"<string>\",\n        \"unshared_at\": \"<dateTime>\",\n        \"permissions\": {\n            \"can_download\": \"<boolean>\"\n        }\n    },\n    \"folder_upload_email\": {\n        \"access\": \"<string>\"\n    },\n    \"owned_by\": {\n        \"id\": \"<string>\"\n    },\n    \"tags\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"collections\": [\n        {\n            \"id\": \"<string>\"\n        },\n        {\n            \"id\": \"<string>\"\n        }\n    ]\n}"
            }
          },
          "response": [
            {
              "id": "fcaaa08a-9dcf-463c-8ecf-ad2031486379",
              "name": "Returns a folder object for the updated folder\n\n[Some fields are optional](#folder) and need to be explicitly\nrequested using the [fields](#put-folders-id--request--fields)\nparameter.",
              "originalRequest": {
                "url": {
                  "path": [
                    "folders",
                    "<string>"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "<string>,<string>"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Ensure this item hasn't recently changed\nby ensuring the item's current `etag` matches the\n`etag` passed into this header.",
                      "type": "text/plain"
                    },
                    "key": "If-Match",
                    "value": "<string>"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"sync_state\": \"<string>\",\n    \"can_non_owners_invite\": \"<boolean>\",\n    \"is_collaboration_restricted_to_enterprise\": \"<boolean>\",\n    \"parent\": {\n        \"id\": \"<string>\"\n    },\n    \"shared_link\": {\n        \"access\": \"<string>\",\n        \"password\": \"<string>\",\n        \"unshared_at\": \"<dateTime>\",\n        \"permissions\": {\n            \"can_download\": \"<boolean>\"\n        }\n    },\n    \"folder_upload_email\": {\n        \"access\": \"<string>\"\n    },\n    \"owned_by\": {\n        \"id\": \"<string>\"\n    },\n    \"tags\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"collections\": [\n        {\n            \"id\": \"<string>\"\n        },\n        {\n            \"id\": \"<string>\"\n        }\n    ]\n}"
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"sequence_id\": \"<string>\",\n \"etag\": \"<string>\",\n \"name\": \"<string>\",\n \"created_at\": \"<dateTime>\",\n \"modified_at\": \"<dateTime>\",\n \"description\": {},\n \"size\": \"<long>\",\n \"path_collection\": {\n  \"total_count\": \"<long>\",\n  \"entries\": [\n   {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\"\n   },\n   {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\"\n   }\n  ]\n },\n \"created_by\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"modified_by\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"trashed_at\": \"<dateTime>\",\n \"purged_at\": \"<dateTime>\",\n \"content_created_at\": \"<dateTime>\",\n \"content_modified_at\": \"<dateTime>\",\n \"expires_at\": \"<dateTime>\",\n \"owned_by\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"shared_link\": {\n  \"url\": \"<url>\",\n  \"download_url\": \"<url>\",\n  \"vanity_url\": \"<url>\",\n  \"access\": \"<string>\",\n  \"effective_access\": \"<string>\",\n  \"effective_permission\": \"<string>\",\n  \"unshared_at\": \"<dateTime>\",\n  \"is_password_enabled\": \"<boolean>\",\n  \"permissions\": {\n   \"can_download\": \"<boolean>\",\n   \"can_preview\": \"<boolean>\"\n  },\n  \"download_count\": \"<integer>\",\n  \"preview_count\": \"<integer>\"\n },\n \"folder_upload_email\": {\n  \"access\": \"<string>\",\n  \"email\": \"<email>\"\n },\n \"parent\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"sequence_id\": \"<string>\",\n  \"etag\": \"<string>\",\n  \"name\": \"<string>\"\n },\n \"item_status\": \"<string>\",\n \"item_collection\": {\n  \"total_count\": \"<long>\",\n  \"limit\": \"<long>\",\n  \"offset\": \"<long>\",\n  \"order\": [\n   {\n    \"by\": \"<string>\",\n    \"direction\": \"<string>\"\n   },\n   {\n    \"by\": \"<string>\",\n    \"direction\": \"<string>\"\n   }\n  ],\n  \"entries\": [\n   {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\"\n   },\n   {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\"\n   }\n  ]\n },\n \"sync_state\": {},\n \"has_collaborations\": \"<boolean>\",\n \"permissions\": {\n  \"can_delete\": \"<boolean>\",\n  \"can_download\": \"<boolean>\",\n  \"can_invite_collaborator\": \"<boolean>\",\n  \"can_rename\": \"<boolean>\",\n  \"can_set_share_access\": \"<boolean>\",\n  \"can_share\": \"<boolean>\",\n  \"can_upload\": \"<boolean>\"\n },\n \"tags\": {},\n \"can_non_owners_invite\": {},\n \"is_externally_owned\": \"<boolean>\",\n \"is_collaboration_restricted_to_enterprise\": {},\n \"allowed_shared_link_access_levels\": \"open\",\n \"allowed_invitee_roles\": \"editor\",\n \"watermark_info\": {\n  \"is_watermarked\": \"<boolean>\"\n }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "c34de337-5de5-45cb-87d5-b34941bb8c21",
              "name": "* `operation_blocked_temporary`: Returned if either of the destination\n  or source folders is locked due to another move, copy, delete or\n  restore operation in process.\n\n  The operation can be retried at a later point.",
              "originalRequest": {
                "url": {
                  "path": [
                    "folders",
                    "<string>"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "<string>,<string>"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Ensure this item hasn't recently changed\nby ensuring the item's current `etag` matches the\n`etag` passed into this header.",
                      "type": "text/plain"
                    },
                    "key": "If-Match",
                    "value": "<string>"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"sync_state\": \"<string>\",\n    \"can_non_owners_invite\": \"<boolean>\",\n    \"is_collaboration_restricted_to_enterprise\": \"<boolean>\",\n    \"parent\": {\n        \"id\": \"<string>\"\n    },\n    \"shared_link\": {\n        \"access\": \"<string>\",\n        \"password\": \"<string>\",\n        \"unshared_at\": \"<dateTime>\",\n        \"permissions\": {\n            \"can_download\": \"<boolean>\"\n        }\n    },\n    \"folder_upload_email\": {\n        \"access\": \"<string>\"\n    },\n    \"owned_by\": {\n        \"id\": \"<string>\"\n    },\n    \"tags\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"collections\": [\n        {\n            \"id\": \"<string>\"\n        },\n        {\n            \"id\": \"<string>\"\n        }\n    ]\n}"
                }
              },
              "status": "Conflict",
              "code": 409,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "f8e9ccd0-de2f-4594-98db-488afa671edb",
          "name": "Delete a folder",
          "request": {
            "name": "Delete a folder",
            "description": {
              "content": "Deletes a folder, either permanently or by moving it to\nthe trash.\n\n# Folder locking\n\nThe the enterprise settings determine whether the item will\nbe permanently deleted from Box or moved to the trash.\n\nDuring this operation, part of the file tree will be locked, mainly\nthe source folder and all of its descendants.\n\nFor the duration of the operation, no other move, copy, delete, or restore\noperation can performed on any of the locked folders.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "folders",
                ":folder_id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "description": "Delete a folder that is not empty by recursively deleting the\nfolder and all of its content.",
                  "key": "recursive",
                  "value": "<boolean>"
                }
              ],
              "variable": [
                {
                  "description": {
                    "content": "The unique identifier that represent a folder.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the url `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder of a Box account is\nalways represented by the ID `0`.",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "folder_id"
                }
              ]
            },
            "header": [
              {
                "key": "If-Match",
                "value": "<string>",
                "description": "Ensure this item hasn't recently changed\nby ensuring the item's current `etag` matches the\n`etag` passed into this header."
              }
            ],
            "method": "DELETE",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "c698ffa2-fde0-4857-beb9-e3fd54d91979",
              "name": "Returns an empty response when the folder is successfully deleted\nor moved to the trash.",
              "originalRequest": {
                "url": {
                  "path": [
                    "folders",
                    "<string>"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "recursive",
                      "value": "<boolean>"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Ensure this item hasn't recently changed\nby ensuring the item's current `etag` matches the\n`etag` passed into this header.",
                      "type": "text/plain"
                    },
                    "key": "If-Match",
                    "value": "<string>"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "No Content",
              "code": 204,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "212db853-0752-483b-935e-d5990493269f",
              "name": "* `operation_blocked_temporary`: Returned if either of the destination\n  or source folders is locked due to another move, copy, delete or\n  restore operation in process.\n\n  The operation can be retried at a later point.",
              "originalRequest": {
                "url": {
                  "path": [
                    "folders",
                    "<string>"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "recursive",
                      "value": "<boolean>"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Ensure this item hasn't recently changed\nby ensuring the item's current `etag` matches the\n`etag` passed into this header.",
                      "type": "text/plain"
                    },
                    "key": "If-Match",
                    "value": "<string>"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "Conflict",
              "code": 409,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "f5ac4ea0-b2d0-41ad-bcc8-b7087253a567",
          "name": "Get items in folder",
          "request": {
            "name": "Get items in folder",
            "description": {
              "content": "Retrieves a page of items in a folder. These items can be files,\nfolders, and web links.\n\nTo request more information about the folder itself, like its size,\nplease use the [Get a folder](#get-folders-id) endpoint instead.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "folders",
                ":folder_id",
                "items"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response, unless explicitly specified.",
                  "key": "fields",
                  "value": "<string>,<string>"
                },
                {
                  "description": "Specifies whether to use marker-based pagination instead of\noffset-based pagination. Only one pagination method can\nbe used at a time.\n\nBy setting this value to true, the API will return a `marker` field\nthat can be passed as a parameter to this endpoint to get the next\npage of the response.",
                  "key": "usemarker",
                  "value": "<boolean>"
                },
                {
                  "description": "The offset of the item at which to begin the response.",
                  "key": "offset",
                  "value": "<long>"
                },
                {
                  "description": "The position marker at which to begin the response.\n\nThis requires `usemarker` to be set to true.",
                  "key": "marker",
                  "value": "<string>"
                },
                {
                  "description": "The maximum number of items to return per page.",
                  "key": "limit",
                  "value": "100"
                },
                {
                  "description": "Defines the **second** attribute by which items\nare sorted.\n\nItems are always sorted by their `type` first, with\nfolders listed before files, and files listed\nbefore web links.\n\nThis parameter is not supported for marker-based pagination\non the root folder (the folder with an ID of `0`).",
                  "key": "sort",
                  "value": "<string>"
                },
                {
                  "description": "The direction to sort items in.",
                  "key": "direction",
                  "value": "<string>"
                }
              ],
              "variable": [
                {
                  "description": {
                    "content": "The unique identifier that represent a folder.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the url `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder of a Box account is\nalways represented by the ID `0`.",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "folder_id"
                }
              ]
            },
            "method": "GET",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "4f52af75-2622-4dc4-b9f8-942a5ed62f0c",
              "name": "Returns a collection of files, folders, and web links contained in a folder.",
              "originalRequest": {
                "url": {
                  "path": [
                    "folders",
                    "<string>",
                    "items"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "<string>,<string>"
                    },
                    {
                      "key": "usemarker",
                      "value": "<boolean>"
                    },
                    {
                      "key": "offset",
                      "value": "<long>"
                    },
                    {
                      "key": "marker",
                      "value": "<string>"
                    },
                    {
                      "key": "limit",
                      "value": "100"
                    },
                    {
                      "key": "sort",
                      "value": "<string>"
                    },
                    {
                      "key": "direction",
                      "value": "<string>"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"total_count\": \"<long>\",\n \"limit\": \"<long>\",\n \"offset\": \"<long>\",\n \"order\": [\n  {\n   \"by\": \"<string>\",\n   \"direction\": \"<string>\"\n  },\n  {\n   \"by\": \"<string>\",\n   \"direction\": \"<string>\"\n  }\n ],\n \"entries\": [\n  {\n   \"id\": \"schema type not provided\",\n   \"type\": \"<string>\",\n   \"sequence_id\": \"<string>\",\n   \"etag\": \"<string>\",\n   \"name\": \"<string>\"\n  },\n  {\n   \"id\": \"schema type not provided\",\n   \"type\": \"<string>\",\n   \"sequence_id\": \"<string>\",\n   \"etag\": \"<string>\",\n   \"name\": \"<string>\"\n  }\n ]\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "cacd49c8-4bb3-442e-99e7-a170a75dde3d",
              "name": "Returned when the access token provided in the `Authorization` header\nis not recognized or not provided.",
              "originalRequest": {
                "url": {
                  "path": [
                    "folders",
                    "<string>",
                    "items"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "<string>,<string>"
                    },
                    {
                      "key": "usemarker",
                      "value": "<boolean>"
                    },
                    {
                      "key": "offset",
                      "value": "<long>"
                    },
                    {
                      "key": "marker",
                      "value": "<string>"
                    },
                    {
                      "key": "limit",
                      "value": "100"
                    },
                    {
                      "key": "sort",
                      "value": "<string>"
                    },
                    {
                      "key": "direction",
                      "value": "<string>"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Forbidden",
              "code": 403,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "172b8a4c-64d3-4037-944c-bffefc64a6bf",
              "name": "Returned if the folder is not found, or the user does not\nhave access to the folder.",
              "originalRequest": {
                "url": {
                  "path": [
                    "folders",
                    "<string>",
                    "items"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "<string>,<string>"
                    },
                    {
                      "key": "usemarker",
                      "value": "<boolean>"
                    },
                    {
                      "key": "offset",
                      "value": "<long>"
                    },
                    {
                      "key": "marker",
                      "value": "<string>"
                    },
                    {
                      "key": "limit",
                      "value": "100"
                    },
                    {
                      "key": "sort",
                      "value": "<string>"
                    },
                    {
                      "key": "direction",
                      "value": "<string>"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Not Found",
              "code": 404,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "294c7016-50df-4169-8fea-3568bd78bc80",
              "name": "Returned if the `folder_id` is not in a recognized format.",
              "originalRequest": {
                "url": {
                  "path": [
                    "folders",
                    "<string>",
                    "items"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "<string>,<string>"
                    },
                    {
                      "key": "usemarker",
                      "value": "<boolean>"
                    },
                    {
                      "key": "offset",
                      "value": "<long>"
                    },
                    {
                      "key": "marker",
                      "value": "<string>"
                    },
                    {
                      "key": "limit",
                      "value": "100"
                    },
                    {
                      "key": "sort",
                      "value": "<string>"
                    },
                    {
                      "key": "direction",
                      "value": "<string>"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Method Not Allowed",
              "code": 405,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "e1140e9d-a445-4c80-a1eb-3cb8f05a0c6c",
          "name": "Copy a folder",
          "request": {
            "name": "Copy a folder",
            "description": {
              "content": "Creates a copy of a folder within a destination folder.\n\nThe original folder will not be changed.\n\n# Asynchronous copying\n\nIf the folder being copied contains up to 500 items the copy will\nhappen synchronously with the API call. The call will not return until\nthe copy operation has completed.\n\nIf the folder contains more than 500 items the copy operation will be\nexecuted asynchronously and the API call will return directly yet before\nthe copy operation has completed. We currently have no API to check when\na copy operation has finished.\n\n# Folder locking\n\nDuring this operation, part of the file tree will be locked, mainly\nthe source folder and all of its descendants, as well as the destination\nfolder.\n\nFor the duration of the operation, no other move, copy, delete, or restore\noperation can performed on any of the locked folders. Most importantly, this\nmeans that the same folder can not be copied to two different parts of the\nfolder tree at the same time.\n\n# Metadata\n\nIf the destination folder has a metadata cascade policy attached to any of the\nparent folders a metadata cascade operation will be kicked off asynchronously.\n\nWe currently have no API to check when this operation has finished.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "folders",
                ":folder_id",
                "copy"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response, unless explicitly specified.",
                  "key": "fields",
                  "value": "<string>,<string>"
                }
              ],
              "variable": [
                {
                  "description": {
                    "content": "The unique identifier of the folder to copy.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the url `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder with the ID `0` can not be copied.",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "folder_id"
                }
              ]
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": {
              "type": "oauth2"
            },
            "body": {
              "mode": "raw",
              "raw": "{\n    \"parent\": {\n        \"id\": \"<string>\"\n    },\n    \"name\": \"<string>\"\n}"
            }
          },
          "response": [
            {
              "id": "fc47b4a3-80c5-4585-98f4-d65fb455ae1a",
              "name": "Returns a new folder object representing the copied folder.\n\n[Some fields are optional](#folder) and need to be explicitly\nrequested using the [fields](#post-folders-id-copy--request--fields)\nparameter.",
              "originalRequest": {
                "url": {
                  "path": [
                    "folders",
                    "<string>",
                    "copy"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "<string>,<string>"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"parent\": {\n        \"id\": \"<string>\"\n    },\n    \"name\": \"<string>\"\n}"
                }
              },
              "status": "Created",
              "code": 201,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"sequence_id\": \"<string>\",\n \"etag\": \"<string>\",\n \"name\": \"<string>\",\n \"created_at\": \"<dateTime>\",\n \"modified_at\": \"<dateTime>\",\n \"description\": {},\n \"size\": \"<long>\",\n \"path_collection\": {\n  \"total_count\": \"<long>\",\n  \"entries\": [\n   {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\"\n   },\n   {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\"\n   }\n  ]\n },\n \"created_by\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"modified_by\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"trashed_at\": \"<dateTime>\",\n \"purged_at\": \"<dateTime>\",\n \"content_created_at\": \"<dateTime>\",\n \"content_modified_at\": \"<dateTime>\",\n \"expires_at\": \"<dateTime>\",\n \"owned_by\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"shared_link\": {\n  \"url\": \"<url>\",\n  \"download_url\": \"<url>\",\n  \"vanity_url\": \"<url>\",\n  \"access\": \"<string>\",\n  \"effective_access\": \"<string>\",\n  \"effective_permission\": \"<string>\",\n  \"unshared_at\": \"<dateTime>\",\n  \"is_password_enabled\": \"<boolean>\",\n  \"permissions\": {\n   \"can_download\": \"<boolean>\",\n   \"can_preview\": \"<boolean>\"\n  },\n  \"download_count\": \"<integer>\",\n  \"preview_count\": \"<integer>\"\n },\n \"folder_upload_email\": {\n  \"access\": \"<string>\",\n  \"email\": \"<email>\"\n },\n \"parent\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"sequence_id\": \"<string>\",\n  \"etag\": \"<string>\",\n  \"name\": \"<string>\"\n },\n \"item_status\": \"<string>\",\n \"item_collection\": {\n  \"total_count\": \"<long>\",\n  \"limit\": \"<long>\",\n  \"offset\": \"<long>\",\n  \"order\": [\n   {\n    \"by\": \"<string>\",\n    \"direction\": \"<string>\"\n   },\n   {\n    \"by\": \"<string>\",\n    \"direction\": \"<string>\"\n   }\n  ],\n  \"entries\": [\n   {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\"\n   },\n   {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\"\n   }\n  ]\n },\n \"sync_state\": {},\n \"has_collaborations\": \"<boolean>\",\n \"permissions\": {\n  \"can_delete\": \"<boolean>\",\n  \"can_download\": \"<boolean>\",\n  \"can_invite_collaborator\": \"<boolean>\",\n  \"can_rename\": \"<boolean>\",\n  \"can_set_share_access\": \"<boolean>\",\n  \"can_share\": \"<boolean>\",\n  \"can_upload\": \"<boolean>\"\n },\n \"tags\": {},\n \"can_non_owners_invite\": {},\n \"is_externally_owned\": \"<boolean>\",\n \"is_collaboration_restricted_to_enterprise\": {},\n \"allowed_shared_link_access_levels\": \"collaborators\",\n \"allowed_invitee_roles\": \"co-owner\",\n \"watermark_info\": {\n  \"is_watermarked\": \"<boolean>\"\n }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "048e687c-0d82-4ec3-9a03-441dae6ad02d",
              "name": "Returns an error if some of the parameters are missing or\ninvalid.\n\n* `bad_request` when a parameter is missing.\n* `item_name_too_long` when the new folder name is too long.",
              "originalRequest": {
                "url": {
                  "path": [
                    "folders",
                    "<string>",
                    "copy"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "<string>,<string>"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"parent\": {\n        \"id\": \"<string>\"\n    },\n    \"name\": \"<string>\"\n}"
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "fcd624a2-9b00-473d-8dcf-f7f7fd124a1d",
              "name": "Returns an error if either the source or destination folder\ncould not be found, or the authenticated user does not\nhave access to either folders.\n\n* `not_found` when the authenticated user does not have access\n  to the parent folder",
              "originalRequest": {
                "url": {
                  "path": [
                    "folders",
                    "<string>",
                    "copy"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "<string>,<string>"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"parent\": {\n        \"id\": \"<string>\"\n    },\n    \"name\": \"<string>\"\n}"
                }
              },
              "status": "Not Found",
              "code": 404,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "5c19d63c-1eaf-4d90-832f-2a3c5cebe82c",
              "name": "Returns an error if a folder by this name already exists\nin the destination folder, or if the destination folder\nis locked.\n\n* `item_name_in_use` when a folder with the same name already\n  exists.",
              "originalRequest": {
                "url": {
                  "path": [
                    "folders",
                    "<string>",
                    "copy"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "<string>,<string>"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"parent\": {\n        \"id\": \"<string>\"\n    },\n    \"name\": \"<string>\"\n}"
                }
              },
              "status": "Conflict",
              "code": 409,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "7802c616-6563-4efb-981d-3123379a6795",
              "name": "Returns an error when trying to copy the root folder.",
              "originalRequest": {
                "url": {
                  "path": [
                    "folders",
                    "<string>",
                    "copy"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "<string>,<string>"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"parent\": {\n        \"id\": \"<string>\"\n    },\n    \"name\": \"<string>\"\n}"
                }
              },
              "status": "Internal Server Error",
              "code": 500,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "58304028-1205-4849-a45c-6d79aaac7e51",
          "name": "Get trashed folder",
          "request": {
            "name": "Get trashed folder",
            "description": {
              "content": "Retrieves a folder that has been moved to the trash.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "folders",
                ":folder_id",
                "trash"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response, unless explicitly specified.",
                  "key": "fields",
                  "value": "<string>,<string>"
                }
              ],
              "variable": [
                {
                  "description": {
                    "content": "The unique identifier that represent a folder.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the url `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder of a Box account is\nalways represented by the ID `0`.",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "folder_id"
                }
              ]
            },
            "method": "GET",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "0498e439-e042-4081-b0ac-fe2579ca4e7a",
              "name": "Returns the folder that was trashed,\nincluding information about when the it\nwas moved to the trash.",
              "originalRequest": {
                "url": {
                  "path": [
                    "folders",
                    "<string>",
                    "trash"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "<string>,<string>"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"sequence_id\": \"<string>\",\n \"etag\": \"<string>\",\n \"name\": \"<string>\",\n \"created_at\": \"<dateTime>\",\n \"modified_at\": \"<dateTime>\",\n \"description\": {},\n \"size\": \"<long>\",\n \"path_collection\": {\n  \"total_count\": \"<long>\",\n  \"entries\": [\n   {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\"\n   },\n   {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\"\n   }\n  ]\n },\n \"created_by\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"modified_by\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"trashed_at\": \"<dateTime>\",\n \"purged_at\": \"<dateTime>\",\n \"content_created_at\": \"<dateTime>\",\n \"content_modified_at\": \"<dateTime>\",\n \"expires_at\": \"<dateTime>\",\n \"owned_by\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"shared_link\": {\n  \"url\": \"<url>\",\n  \"download_url\": \"<url>\",\n  \"vanity_url\": \"<url>\",\n  \"access\": \"<string>\",\n  \"effective_access\": \"<string>\",\n  \"effective_permission\": \"<string>\",\n  \"unshared_at\": \"<dateTime>\",\n  \"is_password_enabled\": \"<boolean>\",\n  \"permissions\": {\n   \"can_download\": \"<boolean>\",\n   \"can_preview\": \"<boolean>\"\n  },\n  \"download_count\": \"<integer>\",\n  \"preview_count\": \"<integer>\"\n },\n \"folder_upload_email\": {\n  \"access\": \"<string>\",\n  \"email\": \"<email>\"\n },\n \"parent\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"sequence_id\": \"<string>\",\n  \"etag\": \"<string>\",\n  \"name\": \"<string>\"\n },\n \"item_status\": \"<string>\",\n \"item_collection\": {\n  \"total_count\": \"<long>\",\n  \"limit\": \"<long>\",\n  \"offset\": \"<long>\",\n  \"order\": [\n   {\n    \"by\": \"<string>\",\n    \"direction\": \"<string>\"\n   },\n   {\n    \"by\": \"<string>\",\n    \"direction\": \"<string>\"\n   }\n  ],\n  \"entries\": [\n   {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\"\n   },\n   {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\"\n   }\n  ]\n },\n \"sync_state\": {},\n \"has_collaborations\": \"<boolean>\",\n \"permissions\": {\n  \"can_delete\": \"<boolean>\",\n  \"can_download\": \"<boolean>\",\n  \"can_invite_collaborator\": \"<boolean>\",\n  \"can_rename\": \"<boolean>\",\n  \"can_set_share_access\": \"<boolean>\",\n  \"can_share\": \"<boolean>\",\n  \"can_upload\": \"<boolean>\"\n },\n \"tags\": {},\n \"can_non_owners_invite\": {},\n \"is_externally_owned\": \"<boolean>\",\n \"is_collaboration_restricted_to_enterprise\": {},\n \"allowed_shared_link_access_levels\": \"open\",\n \"allowed_invitee_roles\": \"previewer uploader\",\n \"watermark_info\": {\n  \"is_watermarked\": \"<boolean>\"\n }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "350de679-cd71-42c9-94d5-202a0d8c78d7",
              "name": "Returns an error if the folder is not in the trash.",
              "originalRequest": {
                "url": {
                  "path": [
                    "folders",
                    "<string>",
                    "trash"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "<string>,<string>"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Not Found",
              "code": 404,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "4d16ad82-bf94-41a1-99c4-62693d5f2668",
          "name": "Permanently delete folder",
          "request": {
            "name": "Permanently delete folder",
            "description": {
              "content": "Permanently deletes a folder that is in the trash.\nThis action cannot be undone.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "folders",
                ":folder_id",
                "trash"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "The unique identifier that represent a folder.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the url `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder of a Box account is\nalways represented by the ID `0`.",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "folder_id"
                }
              ]
            },
            "method": "DELETE",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "7b14e087-0890-4d94-945e-0599cc765388",
              "name": "Returns an empty response when the folder was\npermanently deleted.",
              "originalRequest": {
                "url": {
                  "path": [
                    "folders",
                    "<string>",
                    "trash"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE",
                "body": {}
              },
              "status": "No Content",
              "code": 204,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "01ab22ae-9caf-4fa5-9a5b-21badce0b673",
              "name": "Returns an error if the folder is not in the trash.",
              "originalRequest": {
                "url": {
                  "path": [
                    "folders",
                    "<string>",
                    "trash"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE",
                "body": {}
              },
              "status": "Not Found",
              "code": 404,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "6a0143f2-6d7f-427b-abfb-26799f7a36ce",
          "name": "List trashed items",
          "request": {
            "name": "List trashed items",
            "description": {
              "content": "Retrieves the files and folders that have been moved\nto the trash.\n\nAny attribute in the full files or folders objects can be passed\nin with the `fields` parameter to retrieve those specific\nattributes that are not returned by default.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "folders",
                "trash",
                "items"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response, unless explicitly specified.",
                  "key": "fields",
                  "value": "<string>,<string>"
                },
                {
                  "description": "The maximum number of items to return per page.",
                  "key": "limit",
                  "value": "100"
                },
                {
                  "description": "The offset of the item at which to begin the response.",
                  "key": "offset",
                  "value": "<long>"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "ca695c56-bb4c-4899-a751-c104fe634db1",
              "name": "Returns a list of items that have been deleted",
              "originalRequest": {
                "url": {
                  "path": [
                    "folders",
                    "trash",
                    "items"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "<string>,<string>"
                    },
                    {
                      "key": "limit",
                      "value": "100"
                    },
                    {
                      "key": "offset",
                      "value": "<long>"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"total_count\": \"<long>\",\n \"limit\": \"<long>\",\n \"offset\": \"<long>\",\n \"order\": [\n  {\n   \"by\": \"<string>\",\n   \"direction\": \"<string>\"\n  },\n  {\n   \"by\": \"<string>\",\n   \"direction\": \"<string>\"\n  }\n ],\n \"entries\": [\n  {\n   \"id\": \"schema type not provided\",\n   \"type\": \"<string>\",\n   \"sequence_id\": \"<string>\",\n   \"etag\": \"<string>\",\n   \"name\": \"<string>\"\n  },\n  {\n   \"id\": \"schema type not provided\",\n   \"type\": \"<string>\",\n   \"sequence_id\": \"<string>\",\n   \"etag\": \"<string>\",\n   \"name\": \"<string>\"\n  }\n ]\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "2f8e5310-d014-4296-a851-d021f3ddb0b8",
          "name": "Permanently delete web link",
          "request": {
            "name": "Permanently delete web link",
            "description": {
              "content": "Permanently deletes a web link that is in the trash.\nThis action cannot be undone.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "web_links",
                ":web_link_id",
                "trash"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "The ID of the web link.",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "web_link_id"
                }
              ]
            },
            "method": "DELETE",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "ca13b1a2-3ecb-467c-ae9a-b1e6d842359b",
              "name": "Returns an empty response when the web link was\npermanently deleted.",
              "originalRequest": {
                "url": {
                  "path": [
                    "web_links",
                    "<string>",
                    "trash"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE",
                "body": {}
              },
              "status": "No Content",
              "code": 204,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "cab6849b-4469-4d31-8abf-ceb1c5637966",
              "name": "Returns an error if the web link is not in the trash.",
              "originalRequest": {
                "url": {
                  "path": [
                    "web_links",
                    "<string>",
                    "trash"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE",
                "body": {}
              },
              "status": "Not Found",
              "code": 404,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        }
      ]
    },
    {
      "id": "38a41836-6114-489e-a1f4-809d71ea6973",
      "name": "Metadata Templates",
      "item": [
        {
          "id": "9ca11468-dc83-421b-a769-fdf099230255",
          "name": "Get template by name",
          "request": {
            "name": "Get template by name",
            "description": {
              "content": "Retrieves a metadata template by its scope and template name.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "metadata_templates",
                ":scope",
                ":template_key",
                "schema"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "The scope of the metadata template",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "scope"
                },
                {
                  "description": {
                    "content": "The name of the metadata template",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "template_key"
                }
              ]
            },
            "method": "GET",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "9a37e488-0f3d-47a0-b0b4-c09926efa45b",
              "name": "Returns the metadata template matching the `scope`\nand `template` name.",
              "originalRequest": {
                "url": {
                  "path": [
                    "metadata_templates",
                    "<string>",
                    "<string>",
                    "schema"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"scope\": \"<string>\",\n \"templateKey\": \"<string>\",\n \"displayName\": \"<string>\",\n \"hidden\": \"<boolean>\",\n \"fields\": [\n  {\n   \"type\": \"<string>\",\n   \"key\": \"<string>\",\n   \"displayName\": \"<string>\",\n   \"description\": \"<string>\",\n   \"hidden\": \"<boolean>\",\n   \"options\": [\n    {\n     \"id\": \"<string>\",\n     \"key\": \"<string>\"\n    },\n    {\n     \"id\": \"<string>\",\n     \"key\": \"<string>\"\n    }\n   ]\n  },\n  {\n   \"type\": \"<string>\",\n   \"key\": \"<string>\",\n   \"displayName\": \"<string>\",\n   \"description\": \"<string>\",\n   \"hidden\": \"<boolean>\",\n   \"options\": [\n    {\n     \"id\": \"<string>\",\n     \"key\": \"<string>\"\n    },\n    {\n     \"id\": \"<string>\",\n     \"key\": \"<string>\"\n    }\n   ]\n  }\n ],\n \"id\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "3d6eb14f-719a-47fe-8ec8-409d79703d28",
          "name": "Update metadata template",
          "request": {
            "name": "Update metadata template",
            "description": {
              "content": "Updates a metadata template.\n\nThe metadata template can only be updated if the template\nalready exists.\n\nThe update is applied atomically. If any errors occur during the\napplication of the operations, the metadata template remains unchanged.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "metadata_templates",
                ":scope",
                ":template_key",
                "schema"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "The scope of the metadata template",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "scope"
                },
                {
                  "description": {
                    "content": "The name of the metadata template",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "template_key"
                }
              ]
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "auth": {
              "type": "oauth2"
            },
            "body": {
              "mode": "raw",
              "raw": "[\n    {\n        \"op\": \"<string>\",\n        \"data\": \"schema type not provided\",\n        \"fieldKeys\": [\n            \"<string>\",\n            \"<string>\"\n        ],\n        \"enumOptionKeys\": [\n            \"<string>\",\n            \"<string>\"\n        ]\n    },\n    {\n        \"op\": \"<string>\",\n        \"data\": \"schema type not provided\",\n        \"fieldKeys\": [\n            \"<string>\",\n            \"<string>\"\n        ],\n        \"enumOptionKeys\": [\n            \"<string>\",\n            \"<string>\"\n        ]\n    }\n]"
            }
          },
          "response": [
            {
              "id": "3239a255-c3e6-4273-b14b-0a0bef55918f",
              "name": "Returns the updated metadata template, with the\ncustom template data included.",
              "originalRequest": {
                "url": {
                  "path": [
                    "metadata_templates",
                    "<string>",
                    "<string>",
                    "schema"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "[\n    {\n        \"op\": \"<string>\",\n        \"data\": \"schema type not provided\",\n        \"fieldKeys\": [\n            \"<string>\",\n            \"<string>\"\n        ],\n        \"enumOptionKeys\": [\n            \"<string>\",\n            \"<string>\"\n        ]\n    },\n    {\n        \"op\": \"<string>\",\n        \"data\": \"schema type not provided\",\n        \"fieldKeys\": [\n            \"<string>\",\n            \"<string>\"\n        ],\n        \"enumOptionKeys\": [\n            \"<string>\",\n            \"<string>\"\n        ]\n    }\n]"
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"scope\": \"<string>\",\n \"templateKey\": \"<string>\",\n \"displayName\": \"<string>\",\n \"hidden\": \"<boolean>\",\n \"fields\": [\n  {\n   \"type\": \"<string>\",\n   \"key\": \"<string>\",\n   \"displayName\": \"<string>\",\n   \"description\": \"<string>\",\n   \"hidden\": \"<boolean>\",\n   \"options\": [\n    {\n     \"id\": \"<string>\",\n     \"key\": \"<string>\"\n    },\n    {\n     \"id\": \"<string>\",\n     \"key\": \"<string>\"\n    }\n   ]\n  },\n  {\n   \"type\": \"<string>\",\n   \"key\": \"<string>\",\n   \"displayName\": \"<string>\",\n   \"description\": \"<string>\",\n   \"hidden\": \"<boolean>\",\n   \"options\": [\n    {\n     \"id\": \"<string>\",\n     \"key\": \"<string>\"\n    },\n    {\n     \"id\": \"<string>\",\n     \"key\": \"<string>\"\n    }\n   ]\n  }\n ],\n \"id\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "1993c965-e62c-4e1f-a58b-46ed0f433ba7",
              "name": "The request body contains an invalid metadata schema.",
              "originalRequest": {
                "url": {
                  "path": [
                    "metadata_templates",
                    "<string>",
                    "<string>",
                    "schema"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "[\n    {\n        \"op\": \"<string>\",\n        \"data\": \"schema type not provided\",\n        \"fieldKeys\": [\n            \"<string>\",\n            \"<string>\"\n        ],\n        \"enumOptionKeys\": [\n            \"<string>\",\n            \"<string>\"\n        ]\n    },\n    {\n        \"op\": \"<string>\",\n        \"data\": \"schema type not provided\",\n        \"fieldKeys\": [\n            \"<string>\",\n            \"<string>\"\n        ],\n        \"enumOptionKeys\": [\n            \"<string>\",\n            \"<string>\"\n        ]\n    }\n]"
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "f9ea6c47-12a2-4b47-a06b-90546ca6a3e4",
              "name": "The request body contains a scope that the user is not\nallowed to create templates for.",
              "originalRequest": {
                "url": {
                  "path": [
                    "metadata_templates",
                    "<string>",
                    "<string>",
                    "schema"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "[\n    {\n        \"op\": \"<string>\",\n        \"data\": \"schema type not provided\",\n        \"fieldKeys\": [\n            \"<string>\",\n            \"<string>\"\n        ],\n        \"enumOptionKeys\": [\n            \"<string>\",\n            \"<string>\"\n        ]\n    },\n    {\n        \"op\": \"<string>\",\n        \"data\": \"schema type not provided\",\n        \"fieldKeys\": [\n            \"<string>\",\n            \"<string>\"\n        ],\n        \"enumOptionKeys\": [\n            \"<string>\",\n            \"<string>\"\n        ]\n    }\n]"
                }
              },
              "status": "Forbidden",
              "code": 403,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "e709f65f-1b83-4715-9738-94dde7f34389",
              "name": "The requested template could not be found",
              "originalRequest": {
                "url": {
                  "path": [
                    "metadata_templates",
                    "<string>",
                    "<string>",
                    "schema"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "[\n    {\n        \"op\": \"<string>\",\n        \"data\": \"schema type not provided\",\n        \"fieldKeys\": [\n            \"<string>\",\n            \"<string>\"\n        ],\n        \"enumOptionKeys\": [\n            \"<string>\",\n            \"<string>\"\n        ]\n    },\n    {\n        \"op\": \"<string>\",\n        \"data\": \"schema type not provided\",\n        \"fieldKeys\": [\n            \"<string>\",\n            \"<string>\"\n        ],\n        \"enumOptionKeys\": [\n            \"<string>\",\n            \"<string>\"\n        ]\n    }\n]"
                }
              },
              "status": "Not Found",
              "code": 404,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "cee6a22f-b300-4079-ba53-9bdcd40fa0e1",
          "name": "Delete metadata template",
          "request": {
            "name": "Delete metadata template",
            "description": {
              "content": "Delete a metadata template and its instances.\nThis deletion is permanent and can not be reversed.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "metadata_templates",
                ":scope",
                ":template_key",
                "schema"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "The scope of the metadata template",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "scope"
                },
                {
                  "description": {
                    "content": "The name of the metadata template",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "template_key"
                }
              ]
            },
            "method": "DELETE",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "5af50088-1362-4a1a-961e-22e649d9b81c",
              "name": "Returns an empty response when the metadata\ntemplate is successfully deleted.",
              "originalRequest": {
                "url": {
                  "path": [
                    "metadata_templates",
                    "<string>",
                    "<string>",
                    "schema"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE",
                "body": {}
              },
              "status": "No Content",
              "code": 204,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "e9551b22-a616-43ed-af10-2e63d6826aca",
              "name": "Request body contains an invalid metadata schema.",
              "originalRequest": {
                "url": {
                  "path": [
                    "metadata_templates",
                    "<string>",
                    "<string>",
                    "schema"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "3108bde1-1717-4031-a860-4107ef52def1",
              "name": "Request body contains a scope that the user is not allowed to\ncreate a template for.",
              "originalRequest": {
                "url": {
                  "path": [
                    "metadata_templates",
                    "<string>",
                    "<string>",
                    "schema"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE",
                "body": {}
              },
              "status": "Forbidden",
              "code": 403,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "18686c8e-9cd2-46af-9d27-37d5b99761ec",
          "name": "Get a template by ID",
          "request": {
            "name": "Get a template by ID",
            "description": {
              "content": "Retrieves a metadata template by its ID.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "metadata_templates",
                ":template_id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "The ID of the template",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "template_id"
                }
              ]
            },
            "method": "GET",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "9d2a3429-710f-49a0-9867-bed9e3d9202f",
              "name": "Returns the metadata template matching the `scope`\nand `template` name.",
              "originalRequest": {
                "url": {
                  "path": [
                    "metadata_templates",
                    "<string>"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"scope\": \"<string>\",\n \"templateKey\": \"<string>\",\n \"displayName\": \"<string>\",\n \"hidden\": \"<boolean>\",\n \"fields\": [\n  {\n   \"type\": \"<string>\",\n   \"key\": \"<string>\",\n   \"displayName\": \"<string>\",\n   \"description\": \"<string>\",\n   \"hidden\": \"<boolean>\",\n   \"options\": [\n    {\n     \"id\": \"<string>\",\n     \"key\": \"<string>\"\n    },\n    {\n     \"id\": \"<string>\",\n     \"key\": \"<string>\"\n    }\n   ]\n  },\n  {\n   \"type\": \"<string>\",\n   \"key\": \"<string>\",\n   \"displayName\": \"<string>\",\n   \"description\": \"<string>\",\n   \"hidden\": \"<boolean>\",\n   \"options\": [\n    {\n     \"id\": \"<string>\",\n     \"key\": \"<string>\"\n    },\n    {\n     \"id\": \"<string>\",\n     \"key\": \"<string>\"\n    }\n   ]\n  }\n ],\n \"id\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "f2fbb150-9fc0-48ee-863f-4e41d34e01e9",
          "name": "List enterprise templates",
          "request": {
            "name": "List enterprise templates",
            "description": {
              "content": "Used to retrieve all metadata templates within a user's enterprise",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "metadata_templates",
                "enterprise"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "description": "The position marker at which to begin the response.\n\nThis requires `usemarker` to be set to true.",
                  "key": "marker",
                  "value": "<string>"
                },
                {
                  "description": "The maximum number of items to return per page.",
                  "key": "limit",
                  "value": "100"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "7a42f367-c8f4-4472-9d22-eb230c8aa26d",
              "name": "Returns all of the metadata templates within an enterprise\nand their corresponding schema.",
              "originalRequest": {
                "url": {
                  "path": [
                    "metadata_templates",
                    "enterprise"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "marker",
                      "value": "<string>"
                    },
                    {
                      "key": "limit",
                      "value": "100"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"limit\": \"<long>\",\n \"next_marker\": \"<long>\",\n \"prev_marker\": \"<long>\",\n \"entries\": [\n  {\n   \"scope\": \"<string>\",\n   \"templateKey\": \"<string>\",\n   \"displayName\": \"<string>\",\n   \"hidden\": \"<boolean>\",\n   \"fields\": [\n    {\n     \"type\": \"<string>\",\n     \"key\": \"<string>\",\n     \"displayName\": \"<string>\",\n     \"description\": \"<string>\",\n     \"hidden\": \"<boolean>\",\n     \"options\": [\n      {\n       \"id\": \"<string>\",\n       \"key\": \"<string>\"\n      },\n      {\n       \"id\": \"<string>\",\n       \"key\": \"<string>\"\n      }\n     ]\n    },\n    {\n     \"type\": \"<string>\",\n     \"key\": \"<string>\",\n     \"displayName\": \"<string>\",\n     \"description\": \"<string>\",\n     \"hidden\": \"<boolean>\",\n     \"options\": [\n      {\n       \"id\": \"<string>\",\n       \"key\": \"<string>\"\n      },\n      {\n       \"id\": \"<string>\",\n       \"key\": \"<string>\"\n      }\n     ]\n    }\n   ],\n   \"id\": \"<string>\"\n  },\n  {\n   \"scope\": \"<string>\",\n   \"templateKey\": \"<string>\",\n   \"displayName\": \"<string>\",\n   \"hidden\": \"<boolean>\",\n   \"fields\": [\n    {\n     \"type\": \"<string>\",\n     \"key\": \"<string>\",\n     \"displayName\": \"<string>\",\n     \"description\": \"<string>\",\n     \"hidden\": \"<boolean>\",\n     \"options\": [\n      {\n       \"id\": \"<string>\",\n       \"key\": \"<string>\"\n      },\n      {\n       \"id\": \"<string>\",\n       \"key\": \"<string>\"\n      }\n     ]\n    },\n    {\n     \"type\": \"<string>\",\n     \"key\": \"<string>\",\n     \"displayName\": \"<string>\",\n     \"description\": \"<string>\",\n     \"hidden\": \"<boolean>\",\n     \"options\": [\n      {\n       \"id\": \"<string>\",\n       \"key\": \"<string>\"\n      },\n      {\n       \"id\": \"<string>\",\n       \"key\": \"<string>\"\n      }\n     ]\n    }\n   ],\n   \"id\": \"<string>\"\n  }\n ]\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "be3b767f-ce37-4328-86f0-0ab9e73ee930",
          "name": "Create metadata template",
          "request": {
            "name": "Create metadata template",
            "description": {
              "content": "Creates a new metadata template that can be applied to files and folders.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "metadata_templates",
                "schema"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": {
              "type": "oauth2"
            },
            "body": {
              "mode": "raw",
              "raw": "{\n    \"scope\": \"<string>\",\n    \"templateKey\": \"<string>\",\n    \"displayName\": \"<string>\",\n    \"hidden\": \"<boolean>\",\n    \"fields\": [\n        {\n            \"type\": \"<string>\",\n            \"key\": \"<string>\",\n            \"displayName\": \"<string>\",\n            \"description\": \"<string>\",\n            \"hidden\": \"<boolean>\",\n            \"options\": [\n                {\n                    \"id\": \"<string>\",\n                    \"key\": \"<string>\"\n                },\n                {\n                    \"id\": \"<string>\",\n                    \"key\": \"<string>\"\n                }\n            ]\n        },\n        {\n            \"type\": \"<string>\",\n            \"key\": \"<string>\",\n            \"displayName\": \"<string>\",\n            \"description\": \"<string>\",\n            \"hidden\": \"<boolean>\",\n            \"options\": [\n                {\n                    \"id\": \"<string>\",\n                    \"key\": \"<string>\"\n                },\n                {\n                    \"id\": \"<string>\",\n                    \"key\": \"<string>\"\n                }\n            ]\n        }\n    ]\n}"
            }
          },
          "response": [
            {
              "id": "0b7e902c-e12d-43d9-a733-452a18ba2359",
              "name": "The schema representing the metadata template created.",
              "originalRequest": {
                "url": {
                  "path": [
                    "metadata_templates",
                    "schema"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"scope\": \"<string>\",\n    \"templateKey\": \"<string>\",\n    \"displayName\": \"<string>\",\n    \"hidden\": \"<boolean>\",\n    \"fields\": [\n        {\n            \"type\": \"<string>\",\n            \"key\": \"<string>\",\n            \"displayName\": \"<string>\",\n            \"description\": \"<string>\",\n            \"hidden\": \"<boolean>\",\n            \"options\": [\n                {\n                    \"id\": \"<string>\",\n                    \"key\": \"<string>\"\n                },\n                {\n                    \"id\": \"<string>\",\n                    \"key\": \"<string>\"\n                }\n            ]\n        },\n        {\n            \"type\": \"<string>\",\n            \"key\": \"<string>\",\n            \"displayName\": \"<string>\",\n            \"description\": \"<string>\",\n            \"hidden\": \"<boolean>\",\n            \"options\": [\n                {\n                    \"id\": \"<string>\",\n                    \"key\": \"<string>\"\n                },\n                {\n                    \"id\": \"<string>\",\n                    \"key\": \"<string>\"\n                }\n            ]\n        }\n    ]\n}"
                }
              },
              "status": "Created",
              "code": 201,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"scope\": \"<string>\",\n \"templateKey\": \"<string>\",\n \"displayName\": \"<string>\",\n \"hidden\": \"<boolean>\",\n \"fields\": [\n  {\n   \"type\": \"<string>\",\n   \"key\": \"<string>\",\n   \"displayName\": \"<string>\",\n   \"description\": \"<string>\",\n   \"hidden\": \"<boolean>\",\n   \"options\": [\n    {\n     \"id\": \"<string>\",\n     \"key\": \"<string>\"\n    },\n    {\n     \"id\": \"<string>\",\n     \"key\": \"<string>\"\n    }\n   ]\n  },\n  {\n   \"type\": \"<string>\",\n   \"key\": \"<string>\",\n   \"displayName\": \"<string>\",\n   \"description\": \"<string>\",\n   \"hidden\": \"<boolean>\",\n   \"options\": [\n    {\n     \"id\": \"<string>\",\n     \"key\": \"<string>\"\n    },\n    {\n     \"id\": \"<string>\",\n     \"key\": \"<string>\"\n    }\n   ]\n  }\n ],\n \"id\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "d245d2e5-fd38-4a59-8afe-15f201242196",
              "name": "Request body contains an invalid metadata schema.",
              "originalRequest": {
                "url": {
                  "path": [
                    "metadata_templates",
                    "schema"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"scope\": \"<string>\",\n    \"templateKey\": \"<string>\",\n    \"displayName\": \"<string>\",\n    \"hidden\": \"<boolean>\",\n    \"fields\": [\n        {\n            \"type\": \"<string>\",\n            \"key\": \"<string>\",\n            \"displayName\": \"<string>\",\n            \"description\": \"<string>\",\n            \"hidden\": \"<boolean>\",\n            \"options\": [\n                {\n                    \"id\": \"<string>\",\n                    \"key\": \"<string>\"\n                },\n                {\n                    \"id\": \"<string>\",\n                    \"key\": \"<string>\"\n                }\n            ]\n        },\n        {\n            \"type\": \"<string>\",\n            \"key\": \"<string>\",\n            \"displayName\": \"<string>\",\n            \"description\": \"<string>\",\n            \"hidden\": \"<boolean>\",\n            \"options\": [\n                {\n                    \"id\": \"<string>\",\n                    \"key\": \"<string>\"\n                },\n                {\n                    \"id\": \"<string>\",\n                    \"key\": \"<string>\"\n                }\n            ]\n        }\n    ]\n}"
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "2407ea78-01b8-47fe-848d-264f4c47e5c3",
              "name": "Request body contains a scope that the user is not allowed to\ncreate a template for.",
              "originalRequest": {
                "url": {
                  "path": [
                    "metadata_templates",
                    "schema"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"scope\": \"<string>\",\n    \"templateKey\": \"<string>\",\n    \"displayName\": \"<string>\",\n    \"hidden\": \"<boolean>\",\n    \"fields\": [\n        {\n            \"type\": \"<string>\",\n            \"key\": \"<string>\",\n            \"displayName\": \"<string>\",\n            \"description\": \"<string>\",\n            \"hidden\": \"<boolean>\",\n            \"options\": [\n                {\n                    \"id\": \"<string>\",\n                    \"key\": \"<string>\"\n                },\n                {\n                    \"id\": \"<string>\",\n                    \"key\": \"<string>\"\n                }\n            ]\n        },\n        {\n            \"type\": \"<string>\",\n            \"key\": \"<string>\",\n            \"displayName\": \"<string>\",\n            \"description\": \"<string>\",\n            \"hidden\": \"<boolean>\",\n            \"options\": [\n                {\n                    \"id\": \"<string>\",\n                    \"key\": \"<string>\"\n                },\n                {\n                    \"id\": \"<string>\",\n                    \"key\": \"<string>\"\n                }\n            ]\n        }\n    ]\n}"
                }
              },
              "status": "Forbidden",
              "code": 403,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        }
      ]
    },
    {
      "id": "0c416e8d-033e-45a2-bd23-56f34fe50ca4",
      "name": "Metadata Cascade (Beta)",
      "item": [
        {
          "id": "11605127-a6e2-42db-8092-0783e8f5638e",
          "name": "List cascade policies",
          "request": {
            "name": "List cascade policies",
            "description": {
              "content": "Retrieve a collection of metadata cascade policies\nwithin a given folder for the current enterprise.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "metadata_cascade_policies"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "description": "Specifies which folder to return policies for.",
                  "key": "folder_id",
                  "value": "<string>"
                },
                {
                  "description": "The ID of the enterprise ID for which to find metadata\ncascade policies. If not specified, it defaults to the\ncurrent enterprise.",
                  "key": "owner_enterprise_id",
                  "value": "<string>"
                },
                {
                  "description": "The position marker at which to begin the response.\n\nThis requires `usemarker` to be set to true.",
                  "key": "marker",
                  "value": "<string>"
                },
                {
                  "description": "The offset of the item at which to begin the response.",
                  "key": "offset",
                  "value": "<long>"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "98405b3e-b3f2-47d7-985f-8d094f697112",
              "name": "Returns a list of metadata cascade policies",
              "originalRequest": {
                "url": {
                  "path": [
                    "metadata_cascade_policies"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "folder_id",
                      "value": "<string>"
                    },
                    {
                      "key": "owner_enterprise_id",
                      "value": "<string>"
                    },
                    {
                      "key": "marker",
                      "value": "<string>"
                    },
                    {
                      "key": "offset",
                      "value": "<long>"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"limit\": \"<long>\",\n \"next_marker\": \"<long>\",\n \"prev_marker\": \"<long>\",\n \"entries\": [\n  {\n   \"id\": \"<string>\",\n   \"owner_enterprise\": {\n    \"type\": \"<string>\",\n    \"id\": \"<string>\"\n   },\n   \"parent\": {\n    \"type\": \"<string>\",\n    \"id\": \"<string>\"\n   },\n   \"scope\": \"<string>\",\n   \"templateKey\": \"<string>\"\n  },\n  {\n   \"id\": \"<string>\",\n   \"owner_enterprise\": {\n    \"type\": \"<string>\",\n    \"id\": \"<string>\"\n   },\n   \"parent\": {\n    \"type\": \"<string>\",\n    \"id\": \"<string>\"\n   },\n   \"scope\": \"<string>\",\n   \"templateKey\": \"<string>\"\n  }\n ]\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "8620c150-74b3-43f8-8090-0b9b3b63d9ad",
          "name": "Create cascade policy",
          "request": {
            "name": "Create cascade policy",
            "description": {
              "content": "Creates a new metadata cascade policy that applies a given\nmetadata template to a given folder and automatically\ncascades it down to its children.\n\nIn order for the policy to work, a metadata instance must first\nbe applied to the folder.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "metadata_cascade_policies"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": {
              "type": "oauth2"
            },
            "body": {
              "mode": "raw",
              "raw": "{\n    \"folder_id\": \"<string>\",\n    \"scope\": \"<string>\",\n    \"templateKey\": \"<string>\"\n}"
            }
          },
          "response": [
            {
              "id": "feaea78c-4176-49fe-bd33-354991c93eea",
              "name": "Returns a new of metadata cascade policy",
              "originalRequest": {
                "url": {
                  "path": [
                    "metadata_cascade_policies"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"folder_id\": \"<string>\",\n    \"scope\": \"<string>\",\n    \"templateKey\": \"<string>\"\n}"
                }
              },
              "status": "Created",
              "code": 201,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"id\": \"<string>\",\n \"owner_enterprise\": {\n  \"type\": \"<string>\",\n  \"id\": \"<string>\"\n },\n \"parent\": {\n  \"type\": \"<string>\",\n  \"id\": \"<string>\"\n },\n \"scope\": \"<string>\",\n \"templateKey\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "ccd7aaf6-45c6-436e-9531-2ef85040bf63",
          "name": "Get cascade policy",
          "request": {
            "name": "Get cascade policy",
            "description": {
              "content": "Retrieve a metadata cascade policy.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "metadata_cascade_policies",
                ":metadata_cascade_policy_id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "The ID of the metadata cascade policy.",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "metadata_cascade_policy_id"
                }
              ]
            },
            "method": "GET",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "9e85fb99-1aa3-4bdd-aaf4-7d3faf3fa8d7",
              "name": "Returns a list of metadata cascade policies",
              "originalRequest": {
                "url": {
                  "path": [
                    "metadata_cascade_policies",
                    "<string>"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"id\": \"<string>\",\n \"owner_enterprise\": {\n  \"type\": \"<string>\",\n  \"id\": \"<string>\"\n },\n \"parent\": {\n  \"type\": \"<string>\",\n  \"id\": \"<string>\"\n },\n \"scope\": \"<string>\",\n \"templateKey\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "7a596f11-626a-4911-b24c-9e7ac225bdef",
          "name": "Delete cascade policy",
          "request": {
            "name": "Delete cascade policy",
            "description": {
              "content": "Deletes a metadata cascade policy.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "metadata_cascade_policies",
                ":metadata_cascade_policy_id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "The ID of the metadata cascade policy.",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "metadata_cascade_policy_id"
                }
              ]
            },
            "method": "DELETE",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "692d7040-52fa-4032-a487-171344f46fae",
              "name": "Returns an empty response when the policy\nis successfully deleted.",
              "originalRequest": {
                "url": {
                  "path": [
                    "metadata_cascade_policies",
                    "<string>"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE",
                "body": {}
              },
              "status": "No Content",
              "code": 204,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            }
          ],
          "event": []
        },
        {
          "id": "e570abd7-ac3e-4bfe-af65-3ab4533b7254",
          "name": "Force apply cascade policy",
          "request": {
            "name": "Force apply cascade policy",
            "description": {
              "content": "If a policy already exists on a folder, this will apply that policy\nto all existing files and sub-folders within the target folder.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "metadata_cascade_policies",
                ":metadata_cascade_policy_id",
                "apply"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "The ID of the cascade policy.",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "metadata_cascade_policy_id"
                }
              ]
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": {
              "type": "oauth2"
            },
            "body": {
              "mode": "raw",
              "raw": "{\n    \"conflict_resolution\": \"<string>\"\n}"
            }
          },
          "response": [
            {
              "id": "8e337b02-169f-4309-9c68-fe1d599a4b49",
              "name": "Returns the metadata cascade policy when the policy has been\napplied.\n\nThe metadata cascade operation will be kicked off asynchronously.\nThe API call will return right away but before the cascade operation\nis complete. There is currently no way to check for when this\noperation has finished.",
              "originalRequest": {
                "url": {
                  "path": [
                    "metadata_cascade_policies",
                    "<string>",
                    "apply"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"conflict_resolution\": \"<string>\"\n}"
                }
              },
              "status": "Accepted",
              "code": 202,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"id\": \"<string>\",\n \"owner_enterprise\": {\n  \"type\": \"<string>\",\n  \"id\": \"<string>\"\n },\n \"parent\": {\n  \"type\": \"<string>\",\n  \"id\": \"<string>\"\n },\n \"scope\": \"<string>\",\n \"templateKey\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        }
      ]
    },
    {
      "id": "6f38892c-232a-46b4-9d48-3556eccf8565",
      "name": "Search",
      "item": [
        {
          "id": "152f6155-c1b4-4860-8190-42ee4d14f574",
          "name": "Search for content",
          "request": {
            "name": "Search for content",
            "description": {
              "content": "Searches for items that are available to the user or an entire enterprise.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "search"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "description": "The string to search for. This query is matched against item names,\ndescriptions, text content of files, and various other fields of\nthe different item types.",
                  "key": "query",
                  "value": "<string>"
                },
                {
                  "description": "Limits search results to a user scope.\n\nDefaults to `user_content` which limits the search to content\navailable to the current user\n\nSetting this to `enterprise_content` widens the search to content\navailable to the entire enterprise. To enable this scope for an\nadministrator, please reach out to support.",
                  "key": "scope",
                  "value": "<string>"
                },
                {
                  "description": "Limits search results to a comma-separated list of\nfile extensions.",
                  "key": "file_extensions",
                  "value": "<string>"
                },
                {
                  "description": "Limits search results to items created within\na given date range.\n\nDate ranges are defined as comma separated RFC3339\ntimestamps.\n\nIf the the start date is omitted (`,2014-05-17T13:35:01-07:00`)\nthe earliest known date will be used as the start date instead.\n\nIf the end date is omitted (`2014-05-15T13:35:01-07:00,`) the\ncurrent date will be used as the end date instead.",
                  "key": "created_at_range",
                  "value": "<string>"
                },
                {
                  "description": "Limits search results to items updated within\na given date range.\n\nDate ranges are defined as comma separated RFC3339\ntimestamps.\n\nIf the she start date is omitted (`,2014-05-17T13:35:01-07:00`)\nthe earliest known date will be used as the start date instead.\n\nIf the end date is omitted (`2014-05-15T13:35:01-07:00,`) the\ncurrent date will be used as the end date instead.",
                  "key": "updated_at_range",
                  "value": "<string>"
                },
                {
                  "description": "Limits search results to items within a given file size\nrange.\n\nFile size ranges are defined as comma separated byte sizes.\n\nThe upper and lower bound can be omitted to create open ranges.",
                  "key": "size_range",
                  "value": "<string>"
                },
                {
                  "description": "Limits search results to items owned\nby the given list of owners.\n\nOwners are defined as a comma separated list of user IDs.",
                  "key": "owner_user_ids",
                  "value": "<string>"
                },
                {
                  "description": "Limits search results to items within the given\nlist of folders.\n\nFolders are defined as a comma separated lists\nof folder IDs.\n\nSearch results will also include items within subfolders.",
                  "key": "ancestor_folder_ids",
                  "value": "<string>"
                },
                {
                  "description": "Limits search results to items with the given\ncontent types.\n\nContent types are defined as a comma separated lists\nof Box recognized content types.",
                  "key": "content_types",
                  "value": "<string>"
                },
                {
                  "description": "Limits search results to items of this type.",
                  "key": "type",
                  "value": "<string>"
                },
                {
                  "description": "Controls if search results include the trash.\n\nDefaults to `non_trashed_only`",
                  "key": "trash_content",
                  "value": "<string>"
                },
                {
                  "description": "Limits search results to items that match the\nmetadata template name and content.",
                  "key": "mdfilters",
                  "value": "[object Object],[object Object]"
                },
                {
                  "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response, unless explicitly specified.",
                  "key": "fields",
                  "value": "<string>,<string>"
                },
                {
                  "description": "The offset of the item at which to begin the response.",
                  "key": "offset",
                  "value": "<long>"
                },
                {
                  "description": "The maximum number of items to return per page.",
                  "key": "limit",
                  "value": "100"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "bcc769f0-2619-4b42-b376-8398818e2642",
              "name": "Returns a collection of search results. If there are no matching\nsearch results, the `entries` array will be empty.",
              "originalRequest": {
                "url": {
                  "path": [
                    "search"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "query",
                      "value": "<string>"
                    },
                    {
                      "key": "scope",
                      "value": "<string>"
                    },
                    {
                      "key": "file_extensions",
                      "value": "<string>"
                    },
                    {
                      "key": "created_at_range",
                      "value": "<string>"
                    },
                    {
                      "key": "updated_at_range",
                      "value": "<string>"
                    },
                    {
                      "key": "size_range",
                      "value": "<string>"
                    },
                    {
                      "key": "owner_user_ids",
                      "value": "<string>"
                    },
                    {
                      "key": "ancestor_folder_ids",
                      "value": "<string>"
                    },
                    {
                      "key": "content_types",
                      "value": "<string>"
                    },
                    {
                      "key": "type",
                      "value": "<string>"
                    },
                    {
                      "key": "trash_content",
                      "value": "<string>"
                    },
                    {
                      "key": "mdfilters",
                      "value": "[object Object],[object Object]"
                    },
                    {
                      "key": "fields",
                      "value": "<string>,<string>"
                    },
                    {
                      "key": "offset",
                      "value": "<long>"
                    },
                    {
                      "key": "limit",
                      "value": "100"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"total_count\": \"<long>\",\n \"limit\": \"<long>\",\n \"offset\": \"<long>\",\n \"order\": [\n  {\n   \"by\": \"<string>\",\n   \"direction\": \"<string>\"\n  },\n  {\n   \"by\": \"<string>\",\n   \"direction\": \"<string>\"\n  }\n ],\n \"entries\": [\n  {\n   \"id\": \"schema type not provided\",\n   \"type\": \"<string>\",\n   \"sequence_id\": \"<string>\",\n   \"etag\": \"<string>\",\n   \"name\": \"<string>\"\n  },\n  {\n   \"id\": \"schema type not provided\",\n   \"type\": \"<string>\",\n   \"sequence_id\": \"<string>\",\n   \"etag\": \"<string>\",\n   \"name\": \"<string>\"\n  }\n ]\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        }
      ]
    },
    {
      "id": "cc7787f3-36b2-407a-b733-4291e72cc3a2",
      "name": "Shared Links",
      "item": [
        {
          "id": "2e2713fa-3e13-4955-92f5-cd8fe0b205b3",
          "name": "Find item for shared link",
          "request": {
            "name": "Find item for shared link",
            "description": {
              "content": "Return the file or folder represented by a shared link.\n\nShared items are any files or folders that are represented by a shared link,\nwhich can originate within the current enterprise or within another one.\n\nThis endpoint allows an application to retrieve information about a\nshared item when only given a shared link.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "shared_items"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "BoxApi",
                "value": "<string>",
                "description": "A header containing the shared link and optional password for the\nshared link.\n\nThe format for this header is as follows.\n\n`shared_link=[link]&shared_link_password=[password]`"
              }
            ],
            "method": "GET",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "6a165ad3-7cd1-460b-85d6-819fc9aa5b7e",
              "name": "Returns a full file or folder object if the shared link is valid and\nthe user has access to it.",
              "originalRequest": {
                "url": {
                  "path": [
                    "shared_items"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "A header containing the shared link and optional password for the\nshared link.\n\nThe format for this header is as follows.\n\n`shared_link=[link]&shared_link_password=[password]`",
                      "type": "text/plain"
                    },
                    "key": "BoxApi",
                    "value": "<string>"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"sequence_id\": \"<string>\",\n \"etag\": \"<string>\",\n \"name\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        }
      ]
    },
    {
      "id": "244a999c-d0d9-400c-b38d-3ebe0cb0cd26",
      "name": "Web Links",
      "item": [
        {
          "id": "f976a329-38ce-410d-ba93-2122da94101b",
          "name": "Create web link",
          "request": {
            "name": "Create web link",
            "description": {
              "content": "Creates a web link object within a folder.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "web_links"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": {
              "type": "oauth2"
            },
            "body": {
              "mode": "raw",
              "raw": "{\n    \"parent\": {\n        \"id\": \"<string>\"\n    },\n    \"url\": \"<string>\",\n    \"name\": \"<string>\",\n    \"description\": \"<string>\"\n}"
            }
          },
          "response": [
            {
              "id": "c49f5421-62a2-46b6-a8d5-de107d2e3a86",
              "name": "Returns the newly created web link object.",
              "originalRequest": {
                "url": {
                  "path": [
                    "web_links"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"parent\": {\n        \"id\": \"<string>\"\n    },\n    \"url\": \"<string>\",\n    \"name\": \"<string>\",\n    \"description\": \"<string>\"\n}"
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"sequence_id\": \"<string>\",\n \"etag\": \"<string>\",\n \"name\": \"<string>\",\n \"url\": \"<string>\",\n \"parent\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"sequence_id\": \"<string>\",\n  \"etag\": \"<string>\",\n  \"name\": \"<string>\"\n },\n \"description\": \"<string>\",\n \"path_collection\": [\n  {\n   \"id\": \"schema type not provided\",\n   \"type\": \"<string>\",\n   \"sequence_id\": \"<string>\",\n   \"etag\": \"<string>\",\n   \"name\": \"<string>\"\n  },\n  {\n   \"id\": \"schema type not provided\",\n   \"type\": \"<string>\",\n   \"sequence_id\": \"<string>\",\n   \"etag\": \"<string>\",\n   \"name\": \"<string>\"\n  }\n ],\n \"created_at\": \"<dateTime>\",\n \"modified_at\": \"<dateTime>\",\n \"trashed_at\": \"<dateTime>\",\n \"purged_at\": \"<dateTime>\",\n \"created_by\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"modified_by\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"owned_by\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"shared_link\": {\n  \"url\": \"<url>\",\n  \"download_url\": \"<url>\",\n  \"vanity_url\": \"<url>\",\n  \"access\": \"<string>\",\n  \"effective_access\": \"<string>\",\n  \"effective_permission\": \"<string>\",\n  \"unshared_at\": \"<dateTime>\",\n  \"is_password_enabled\": \"<boolean>\",\n  \"permissions\": {\n   \"can_download\": \"<boolean>\",\n   \"can_preview\": \"<boolean>\"\n  },\n  \"download_count\": \"<integer>\",\n  \"preview_count\": \"<integer>\"\n },\n \"item_status\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "9fecda79-9314-4e83-9836-7874a9aa6e06",
          "name": "Get web link",
          "request": {
            "name": "Get web link",
            "description": {
              "content": "Retrieve information about a web link.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "web_links",
                ":web_link_id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "The ID of the web link.",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "web_link_id"
                }
              ]
            },
            "method": "GET",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "5e974720-c111-4192-9d68-9a26b3c97d5f",
              "name": "Returns the web link object.",
              "originalRequest": {
                "url": {
                  "path": [
                    "web_links",
                    "<string>"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"sequence_id\": \"<string>\",\n \"etag\": \"<string>\",\n \"name\": \"<string>\",\n \"url\": \"<string>\",\n \"parent\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"sequence_id\": \"<string>\",\n  \"etag\": \"<string>\",\n  \"name\": \"<string>\"\n },\n \"description\": \"<string>\",\n \"path_collection\": [\n  {\n   \"id\": \"schema type not provided\",\n   \"type\": \"<string>\",\n   \"sequence_id\": \"<string>\",\n   \"etag\": \"<string>\",\n   \"name\": \"<string>\"\n  },\n  {\n   \"id\": \"schema type not provided\",\n   \"type\": \"<string>\",\n   \"sequence_id\": \"<string>\",\n   \"etag\": \"<string>\",\n   \"name\": \"<string>\"\n  }\n ],\n \"created_at\": \"<dateTime>\",\n \"modified_at\": \"<dateTime>\",\n \"trashed_at\": \"<dateTime>\",\n \"purged_at\": \"<dateTime>\",\n \"created_by\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"modified_by\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"owned_by\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"shared_link\": {\n  \"url\": \"<url>\",\n  \"download_url\": \"<url>\",\n  \"vanity_url\": \"<url>\",\n  \"access\": \"<string>\",\n  \"effective_access\": \"<string>\",\n  \"effective_permission\": \"<string>\",\n  \"unshared_at\": \"<dateTime>\",\n  \"is_password_enabled\": \"<boolean>\",\n  \"permissions\": {\n   \"can_download\": \"<boolean>\",\n   \"can_preview\": \"<boolean>\"\n  },\n  \"download_count\": \"<integer>\",\n  \"preview_count\": \"<integer>\"\n },\n \"item_status\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "ab6e3f14-92ba-4ac7-98d1-44abfe6dd247",
          "name": "Update web link",
          "request": {
            "name": "Update web link",
            "description": {
              "content": "Updates a web link object.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "web_links",
                ":web_link_id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "The ID of the web link.",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "web_link_id"
                }
              ]
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "auth": {
              "type": "oauth2"
            },
            "body": {
              "mode": "raw",
              "raw": "{\n    \"url\": \"<string>\",\n    \"parent\": {\n        \"id\": \"<string>\"\n    },\n    \"name\": \"<string>\",\n    \"description\": \"<string>\"\n}"
            }
          },
          "response": [
            {
              "id": "165e86a0-fed4-4652-9e5b-d10bca706bea",
              "name": "Returns the updated web link object.",
              "originalRequest": {
                "url": {
                  "path": [
                    "web_links",
                    "<string>"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"url\": \"<string>\",\n    \"parent\": {\n        \"id\": \"<string>\"\n    },\n    \"name\": \"<string>\",\n    \"description\": \"<string>\"\n}"
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"sequence_id\": \"<string>\",\n \"etag\": \"<string>\",\n \"name\": \"<string>\",\n \"url\": \"<string>\",\n \"parent\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"sequence_id\": \"<string>\",\n  \"etag\": \"<string>\",\n  \"name\": \"<string>\"\n },\n \"description\": \"<string>\",\n \"path_collection\": [\n  {\n   \"id\": \"schema type not provided\",\n   \"type\": \"<string>\",\n   \"sequence_id\": \"<string>\",\n   \"etag\": \"<string>\",\n   \"name\": \"<string>\"\n  },\n  {\n   \"id\": \"schema type not provided\",\n   \"type\": \"<string>\",\n   \"sequence_id\": \"<string>\",\n   \"etag\": \"<string>\",\n   \"name\": \"<string>\"\n  }\n ],\n \"created_at\": \"<dateTime>\",\n \"modified_at\": \"<dateTime>\",\n \"trashed_at\": \"<dateTime>\",\n \"purged_at\": \"<dateTime>\",\n \"created_by\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"modified_by\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"owned_by\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"shared_link\": {\n  \"url\": \"<url>\",\n  \"download_url\": \"<url>\",\n  \"vanity_url\": \"<url>\",\n  \"access\": \"<string>\",\n  \"effective_access\": \"<string>\",\n  \"effective_permission\": \"<string>\",\n  \"unshared_at\": \"<dateTime>\",\n  \"is_password_enabled\": \"<boolean>\",\n  \"permissions\": {\n   \"can_download\": \"<boolean>\",\n   \"can_preview\": \"<boolean>\"\n  },\n  \"download_count\": \"<integer>\",\n  \"preview_count\": \"<integer>\"\n },\n \"item_status\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "4d4ad6cd-21d4-47e0-b239-ec2ee9965fd6",
          "name": "Delete web link",
          "request": {
            "name": "Delete web link",
            "description": {
              "content": "Deletes a web link.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "web_links",
                ":web_link_id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "The ID of the web link.",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "web_link_id"
                }
              ]
            },
            "method": "DELETE",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "dab0f6a7-d6b8-4707-9727-b5cbcb745722",
              "name": "An empty response will be returned when the web link\nwas successfully deleted.",
              "originalRequest": {
                "url": {
                  "path": [
                    "web_links",
                    "<string>"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE",
                "body": {}
              },
              "status": "No Content",
              "code": 204,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            }
          ],
          "event": []
        },
        {
          "id": "696521a5-cb70-4cdc-8b68-04ef7a9c02f7",
          "name": "Get trashed web link",
          "request": {
            "name": "Get trashed web link",
            "description": {
              "content": "Retrieves a web link that has been moved to the trash.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "web_links",
                ":web_link_id",
                "trash"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response, unless explicitly specified.",
                  "key": "fields",
                  "value": "<string>,<string>"
                }
              ],
              "variable": [
                {
                  "description": {
                    "content": "The ID of the web link.",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "web_link_id"
                }
              ]
            },
            "method": "GET",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "7cef243a-8301-4e01-b93a-6c1546f759df",
              "name": "Returns the web link that was trashed,\nincluding information about when the it\nwas moved to the trash.",
              "originalRequest": {
                "url": {
                  "path": [
                    "web_links",
                    "<string>",
                    "trash"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "<string>,<string>"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"sequence_id\": \"<string>\",\n \"etag\": \"<string>\",\n \"name\": \"<string>\",\n \"created_at\": \"<dateTime>\",\n \"modified_at\": \"<dateTime>\",\n \"description\": {},\n \"size\": \"<long>\",\n \"path_collection\": {\n  \"total_count\": \"<long>\",\n  \"entries\": [\n   {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\"\n   },\n   {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\"\n   }\n  ]\n },\n \"created_by\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"modified_by\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"trashed_at\": \"<dateTime>\",\n \"purged_at\": \"<dateTime>\",\n \"content_created_at\": \"<dateTime>\",\n \"content_modified_at\": \"<dateTime>\",\n \"expires_at\": \"<dateTime>\",\n \"owned_by\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"shared_link\": {\n  \"url\": \"<url>\",\n  \"download_url\": \"<url>\",\n  \"vanity_url\": \"<url>\",\n  \"access\": \"<string>\",\n  \"effective_access\": \"<string>\",\n  \"effective_permission\": \"<string>\",\n  \"unshared_at\": \"<dateTime>\",\n  \"is_password_enabled\": \"<boolean>\",\n  \"permissions\": {\n   \"can_download\": \"<boolean>\",\n   \"can_preview\": \"<boolean>\"\n  },\n  \"download_count\": \"<integer>\",\n  \"preview_count\": \"<integer>\"\n },\n \"folder_upload_email\": {\n  \"access\": \"<string>\",\n  \"email\": \"<email>\"\n },\n \"parent\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"sequence_id\": \"<string>\",\n  \"etag\": \"<string>\",\n  \"name\": \"<string>\"\n },\n \"item_status\": \"<string>\",\n \"item_collection\": {\n  \"total_count\": \"<long>\",\n  \"limit\": \"<long>\",\n  \"offset\": \"<long>\",\n  \"order\": [\n   {\n    \"by\": \"<string>\",\n    \"direction\": \"<string>\"\n   },\n   {\n    \"by\": \"<string>\",\n    \"direction\": \"<string>\"\n   }\n  ],\n  \"entries\": [\n   {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\"\n   },\n   {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\"\n   }\n  ]\n },\n \"sync_state\": {},\n \"has_collaborations\": \"<boolean>\",\n \"permissions\": {\n  \"can_delete\": \"<boolean>\",\n  \"can_download\": \"<boolean>\",\n  \"can_invite_collaborator\": \"<boolean>\",\n  \"can_rename\": \"<boolean>\",\n  \"can_set_share_access\": \"<boolean>\",\n  \"can_share\": \"<boolean>\",\n  \"can_upload\": \"<boolean>\"\n },\n \"tags\": {},\n \"can_non_owners_invite\": {},\n \"is_externally_owned\": \"<boolean>\",\n \"is_collaboration_restricted_to_enterprise\": {},\n \"allowed_shared_link_access_levels\": \"company\",\n \"allowed_invitee_roles\": \"viewer uploader\",\n \"watermark_info\": {\n  \"is_watermarked\": \"<boolean>\"\n }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "0f6960cd-b4c7-4d29-8b6a-58860bf1252b",
              "name": "Returns an error if the web link is not in the trash.",
              "originalRequest": {
                "url": {
                  "path": [
                    "web_links",
                    "<string>",
                    "trash"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "<string>,<string>"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Not Found",
              "code": 404,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        }
      ]
    },
    {
      "id": "0f95fb67-10a5-4d05-824b-c3b5dbcc0713",
      "name": "Users",
      "item": [
        {
          "id": "9ce5e63b-11e9-4866-90f4-28cb521298c5",
          "name": "List enterprise users",
          "request": {
            "name": "List enterprise users",
            "description": {
              "content": "Returns a list of all users for the Enterprise along with their user_id,\npublic_name, and login.\n\nThe application and the authenticated user need to\nhave the permission to look up users in the entire\nenterprise.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "users"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "description": "Limits the results to only users who's `name` or\n`login` start with the search term.\n\nFor externally managed users, the search term needs\nto completely match the in order to find the user, and\nit will only return one user at a time.",
                  "key": "filter_term",
                  "value": "<string>"
                },
                {
                  "description": "Limits the results to the kind  of user specified.\n\n* `all` returns every kind of user for whom the\n  `login` or `name` partially matches the\n  `filter_term`. It will only return an external user\n  if the login matches the `filter_term` completely,\n  and in that case it will only return that user.\n* `managed` returns all managed and app users for whom\n  the `login` or `name` partially matches the\n  `filter_term`.\n* `external` returns all external users for whom the\n  `login` matches the `filter_term` exactly.",
                  "key": "user_type",
                  "value": "<string>"
                },
                {
                  "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response, unless explicitly specified.",
                  "key": "fields",
                  "value": "<string>,<string>"
                },
                {
                  "description": "The offset of the item at which to begin the response.",
                  "key": "offset",
                  "value": "<long>"
                },
                {
                  "description": "The maximum number of items to return per page.",
                  "key": "limit",
                  "value": "100"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "7a060b04-a804-41a9-a199-b9554ba73e83",
              "name": "Returns all of the users in the enterprise.",
              "originalRequest": {
                "url": {
                  "path": [
                    "users"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "filter_term",
                      "value": "<string>"
                    },
                    {
                      "key": "user_type",
                      "value": "<string>"
                    },
                    {
                      "key": "fields",
                      "value": "<string>,<string>"
                    },
                    {
                      "key": "offset",
                      "value": "<long>"
                    },
                    {
                      "key": "limit",
                      "value": "100"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"total_count\": \"<long>\",\n \"limit\": \"<long>\",\n \"offset\": \"<long>\",\n \"order\": [\n  {\n   \"by\": \"<string>\",\n   \"direction\": \"<string>\"\n  },\n  {\n   \"by\": \"<string>\",\n   \"direction\": \"<string>\"\n  }\n ],\n \"entries\": [\n  {\n   \"id\": \"schema type not provided\",\n   \"type\": \"<string>\",\n   \"name\": \"<string>\",\n   \"login\": \"<email>\",\n   \"created_at\": \"<dateTime>\",\n   \"modified_at\": \"<dateTime>\",\n   \"language\": \"<ISO639-1-BOX>\",\n   \"timezone\": \"<timezone>\",\n   \"space_amount\": \"<integer>\",\n   \"space_used\": \"<integer>\",\n   \"max_upload_size\": \"<integer>\",\n   \"status\": \"<string>\",\n   \"job_title\": \"<string>\",\n   \"phone\": \"<string>\",\n   \"address\": \"<string>\",\n   \"avatar_url\": \"<string>\",\n   \"role\": \"<string>\",\n   \"tracking_codes\": [\n    {\n     \"type\": \"<string>\",\n     \"name\": \"<string>\",\n     \"value\": \"<string>\"\n    },\n    {\n     \"type\": \"<string>\",\n     \"name\": \"<string>\",\n     \"value\": \"<string>\"\n    }\n   ],\n   \"can_see_managed_users\": \"<boolean>\",\n   \"is_sync_enabled\": \"<boolean>\",\n   \"is_external_collab_restricted\": \"<boolean>\",\n   \"is_exempt_from_device_limits\": \"<boolean>\",\n   \"is_exempt_from_login_verification\": \"<boolean>\",\n   \"enterprise\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\"\n   },\n   \"my_tags\": [\n    \"<string>\",\n    \"<string>\"\n   ],\n   \"hostname\": \"<string>\",\n   \"is_platform_access_only\": \"<boolean>\",\n   \"external_app_user_id\": \"<string>\"\n  },\n  {\n   \"id\": \"schema type not provided\",\n   \"type\": \"<string>\",\n   \"name\": \"<string>\",\n   \"login\": \"<email>\",\n   \"created_at\": \"<dateTime>\",\n   \"modified_at\": \"<dateTime>\",\n   \"language\": \"<ISO639-1-BOX>\",\n   \"timezone\": \"<timezone>\",\n   \"space_amount\": \"<integer>\",\n   \"space_used\": \"<integer>\",\n   \"max_upload_size\": \"<integer>\",\n   \"status\": \"<string>\",\n   \"job_title\": \"<string>\",\n   \"phone\": \"<string>\",\n   \"address\": \"<string>\",\n   \"avatar_url\": \"<string>\",\n   \"role\": \"<string>\",\n   \"tracking_codes\": [\n    {\n     \"type\": \"<string>\",\n     \"name\": \"<string>\",\n     \"value\": \"<string>\"\n    },\n    {\n     \"type\": \"<string>\",\n     \"name\": \"<string>\",\n     \"value\": \"<string>\"\n    }\n   ],\n   \"can_see_managed_users\": \"<boolean>\",\n   \"is_sync_enabled\": \"<boolean>\",\n   \"is_external_collab_restricted\": \"<boolean>\",\n   \"is_exempt_from_device_limits\": \"<boolean>\",\n   \"is_exempt_from_login_verification\": \"<boolean>\",\n   \"enterprise\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\"\n   },\n   \"my_tags\": [\n    \"<string>\",\n    \"<string>\"\n   ],\n   \"hostname\": \"<string>\",\n   \"is_platform_access_only\": \"<boolean>\",\n   \"external_app_user_id\": \"<string>\"\n  }\n ]\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "ae653a2f-5069-4061-ab7c-516350755738",
          "name": "Create user",
          "request": {
            "name": "Create user",
            "description": {
              "content": "Creates a new managed user in an enterprise. This endpoint\nis only available to users and applications with the right\nadmin permissions.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "users"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response, unless explicitly specified.",
                  "key": "fields",
                  "value": "<string>,<string>"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": {
              "type": "oauth2"
            },
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"<string>\",\n    \"login\": \"<string>\",\n    \"is_platform_access_only\": \"<boolean>\",\n    \"role\": \"<string>\",\n    \"language\": \"<ISO639-1-BOX>\",\n    \"is_sync_enabled\": \"<boolean>\",\n    \"job_title\": \"<string>\",\n    \"phone\": \"<string>\",\n    \"address\": \"<string>\",\n    \"space_amount\": \"<integer>\",\n    \"tracking_codes\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"can_see_managed_users\": \"<boolean>\",\n    \"timezone\": \"<timezone>\",\n    \"is_external_collab_restricted\": \"<boolean>\",\n    \"is_exempt_from_device_limits\": \"<boolean>\",\n    \"is_exempt_from_login_verification\": \"<boolean>\",\n    \"status\": \"<string>\"\n}"
            }
          },
          "response": [
            {
              "id": "e75dbaa1-16d1-485b-a025-cd062edaa2e3",
              "name": "Returns a user object for the newly created user.",
              "originalRequest": {
                "url": {
                  "path": [
                    "users"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "<string>,<string>"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"<string>\",\n    \"login\": \"<string>\",\n    \"is_platform_access_only\": \"<boolean>\",\n    \"role\": \"<string>\",\n    \"language\": \"<ISO639-1-BOX>\",\n    \"is_sync_enabled\": \"<boolean>\",\n    \"job_title\": \"<string>\",\n    \"phone\": \"<string>\",\n    \"address\": \"<string>\",\n    \"space_amount\": \"<integer>\",\n    \"tracking_codes\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"can_see_managed_users\": \"<boolean>\",\n    \"timezone\": \"<timezone>\",\n    \"is_external_collab_restricted\": \"<boolean>\",\n    \"is_exempt_from_device_limits\": \"<boolean>\",\n    \"is_exempt_from_login_verification\": \"<boolean>\",\n    \"status\": \"<string>\"\n}"
                }
              },
              "status": "Created",
              "code": 201,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"name\": \"<string>\",\n \"login\": \"<email>\",\n \"created_at\": \"<dateTime>\",\n \"modified_at\": \"<dateTime>\",\n \"language\": \"<ISO639-1-BOX>\",\n \"timezone\": \"<timezone>\",\n \"space_amount\": \"<integer>\",\n \"space_used\": \"<integer>\",\n \"max_upload_size\": \"<integer>\",\n \"status\": \"<string>\",\n \"job_title\": \"<string>\",\n \"phone\": \"<string>\",\n \"address\": \"<string>\",\n \"avatar_url\": \"<string>\",\n \"role\": \"<string>\",\n \"tracking_codes\": [\n  {\n   \"type\": \"<string>\",\n   \"name\": \"<string>\",\n   \"value\": \"<string>\"\n  },\n  {\n   \"type\": \"<string>\",\n   \"name\": \"<string>\",\n   \"value\": \"<string>\"\n  }\n ],\n \"can_see_managed_users\": \"<boolean>\",\n \"is_sync_enabled\": \"<boolean>\",\n \"is_external_collab_restricted\": \"<boolean>\",\n \"is_exempt_from_device_limits\": \"<boolean>\",\n \"is_exempt_from_login_verification\": \"<boolean>\",\n \"enterprise\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\"\n },\n \"my_tags\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"hostname\": \"<string>\",\n \"is_platform_access_only\": \"<boolean>\",\n \"external_app_user_id\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "da46bf62-d2a4-4dc5-a156-7bd0937f75cf",
          "name": "Get authenticated user",
          "request": {
            "name": "Get authenticated user",
            "description": {
              "content": "Retrieves information about the user who is currently authenticated.\n\nIn the case of a 3-legged OAuth2, client-side authenticated application\nthis will be the user who authorized the app.\n\nIn the case of a JWT, server-side authenticated application\nthis will be the service account that belongs to the application\nby default.\n\nUse the `As-User` header to change who this API call is made on behalf of.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "users",
                "me"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response, unless explicitly specified.",
                  "key": "fields",
                  "value": "<string>,<string>"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "9af19fb8-4534-4901-906d-60c1afe66c15",
              "name": "Returns a single user object.",
              "originalRequest": {
                "url": {
                  "path": [
                    "users",
                    "me"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "<string>,<string>"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"name\": \"<string>\",\n \"login\": \"<email>\",\n \"created_at\": \"<dateTime>\",\n \"modified_at\": \"<dateTime>\",\n \"language\": \"<ISO639-1-BOX>\",\n \"timezone\": \"<timezone>\",\n \"space_amount\": \"<integer>\",\n \"space_used\": \"<integer>\",\n \"max_upload_size\": \"<integer>\",\n \"status\": \"<string>\",\n \"job_title\": \"<string>\",\n \"phone\": \"<string>\",\n \"address\": \"<string>\",\n \"avatar_url\": \"<string>\",\n \"role\": \"<string>\",\n \"tracking_codes\": [\n  {\n   \"type\": \"<string>\",\n   \"name\": \"<string>\",\n   \"value\": \"<string>\"\n  },\n  {\n   \"type\": \"<string>\",\n   \"name\": \"<string>\",\n   \"value\": \"<string>\"\n  }\n ],\n \"can_see_managed_users\": \"<boolean>\",\n \"is_sync_enabled\": \"<boolean>\",\n \"is_external_collab_restricted\": \"<boolean>\",\n \"is_exempt_from_device_limits\": \"<boolean>\",\n \"is_exempt_from_login_verification\": \"<boolean>\",\n \"enterprise\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\"\n },\n \"my_tags\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"hostname\": \"<string>\",\n \"is_platform_access_only\": \"<boolean>\",\n \"external_app_user_id\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "f42b9eff-0d2c-4bf2-a498-cee3e8b558e5",
          "name": "Get user",
          "request": {
            "name": "Get user",
            "description": {
              "content": "Retrieves information about a user in the enterprise.\n\nThe application and the authenticated user need to\nhave the permission to look up users in the entire\nenterprise.\n\nThis endpoint also returns a limited set of information\nfor external users who are collaborated on content\nowned by the enterprise for authenticated users with the\nright scopes. In this case, disallowed fields will return\nnull instead.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "users",
                ":user_id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response, unless explicitly specified.",
                  "key": "fields",
                  "value": "<string>,<string>"
                }
              ],
              "variable": [
                {
                  "description": {
                    "content": "The ID of the user.",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "user_id"
                }
              ]
            },
            "method": "GET",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "ec655681-f0ff-4410-8762-160b7a773b28",
              "name": "Returns a single user object.\n\n[Some fields are optional](#user) and need to be explicitly\nrequested using the [fields](#get-users-id--request--fields)\nparameter.",
              "originalRequest": {
                "url": {
                  "path": [
                    "users",
                    "<string>"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "<string>,<string>"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"name\": \"<string>\",\n \"login\": \"<email>\",\n \"created_at\": \"<dateTime>\",\n \"modified_at\": \"<dateTime>\",\n \"language\": \"<ISO639-1-BOX>\",\n \"timezone\": \"<timezone>\",\n \"space_amount\": \"<integer>\",\n \"space_used\": \"<integer>\",\n \"max_upload_size\": \"<integer>\",\n \"status\": \"<string>\",\n \"job_title\": \"<string>\",\n \"phone\": \"<string>\",\n \"address\": \"<string>\",\n \"avatar_url\": \"<string>\",\n \"role\": \"<string>\",\n \"tracking_codes\": [\n  {\n   \"type\": \"<string>\",\n   \"name\": \"<string>\",\n   \"value\": \"<string>\"\n  },\n  {\n   \"type\": \"<string>\",\n   \"name\": \"<string>\",\n   \"value\": \"<string>\"\n  }\n ],\n \"can_see_managed_users\": \"<boolean>\",\n \"is_sync_enabled\": \"<boolean>\",\n \"is_external_collab_restricted\": \"<boolean>\",\n \"is_exempt_from_device_limits\": \"<boolean>\",\n \"is_exempt_from_login_verification\": \"<boolean>\",\n \"enterprise\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\"\n },\n \"my_tags\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"hostname\": \"<string>\",\n \"is_platform_access_only\": \"<boolean>\",\n \"external_app_user_id\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "d0461bd7-0e7b-43d0-ad64-076c9c85fee2",
          "name": "Update user",
          "request": {
            "name": "Update user",
            "description": {
              "content": "Updates a managed user in an enterprise. This endpoint\nis only available to users and applications with the right\nadmin permissions.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "users",
                ":user_id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response, unless explicitly specified.",
                  "key": "fields",
                  "value": "<string>,<string>"
                }
              ],
              "variable": [
                {
                  "description": {
                    "content": "The ID of the user.",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "user_id"
                }
              ]
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "auth": {
              "type": "oauth2"
            },
            "body": {
              "mode": "raw",
              "raw": "{\n    \"enterprise\": \"<string>\",\n    \"notify\": \"<boolean>\",\n    \"name\": \"<string>\",\n    \"login\": \"<string>\",\n    \"role\": \"<string>\",\n    \"language\": \"<ISO639-1-BOX>\",\n    \"is_sync_enabled\": \"<boolean>\",\n    \"job_title\": \"<string>\",\n    \"phone\": \"<string>\",\n    \"address\": \"<string>\",\n    \"tracking_codes\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"can_see_managed_users\": \"<boolean>\",\n    \"timezone\": \"<timezone>\",\n    \"is_external_collab_restricted\": \"<boolean>\",\n    \"is_exempt_from_device_limits\": \"<boolean>\",\n    \"is_exempt_from_login_verification\": \"<boolean>\",\n    \"is_password_reset_required\": \"<boolean>\",\n    \"status\": \"<string>\"\n}"
            }
          },
          "response": [
            {
              "id": "ad4945fe-5ee7-431d-8d2a-3228a80320a7",
              "name": "Returns the updated user object.",
              "originalRequest": {
                "url": {
                  "path": [
                    "users",
                    "<string>"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "<string>,<string>"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"enterprise\": \"<string>\",\n    \"notify\": \"<boolean>\",\n    \"name\": \"<string>\",\n    \"login\": \"<string>\",\n    \"role\": \"<string>\",\n    \"language\": \"<ISO639-1-BOX>\",\n    \"is_sync_enabled\": \"<boolean>\",\n    \"job_title\": \"<string>\",\n    \"phone\": \"<string>\",\n    \"address\": \"<string>\",\n    \"tracking_codes\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"can_see_managed_users\": \"<boolean>\",\n    \"timezone\": \"<timezone>\",\n    \"is_external_collab_restricted\": \"<boolean>\",\n    \"is_exempt_from_device_limits\": \"<boolean>\",\n    \"is_exempt_from_login_verification\": \"<boolean>\",\n    \"is_password_reset_required\": \"<boolean>\",\n    \"status\": \"<string>\"\n}"
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"name\": \"<string>\",\n \"login\": \"<email>\",\n \"created_at\": \"<dateTime>\",\n \"modified_at\": \"<dateTime>\",\n \"language\": \"<ISO639-1-BOX>\",\n \"timezone\": \"<timezone>\",\n \"space_amount\": \"<integer>\",\n \"space_used\": \"<integer>\",\n \"max_upload_size\": \"<integer>\",\n \"status\": \"<string>\",\n \"job_title\": \"<string>\",\n \"phone\": \"<string>\",\n \"address\": \"<string>\",\n \"avatar_url\": \"<string>\",\n \"role\": \"<string>\",\n \"tracking_codes\": [\n  {\n   \"type\": \"<string>\",\n   \"name\": \"<string>\",\n   \"value\": \"<string>\"\n  },\n  {\n   \"type\": \"<string>\",\n   \"name\": \"<string>\",\n   \"value\": \"<string>\"\n  }\n ],\n \"can_see_managed_users\": \"<boolean>\",\n \"is_sync_enabled\": \"<boolean>\",\n \"is_external_collab_restricted\": \"<boolean>\",\n \"is_exempt_from_device_limits\": \"<boolean>\",\n \"is_exempt_from_login_verification\": \"<boolean>\",\n \"enterprise\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\"\n },\n \"my_tags\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"hostname\": \"<string>\",\n \"is_platform_access_only\": \"<boolean>\",\n \"external_app_user_id\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "30416a28-3a3e-45e5-88bb-32883e046c98",
          "name": "Delete user",
          "request": {
            "name": "Delete user",
            "description": {
              "content": "Deletes a user. By default this will fail if the user\nstill owns any content. Move their owned content first\nbefore proceeding, or use the `force` field to delete\nthe user and their files.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "users",
                ":user_id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "description": "Whether the user will receive email notification of\nthe deletion",
                  "key": "notify",
                  "value": "<boolean>"
                },
                {
                  "description": "Whether the user should be deleted even if this user\nstill own files",
                  "key": "force",
                  "value": "<boolean>"
                }
              ],
              "variable": [
                {
                  "description": {
                    "content": "The ID of the user.",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "user_id"
                }
              ]
            },
            "method": "DELETE",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "d31d09a9-3ebd-404a-9f85-51e99c74e9a4",
              "name": "Removes the user and returns an empty response.",
              "originalRequest": {
                "url": {
                  "path": [
                    "users",
                    "<string>"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "notify",
                      "value": "<boolean>"
                    },
                    {
                      "key": "force",
                      "value": "<boolean>"
                    }
                  ],
                  "variable": []
                },
                "method": "DELETE",
                "body": {}
              },
              "status": "No Content",
              "code": 204,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            }
          ],
          "event": []
        },
        {
          "id": "27fa5a59-6bf0-4472-ad45-259d30d10302",
          "name": "Get user avatar",
          "request": {
            "name": "Get user avatar",
            "description": {
              "content": "Retrieves an image of a the user's avatar.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "users",
                ":user_id",
                "avatar"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "The ID of the user.",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "user_id"
                }
              ]
            },
            "method": "GET",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "617b2927-81da-4936-be78-19b358736c1c",
              "name": "When an avatar can be found for the user the\nimage data will be returned in the body of the\nresponse.",
              "originalRequest": {
                "url": {
                  "path": [
                    "users",
                    "<string>",
                    "avatar"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "image/jpg"
                }
              ],
              "body": "<binary>",
              "cookie": [],
              "_postman_previewlanguage": "text"
            }
          ],
          "event": []
        },
        {
          "id": "06dbe878-15e6-420e-8c23-344aed95df4b",
          "name": "Transfer owned folders",
          "request": {
            "name": "Transfer owned folders",
            "description": {
              "content": "Move all of the items owned by a user into a\nnew folder in another user’s account.\n\nOnly the root folder (`0`) can be transferred.\n\nFolders can only be moved across users by users with administrative\npermissions.\n\nThis call will be performed synchronously which might lead to a slow response\nwhen the source user has a large number of items in all of its folders.\n\nIf the destination path has a metadata cascade policy attached to any of\nthe parent folders, a metadata cascade operation will be kicked off\nasynchronously.\n\nThere is currently no way to check for when this operation is finished.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "users",
                ":user_id",
                "folders",
                ":folder_id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response, unless explicitly specified.",
                  "key": "fields",
                  "value": "<string>,<string>"
                },
                {
                  "description": "Determines if users should receive email notification\nfor the action performed.",
                  "key": "notify",
                  "value": "<boolean>"
                }
              ],
              "variable": [
                {
                  "description": {
                    "content": "The ID of the user.",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "user_id"
                },
                {
                  "description": {
                    "content": "The unique identifier that represent a folder.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the url `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder of a Box account is\nalways represented by the ID `0`.",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "folder_id"
                }
              ]
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "auth": {
              "type": "oauth2"
            },
            "body": {
              "mode": "raw",
              "raw": "{\n    \"enterprise\": {\n        \"id\": \"<string>\"\n    }\n}"
            }
          },
          "response": [
            {
              "id": "cc132d19-4cd3-47c2-a0b4-791262e71bed",
              "name": "Returns the information for the newly created\ndestination folder.",
              "originalRequest": {
                "url": {
                  "path": [
                    "users",
                    "<string>",
                    "folders",
                    "<string>"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "<string>,<string>"
                    },
                    {
                      "key": "notify",
                      "value": "<boolean>"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"enterprise\": {\n        \"id\": \"<string>\"\n    }\n}"
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"sequence_id\": \"<string>\",\n \"etag\": \"<string>\",\n \"name\": \"<string>\",\n \"created_at\": \"<dateTime>\",\n \"modified_at\": \"<dateTime>\",\n \"description\": {},\n \"size\": \"<long>\",\n \"path_collection\": {\n  \"total_count\": \"<long>\",\n  \"entries\": [\n   {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\"\n   },\n   {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\"\n   }\n  ]\n },\n \"created_by\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"modified_by\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"trashed_at\": \"<dateTime>\",\n \"purged_at\": \"<dateTime>\",\n \"content_created_at\": \"<dateTime>\",\n \"content_modified_at\": \"<dateTime>\",\n \"expires_at\": \"<dateTime>\",\n \"owned_by\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"shared_link\": {\n  \"url\": \"<url>\",\n  \"download_url\": \"<url>\",\n  \"vanity_url\": \"<url>\",\n  \"access\": \"<string>\",\n  \"effective_access\": \"<string>\",\n  \"effective_permission\": \"<string>\",\n  \"unshared_at\": \"<dateTime>\",\n  \"is_password_enabled\": \"<boolean>\",\n  \"permissions\": {\n   \"can_download\": \"<boolean>\",\n   \"can_preview\": \"<boolean>\"\n  },\n  \"download_count\": \"<integer>\",\n  \"preview_count\": \"<integer>\"\n },\n \"folder_upload_email\": {\n  \"access\": \"<string>\",\n  \"email\": \"<email>\"\n },\n \"parent\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"sequence_id\": \"<string>\",\n  \"etag\": \"<string>\",\n  \"name\": \"<string>\"\n },\n \"item_status\": \"<string>\",\n \"item_collection\": {\n  \"total_count\": \"<long>\",\n  \"limit\": \"<long>\",\n  \"offset\": \"<long>\",\n  \"order\": [\n   {\n    \"by\": \"<string>\",\n    \"direction\": \"<string>\"\n   },\n   {\n    \"by\": \"<string>\",\n    \"direction\": \"<string>\"\n   }\n  ],\n  \"entries\": [\n   {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\"\n   },\n   {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\"\n   }\n  ]\n },\n \"sync_state\": {},\n \"has_collaborations\": \"<boolean>\",\n \"permissions\": {\n  \"can_delete\": \"<boolean>\",\n  \"can_download\": \"<boolean>\",\n  \"can_invite_collaborator\": \"<boolean>\",\n  \"can_rename\": \"<boolean>\",\n  \"can_set_share_access\": \"<boolean>\",\n  \"can_share\": \"<boolean>\",\n  \"can_upload\": \"<boolean>\"\n },\n \"tags\": {},\n \"can_non_owners_invite\": {},\n \"is_externally_owned\": \"<boolean>\",\n \"is_collaboration_restricted_to_enterprise\": {},\n \"allowed_shared_link_access_levels\": \"open\",\n \"allowed_invitee_roles\": \"co-owner\",\n \"watermark_info\": {\n  \"is_watermarked\": \"<boolean>\"\n }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "1739c088-3570-499e-8c6b-ed01a216c0e1",
          "name": "List user's email aliases",
          "request": {
            "name": "List user's email aliases",
            "description": {
              "content": "Retrieves all email aliases for a user. The collection\ndoes not include the primary login for the user.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "users",
                ":user_id",
                "email_aliases"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "The ID of the user.",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "user_id"
                }
              ]
            },
            "method": "GET",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "32bcf40d-3764-4015-8fc6-04afb2a841e7",
              "name": "Returns a collection of email aliases.",
              "originalRequest": {
                "url": {
                  "path": [
                    "users",
                    "<string>",
                    "email_aliases"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"total_count\": \"<long>\",\n \"entries\": [\n  {\n   \"id\": \"schema type not provided\",\n   \"type\": \"<string>\",\n   \"email\": \"<string>\",\n   \"is_confirmed\": \"<boolean>\"\n  },\n  {\n   \"id\": \"schema type not provided\",\n   \"type\": \"<string>\",\n   \"email\": \"<string>\",\n   \"is_confirmed\": \"<boolean>\"\n  }\n ]\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "ff8f078e-9899-4edf-9a17-4adbd1184da4",
          "name": "Create email alias",
          "request": {
            "name": "Create email alias",
            "description": {
              "content": "Adds a new email alias to a user account..",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "users",
                ":user_id",
                "email_aliases"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "The ID of the user.",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "user_id"
                }
              ]
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": {
              "type": "oauth2"
            },
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"<string>\"\n}"
            }
          },
          "response": [
            {
              "id": "6f556986-947e-48b3-89a5-73953f953d04",
              "name": "Returns the newly created email alias object.",
              "originalRequest": {
                "url": {
                  "path": [
                    "users",
                    "<string>",
                    "email_aliases"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"<string>\"\n}"
                }
              },
              "status": "Created",
              "code": 201,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"email\": \"<string>\",\n \"is_confirmed\": \"<boolean>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "3ce7e871-d950-49cc-8cd0-b0fc2866cc89",
          "name": "Remove email alias",
          "request": {
            "name": "Remove email alias",
            "description": {
              "content": "Removes an email alias from a user.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "users",
                ":user_id",
                "email_aliases",
                ":email_alias_id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "The ID of the user.",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "user_id"
                },
                {
                  "description": {
                    "content": "The ID of the email alias.",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "email_alias_id"
                }
              ]
            },
            "method": "DELETE",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "04b54bc0-6be2-4f73-8c19-e5615bfc75aa",
              "name": "Removes the alias and returns an empty response.",
              "originalRequest": {
                "url": {
                  "path": [
                    "users",
                    "<string>",
                    "email_aliases",
                    "<string>"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE",
                "body": {}
              },
              "status": "No Content",
              "code": 204,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            }
          ],
          "event": []
        },
        {
          "id": "9db65474-e2b7-4fb3-a6ec-bbd367a3c3ef",
          "name": "Invite user",
          "request": {
            "name": "Invite user",
            "description": {
              "content": "Invites an existing external user to join an enterprise.\n\nThe existing user can not be part of another enterprise and\nmust already have a Box account. Once invited, the user will receive an\nemail and are prompted to accept the invitation within the\nBox web application.\n\nThis method requires the \"Manage An Enterprise\" scope enabled for\nthe application, which can be enabled within the developer console.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "invites"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response, unless explicitly specified.",
                  "key": "fields",
                  "value": "<string>,<string>"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": {
              "type": "oauth2"
            },
            "body": {
              "mode": "raw",
              "raw": "{\n    \"enterprise\": {\n        \"id\": \"<string>\"\n    },\n    \"actionable_by\": {\n        \"login\": \"<string>\"\n    }\n}"
            }
          },
          "response": [
            {
              "id": "f2ce3f27-b2d5-4770-84ee-a942fc41c48f",
              "name": "Returns a new invite object.",
              "originalRequest": {
                "url": {
                  "path": [
                    "invites"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "<string>,<string>"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"enterprise\": {\n        \"id\": \"<string>\"\n    },\n    \"actionable_by\": {\n        \"login\": \"<string>\"\n    }\n}"
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"invited_to\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\"\n },\n \"actionable_by\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"invited_by\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"status\": \"<string>\",\n \"created_at\": \"<dateTime>\",\n \"modified_at\": \"<dateTime>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "45898789-913a-4437-bdd9-a73b496f3141",
          "name": "Get user invite status",
          "request": {
            "name": "Get user invite status",
            "description": {
              "content": "Returns the status of a user invite.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "invites",
                ":invite_id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response, unless explicitly specified.",
                  "key": "fields",
                  "value": "<string>,<string>"
                }
              ],
              "variable": [
                {
                  "description": {
                    "content": "The ID of an invite.",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "invite_id"
                }
              ]
            },
            "method": "GET",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "21bf1419-5f94-4db2-8baa-cd6fae459901",
              "name": "Returns an invite object",
              "originalRequest": {
                "url": {
                  "path": [
                    "invites",
                    "<string>"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "<string>,<string>"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"invited_to\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\"\n },\n \"actionable_by\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"invited_by\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"status\": \"<string>\",\n \"created_at\": \"<dateTime>\",\n \"modified_at\": \"<dateTime>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        }
      ]
    },
    {
      "id": "b1e652da-f8eb-459b-8625-dc618194cbb5",
      "name": "Groups",
      "item": [
        {
          "id": "67578ba4-b603-4e57-86e0-1de4ea8d739e",
          "name": "List user's groups",
          "request": {
            "name": "List user's groups",
            "description": {
              "content": "Retrieves all the groups for a user. The user making\nan API call must have admin permissions to inspect the\nenterprise's groups.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "users",
                ":user_id",
                "memberships"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "description": "The maximum number of items to return per page.",
                  "key": "limit",
                  "value": "100"
                },
                {
                  "description": "The offset of the item at which to begin the response.",
                  "key": "offset",
                  "value": "<long>"
                }
              ],
              "variable": [
                {
                  "description": {
                    "content": "The ID of the user.",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "user_id"
                }
              ]
            },
            "method": "GET",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "9881edf7-ab8b-4d11-918f-2e8e2e7633ff",
              "name": "Returns a collection of membership objects. If there are no\nmemberships, an empty collection will be returned.",
              "originalRequest": {
                "url": {
                  "path": [
                    "users",
                    "<string>",
                    "memberships"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "limit",
                      "value": "100"
                    },
                    {
                      "key": "offset",
                      "value": "<long>"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"total_count\": \"<long>\",\n \"limit\": \"<long>\",\n \"offset\": \"<long>\",\n \"order\": [\n  {\n   \"by\": \"<string>\",\n   \"direction\": \"<string>\"\n  },\n  {\n   \"by\": \"<string>\",\n   \"direction\": \"<string>\"\n  }\n ],\n \"entries\": [\n  {\n   \"id\": \"schema type not provided\",\n   \"type\": \"<string>\",\n   \"user\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"group\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"group_type\": \"<string>\"\n   },\n   \"role\": \"<string>\",\n   \"created_at\": \"<dateTime>\",\n   \"modified_at\": \"<dateTime>\"\n  },\n  {\n   \"id\": \"schema type not provided\",\n   \"type\": \"<string>\",\n   \"user\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"group\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"group_type\": \"<string>\"\n   },\n   \"role\": \"<string>\",\n   \"created_at\": \"<dateTime>\",\n   \"modified_at\": \"<dateTime>\"\n  }\n ]\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "27811643-b826-4cc8-b4b5-227390deb588",
          "name": "List enterprise groups",
          "request": {
            "name": "List enterprise groups",
            "description": {
              "content": "Retrieves all of the groups for a given enterprise. The user\nmust have admin permissions to inspect enterprise's groups.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "groups"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response, unless explicitly specified.",
                  "key": "fields",
                  "value": "<string>,<string>"
                },
                {
                  "description": "The maximum number of items to return per page.",
                  "key": "limit",
                  "value": "100"
                },
                {
                  "description": "The offset of the item at which to begin the response.",
                  "key": "offset",
                  "value": "<long>"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "2a31f364-8b6b-445a-9186-557d7f1b4dc6",
              "name": "Returns a collection of group objects. If there are no groups, an\nempty collection will be returned.",
              "originalRequest": {
                "url": {
                  "path": [
                    "groups"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "<string>,<string>"
                    },
                    {
                      "key": "limit",
                      "value": "100"
                    },
                    {
                      "key": "offset",
                      "value": "<long>"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"total_count\": \"<long>\",\n \"limit\": \"<long>\",\n \"offset\": \"<long>\",\n \"order\": [\n  {\n   \"by\": \"<string>\",\n   \"direction\": \"<string>\"\n  },\n  {\n   \"by\": \"<string>\",\n   \"direction\": \"<string>\"\n  }\n ],\n \"entries\": [\n  {\n   \"id\": \"schema type not provided\",\n   \"type\": \"<string>\",\n   \"name\": \"<string>\",\n   \"group_type\": \"<string>\",\n   \"created_at\": \"<dateTime>\",\n   \"modified_at\": \"<dateTime>\",\n   \"provenance\": \"<string>\",\n   \"external_sync_identifier\": \"<string>\",\n   \"description\": \"<string>\",\n   \"invitability_level\": \"<string>\",\n   \"member_viewability_level\": \"<string>\"\n  },\n  {\n   \"id\": \"schema type not provided\",\n   \"type\": \"<string>\",\n   \"name\": \"<string>\",\n   \"group_type\": \"<string>\",\n   \"created_at\": \"<dateTime>\",\n   \"modified_at\": \"<dateTime>\",\n   \"provenance\": \"<string>\",\n   \"external_sync_identifier\": \"<string>\",\n   \"description\": \"<string>\",\n   \"invitability_level\": \"<string>\",\n   \"member_viewability_level\": \"<string>\"\n  }\n ]\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "d3094257-8dab-4053-8e1c-567508448f86",
          "name": "Create group",
          "request": {
            "name": "Create group",
            "description": {
              "content": "Creates a new group of users in an enterprise. Only users with admin\npermissions can create new groups.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "groups"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response, unless explicitly specified.",
                  "key": "fields",
                  "value": "<string>,<string>"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": {
              "type": "oauth2"
            },
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"<string>\",\n    \"provenance\": \"<string>\",\n    \"external_sync_identifier\": \"<string>\",\n    \"description\": \"<string>\",\n    \"invitability_level\": \"<string>\",\n    \"member_viewability_level\": \"<string>\"\n}"
            }
          },
          "response": [
            {
              "id": "1ef2a7d5-9723-4e28-9107-a802e010206f",
              "name": "Returns the new group object.",
              "originalRequest": {
                "url": {
                  "path": [
                    "groups"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "<string>,<string>"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"<string>\",\n    \"provenance\": \"<string>\",\n    \"external_sync_identifier\": \"<string>\",\n    \"description\": \"<string>\",\n    \"invitability_level\": \"<string>\",\n    \"member_viewability_level\": \"<string>\"\n}"
                }
              },
              "status": "Created",
              "code": 201,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"name\": \"<string>\",\n \"group_type\": \"<string>\",\n \"created_at\": \"<dateTime>\",\n \"modified_at\": \"<dateTime>\",\n \"provenance\": \"<string>\",\n \"external_sync_identifier\": \"<string>\",\n \"description\": \"<string>\",\n \"invitability_level\": \"<string>\",\n \"member_viewability_level\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "3210e221-9126-486c-b9da-452a90599984",
          "name": "Get group",
          "request": {
            "name": "Get group",
            "description": {
              "content": "Retrieves information about a group.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "groups",
                ":group_id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response, unless explicitly specified.",
                  "key": "fields",
                  "value": "<string>,<string>"
                }
              ],
              "variable": [
                {
                  "description": {
                    "content": "The ID of the group.",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "group_id"
                }
              ]
            },
            "method": "GET",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "dc266d2f-aa79-45a2-93ce-2eda9e1ead55",
              "name": "Returns the group object",
              "originalRequest": {
                "url": {
                  "path": [
                    "groups",
                    "<string>"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "<string>,<string>"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"name\": \"<string>\",\n \"group_type\": \"<string>\",\n \"created_at\": \"<dateTime>\",\n \"modified_at\": \"<dateTime>\",\n \"provenance\": \"<string>\",\n \"external_sync_identifier\": \"<string>\",\n \"description\": \"<string>\",\n \"invitability_level\": \"<string>\",\n \"member_viewability_level\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "affb4f92-2fb5-4c44-99db-3027af6a01d7",
          "name": "Update group",
          "request": {
            "name": "Update group",
            "description": {
              "content": "Updates a specific group.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "groups",
                ":group_id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response, unless explicitly specified.",
                  "key": "fields",
                  "value": "<string>,<string>"
                }
              ],
              "variable": [
                {
                  "description": {
                    "content": "The ID of the group.",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "group_id"
                }
              ]
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "auth": {
              "type": "oauth2"
            },
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"<string>\",\n    \"provenance\": \"<string>\",\n    \"external_sync_identifier\": \"<string>\",\n    \"description\": \"<string>\",\n    \"invitability_level\": \"<string>\",\n    \"member_viewability_level\": \"<string>\"\n}"
            }
          },
          "response": [
            {
              "id": "8d669062-9da1-42b7-9171-2da44ad877e3",
              "name": "Returns the updated group object.",
              "originalRequest": {
                "url": {
                  "path": [
                    "groups",
                    "<string>"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "<string>,<string>"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"<string>\",\n    \"provenance\": \"<string>\",\n    \"external_sync_identifier\": \"<string>\",\n    \"description\": \"<string>\",\n    \"invitability_level\": \"<string>\",\n    \"member_viewability_level\": \"<string>\"\n}"
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"name\": \"<string>\",\n \"group_type\": \"<string>\",\n \"created_at\": \"<dateTime>\",\n \"modified_at\": \"<dateTime>\",\n \"provenance\": \"<string>\",\n \"external_sync_identifier\": \"<string>\",\n \"description\": \"<string>\",\n \"invitability_level\": \"<string>\",\n \"member_viewability_level\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "1c19e757-af9a-4e60-a741-cb0d8e4dd92f",
          "name": "Delete group",
          "request": {
            "name": "Delete group",
            "description": {
              "content": "Permanently deletes a group.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "groups",
                ":group_id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "The ID of the group.",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "group_id"
                }
              ]
            },
            "method": "DELETE",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "215ffe34-9687-41ca-8936-bde9dc3a4e94",
              "name": "A blank response is returned if the group was\nsuccessfully deleted.",
              "originalRequest": {
                "url": {
                  "path": [
                    "groups",
                    "<string>"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE",
                "body": {}
              },
              "status": "No Content",
              "code": 204,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            }
          ],
          "event": []
        },
        {
          "id": "f72ace28-97b1-43a9-92d7-0ccebf22d08f",
          "name": "List group's members",
          "request": {
            "name": "List group's members",
            "description": {
              "content": "Retrieves all the members for a group. The user\nmust have admin permissions to inspect enterprise's groups.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "groups",
                ":group_id",
                "memberships"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "description": "The maximum number of items to return per page.",
                  "key": "limit",
                  "value": "100"
                },
                {
                  "description": "The offset of the item at which to begin the response.",
                  "key": "offset",
                  "value": "<long>"
                }
              ],
              "variable": [
                {
                  "description": {
                    "content": "The ID of the group.",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "group_id"
                }
              ]
            },
            "method": "GET",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "c24eccff-4383-4625-8458-023f5d0e9293",
              "name": "Returns a collection of membership objects. If there are no\nmemberships, an empty collection will be returned.",
              "originalRequest": {
                "url": {
                  "path": [
                    "groups",
                    "<string>",
                    "memberships"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "limit",
                      "value": "100"
                    },
                    {
                      "key": "offset",
                      "value": "<long>"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"total_count\": \"<long>\",\n \"limit\": \"<long>\",\n \"offset\": \"<long>\",\n \"order\": [\n  {\n   \"by\": \"<string>\",\n   \"direction\": \"<string>\"\n  },\n  {\n   \"by\": \"<string>\",\n   \"direction\": \"<string>\"\n  }\n ],\n \"entries\": [\n  {\n   \"id\": \"schema type not provided\",\n   \"type\": \"<string>\",\n   \"user\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"group\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"group_type\": \"<string>\"\n   },\n   \"role\": \"<string>\",\n   \"created_at\": \"<dateTime>\",\n   \"modified_at\": \"<dateTime>\"\n  },\n  {\n   \"id\": \"schema type not provided\",\n   \"type\": \"<string>\",\n   \"user\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"group\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"group_type\": \"<string>\"\n   },\n   \"role\": \"<string>\",\n   \"created_at\": \"<dateTime>\",\n   \"modified_at\": \"<dateTime>\"\n  }\n ]\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "ce4ac8e6-a5f6-4a53-87f0-fd974879efc4",
          "name": "List group's collaborations",
          "request": {
            "name": "List group's collaborations",
            "description": {
              "content": "Retrieves all the collaborations for a group. The user\nmust have admin permissions to inspect enterprise's groups.\n\nEach collaboration object has details on which files or\nfolders the group has access to and with what role.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "groups",
                ":group_id",
                "collaborations"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "description": "The maximum number of items to return per page.",
                  "key": "limit",
                  "value": "100"
                },
                {
                  "description": "The offset of the item at which to begin the response.",
                  "key": "offset",
                  "value": "<long>"
                }
              ],
              "variable": [
                {
                  "description": {
                    "content": "The ID of the group.",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "group_id"
                }
              ]
            },
            "method": "GET",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "2ae57371-5792-48af-9866-ddb754142d20",
              "name": "Returns a collection of collaboration objects. If there are no\ncollaborations, an empty collection will be returned.",
              "originalRequest": {
                "url": {
                  "path": [
                    "groups",
                    "<string>",
                    "collaborations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "limit",
                      "value": "100"
                    },
                    {
                      "key": "offset",
                      "value": "<long>"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"total_count\": \"<long>\",\n \"limit\": \"<long>\",\n \"offset\": \"<long>\",\n \"order\": [\n  {\n   \"by\": \"<string>\",\n   \"direction\": \"<string>\"\n  },\n  {\n   \"by\": \"<string>\",\n   \"direction\": \"<string>\"\n  }\n ],\n \"entries\": [\n  {\n   \"id\": \"<string>\",\n   \"type\": \"<string>\",\n   \"item\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\"\n   },\n   \"accessible_by\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"invite_email\": \"<string>\",\n   \"role\": \"<string>\",\n   \"expires_at\": \"<dateTime>\",\n   \"can_view_path\": \"<boolean>\",\n   \"status\": \"<string>\",\n   \"acknowledged_at\": \"<dateTime>\",\n   \"created_by\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"created_at\": \"<dateTime>\",\n   \"modified_at\": \"<dateTime>\",\n   \"acceptance_requirements_status\": {\n    \"terms_of_service_requirement\": {\n     \"is_accepted\": \"<boolean>\",\n     \"terms_of_service\": {\n      \"id\": \"<string>\",\n      \"type\": \"<string>\"\n     }\n    },\n    \"strong_password_requirement\": {\n     \"enterprise_has_strong_password_required_for_external_users\": \"<boolean>\",\n     \"user_has_strong_password\": \"<boolean>\"\n    },\n    \"two_factor_authentication_requirement\": {\n     \"enterprise_has_two_factor_auth_enabled\": \"<boolean>\",\n     \"user_has_two_factor_authentication_enabled\": \"<boolean>\"\n    }\n   }\n  },\n  {\n   \"id\": \"<string>\",\n   \"type\": \"<string>\",\n   \"item\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\"\n   },\n   \"accessible_by\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"invite_email\": \"<string>\",\n   \"role\": \"<string>\",\n   \"expires_at\": \"<dateTime>\",\n   \"can_view_path\": \"<boolean>\",\n   \"status\": \"<string>\",\n   \"acknowledged_at\": \"<dateTime>\",\n   \"created_by\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"created_at\": \"<dateTime>\",\n   \"modified_at\": \"<dateTime>\",\n   \"acceptance_requirements_status\": {\n    \"terms_of_service_requirement\": {\n     \"is_accepted\": \"<boolean>\",\n     \"terms_of_service\": {\n      \"id\": \"<string>\",\n      \"type\": \"<string>\"\n     }\n    },\n    \"strong_password_requirement\": {\n     \"enterprise_has_strong_password_required_for_external_users\": \"<boolean>\",\n     \"user_has_strong_password\": \"<boolean>\"\n    },\n    \"two_factor_authentication_requirement\": {\n     \"enterprise_has_two_factor_auth_enabled\": \"<boolean>\",\n     \"user_has_two_factor_authentication_enabled\": \"<boolean>\"\n    }\n   }\n  }\n ]\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "d71d7d71-6b8a-4df8-bab6-a57dbdf272c1",
          "name": "Add user to group",
          "request": {
            "name": "Add user to group",
            "description": {
              "content": "Creates a group membership",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "group_memberships"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response, unless explicitly specified.",
                  "key": "fields",
                  "value": "<string>,<string>"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": {
              "type": "oauth2"
            },
            "body": {
              "mode": "raw",
              "raw": "{\n    \"user\": {\n        \"id\": \"<string>\"\n    },\n    \"group\": {\n        \"id\": \"<string>\"\n    },\n    \"role\": \"<string>\",\n    \"configurable_permissions\": \"<object>\"\n}"
            }
          },
          "response": [
            {
              "id": "8d695832-87d1-41f9-a6bb-8cab945bda07",
              "name": "Returns a new group membership object.",
              "originalRequest": {
                "url": {
                  "path": [
                    "group_memberships"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "<string>,<string>"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"user\": {\n        \"id\": \"<string>\"\n    },\n    \"group\": {\n        \"id\": \"<string>\"\n    },\n    \"role\": \"<string>\",\n    \"configurable_permissions\": \"<object>\"\n}"
                }
              },
              "status": "Created",
              "code": 201,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"user\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"group\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"group_type\": \"<string>\"\n },\n \"role\": \"<string>\",\n \"created_at\": \"<dateTime>\",\n \"modified_at\": \"<dateTime>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "d1f577d4-88ac-4e4f-95d3-9410934d4e30",
          "name": "Get group membership",
          "request": {
            "name": "Get group membership",
            "description": {
              "content": "Retrieves a specific group membership.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "group_memberships",
                ":group_membership_id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response, unless explicitly specified.",
                  "key": "fields",
                  "value": "<string>,<string>"
                }
              ],
              "variable": [
                {
                  "description": {
                    "content": "The ID of the group membership.",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "group_membership_id"
                }
              ]
            },
            "method": "GET",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "b5672967-d827-4596-b881-4946115ba80c",
              "name": "Returns the group membership object.",
              "originalRequest": {
                "url": {
                  "path": [
                    "group_memberships",
                    "<string>"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "<string>,<string>"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"user\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"group\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"group_type\": \"<string>\"\n },\n \"role\": \"<string>\",\n \"created_at\": \"<dateTime>\",\n \"modified_at\": \"<dateTime>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "9b9cc740-7fa8-4e53-a345-2bab09338948",
          "name": "Update user's membership",
          "request": {
            "name": "Update user's membership",
            "description": {
              "content": "Updates a user's group membership.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "group_memberships",
                ":group_membership_id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response, unless explicitly specified.",
                  "key": "fields",
                  "value": "<string>,<string>"
                }
              ],
              "variable": [
                {
                  "description": {
                    "content": "The ID of the group membership.",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "group_membership_id"
                }
              ]
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "auth": {
              "type": "oauth2"
            },
            "body": {
              "mode": "raw",
              "raw": "{\n    \"role\": \"<string>\",\n    \"configurable_permissions\": \"<object>\"\n}"
            }
          },
          "response": [
            {
              "id": "efd870e6-edf8-41e2-93fd-7f09dcfc9bd9",
              "name": "Returns a new group membership object.",
              "originalRequest": {
                "url": {
                  "path": [
                    "group_memberships",
                    "<string>"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "<string>,<string>"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"role\": \"<string>\",\n    \"configurable_permissions\": \"<object>\"\n}"
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"user\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"group\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"group_type\": \"<string>\"\n },\n \"role\": \"<string>\",\n \"created_at\": \"<dateTime>\",\n \"modified_at\": \"<dateTime>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "d4048956-f7db-49da-8a86-8f1ca50bf4cb",
          "name": "Remove user from group",
          "request": {
            "name": "Remove user from group",
            "description": {
              "content": "Deletes a specific group membership.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "group_memberships",
                ":group_membership_id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "The ID of the group membership.",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "group_membership_id"
                }
              ]
            },
            "method": "DELETE",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "57437c8d-3c62-4399-b147-a6a274367868",
              "name": "A blank response is returned if the membership was\nsuccessfully deleted.",
              "originalRequest": {
                "url": {
                  "path": [
                    "group_memberships",
                    "<string>"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE",
                "body": {}
              },
              "status": "No Content",
              "code": 204,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            }
          ],
          "event": []
        }
      ]
    },
    {
      "id": "1009a720-58a6-4da9-910c-4fb6fa0c0fd2",
      "name": "Webhooks",
      "item": [
        {
          "id": "6dee121f-7d88-4218-a7e7-987d7c389acd",
          "name": "List all webhooks",
          "request": {
            "name": "List all webhooks",
            "description": {
              "content": "Returns all defined webhooks for the requesting application.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "webhooks"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "description": "The position marker at which to begin the response.\n\nThis requires `usemarker` to be set to true.",
                  "key": "marker",
                  "value": "<string>"
                },
                {
                  "description": "The maximum number of items to return per page.",
                  "key": "limit",
                  "value": "100"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "4b62ee0a-6600-47ce-8409-8c57b506a678",
              "name": "Returns a list of webhooks.",
              "originalRequest": {
                "url": {
                  "path": [
                    "webhooks"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "marker",
                      "value": "<string>"
                    },
                    {
                      "key": "limit",
                      "value": "100"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"limit\": \"<long>\",\n \"next_marker\": \"<long>\",\n \"prev_marker\": \"<long>\",\n \"entries\": [\n  {\n   \"id\": \"schema type not provided\",\n   \"type\": \"<string>\",\n   \"target\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\"\n   },\n   \"created_by\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"created_at\": \"<dateTime>\",\n   \"address\": \"<string>\",\n   \"triggers\": [\n    \"<string>\",\n    \"<string>\"\n   ]\n  },\n  {\n   \"id\": \"schema type not provided\",\n   \"type\": \"<string>\",\n   \"target\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\"\n   },\n   \"created_by\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"created_at\": \"<dateTime>\",\n   \"address\": \"<string>\",\n   \"triggers\": [\n    \"<string>\",\n    \"<string>\"\n   ]\n  }\n ]\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "fd76a91c-4be7-4fcb-84fe-8a5519aa44e1",
              "name": "Returns an error if the application does not\nhave the permission to manage webhooks.",
              "originalRequest": {
                "url": {
                  "path": [
                    "webhooks"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "marker",
                      "value": "<string>"
                    },
                    {
                      "key": "limit",
                      "value": "100"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Forbidden",
              "code": 403,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "eb217e25-ca86-4b1c-b178-2835bae10e1a",
          "name": "Create webhook",
          "request": {
            "name": "Create webhook",
            "description": {
              "content": "Creates a webhook.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "webhooks"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": {
              "type": "oauth2"
            },
            "body": {
              "mode": "raw",
              "raw": "{\n    \"target\": {\n        \"id\": \"<string>\",\n        \"type\": \"<string>\"\n    },\n    \"triggers\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"address\": \"<string>\"\n}"
            }
          },
          "response": [
            {
              "id": "251230c4-b0a6-4e81-8330-53c6cdd356c5",
              "name": "Returns the new webhook object.",
              "originalRequest": {
                "url": {
                  "path": [
                    "webhooks"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"target\": {\n        \"id\": \"<string>\",\n        \"type\": \"<string>\"\n    },\n    \"triggers\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"address\": \"<string>\"\n}"
                }
              },
              "status": "Created",
              "code": 201,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"target\": {\n  \"id\": \"<string>\",\n  \"type\": \"<string>\"\n },\n \"created_by\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"created_at\": \"<dateTime>\",\n \"address\": \"<string>\",\n \"triggers\": [\n  \"<string>\",\n  \"<string>\"\n ]\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "038d9e4d-3ddd-484b-b083-0009697624ac",
              "name": "Returns an error if the parameters were\nincorrect.",
              "originalRequest": {
                "url": {
                  "path": [
                    "webhooks"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"target\": {\n        \"id\": \"<string>\",\n        \"type\": \"<string>\"\n    },\n    \"triggers\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"address\": \"<string>\"\n}"
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "6f9800d3-b734-4a75-8970-7f19b4bd0de1",
              "name": "Returns an error if the application does not\nhave the permission to manage webhooks.",
              "originalRequest": {
                "url": {
                  "path": [
                    "webhooks"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"target\": {\n        \"id\": \"<string>\",\n        \"type\": \"<string>\"\n    },\n    \"triggers\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"address\": \"<string>\"\n}"
                }
              },
              "status": "Forbidden",
              "code": 403,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "c9065ffc-fa06-4377-8c27-9cfb8305bae7",
              "name": "Returns an error if the target item could\nnot be found",
              "originalRequest": {
                "url": {
                  "path": [
                    "webhooks"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"target\": {\n        \"id\": \"<string>\",\n        \"type\": \"<string>\"\n    },\n    \"triggers\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"address\": \"<string>\"\n}"
                }
              },
              "status": "Not Found",
              "code": 404,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "b55e56cd-56d2-4579-909e-856aa114ee08",
              "name": "Returns an error if the a webhook for this\ncombination of target, application, and user\nalready exists.",
              "originalRequest": {
                "url": {
                  "path": [
                    "webhooks"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"target\": {\n        \"id\": \"<string>\",\n        \"type\": \"<string>\"\n    },\n    \"triggers\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"address\": \"<string>\"\n}"
                }
              },
              "status": "Conflict",
              "code": 409,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "bea11656-5cb8-4c50-83c4-b0bc8da7047f",
          "name": "Get webhook",
          "request": {
            "name": "Get webhook",
            "description": {
              "content": "Retrieves a specific webhook",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "webhooks",
                ":webhook_id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "The ID of the webhook.",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "webhook_id"
                }
              ]
            },
            "method": "GET",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "78170f49-4968-47d3-a21b-a23c3af2b797",
              "name": "Returns a webhook object",
              "originalRequest": {
                "url": {
                  "path": [
                    "webhooks",
                    "<string>"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"target\": {\n  \"id\": \"<string>\",\n  \"type\": \"<string>\"\n },\n \"created_by\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"created_at\": \"<dateTime>\",\n \"address\": \"<string>\",\n \"triggers\": [\n  \"<string>\",\n  \"<string>\"\n ]\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "84f88cda-b2ff-482e-8733-c5f0ade4887d",
              "name": "Returns an error if the application does not\nhave the permission to manage webhooks.",
              "originalRequest": {
                "url": {
                  "path": [
                    "webhooks",
                    "<string>"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Forbidden",
              "code": 403,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "c788fc16-5350-416c-b8f3-892d0c2b028c",
              "name": "Returns an error if the webhook could not be found",
              "originalRequest": {
                "url": {
                  "path": [
                    "webhooks",
                    "<string>"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Not Found",
              "code": 404,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "d54b19d4-c245-41e1-961a-aa8a0064334b",
          "name": "Update webhook",
          "request": {
            "name": "Update webhook",
            "description": {
              "content": "Updates a webhook.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "webhooks",
                ":webhook_id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "The ID of the webhook.",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "webhook_id"
                }
              ]
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "auth": {
              "type": "oauth2"
            },
            "body": {
              "mode": "raw",
              "raw": "{\n    \"target\": {\n        \"id\": \"<string>\",\n        \"type\": \"<string>\"\n    },\n    \"address\": \"<string>\",\n    \"triggers\": [\n        \"<string>\",\n        \"<string>\"\n    ]\n}"
            }
          },
          "response": [
            {
              "id": "c950b964-fd93-4d6d-96cc-a57f364c9a09",
              "name": "Returns the new webhook object.",
              "originalRequest": {
                "url": {
                  "path": [
                    "webhooks",
                    "<string>"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"target\": {\n        \"id\": \"<string>\",\n        \"type\": \"<string>\"\n    },\n    \"address\": \"<string>\",\n    \"triggers\": [\n        \"<string>\",\n        \"<string>\"\n    ]\n}"
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"target\": {\n  \"id\": \"<string>\",\n  \"type\": \"<string>\"\n },\n \"created_by\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"created_at\": \"<dateTime>\",\n \"address\": \"<string>\",\n \"triggers\": [\n  \"<string>\",\n  \"<string>\"\n ]\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "2a9fb171-c71f-48bf-9cc6-b3ac1f778d48",
              "name": "Returns an error if the parameters were\nincorrect.",
              "originalRequest": {
                "url": {
                  "path": [
                    "webhooks",
                    "<string>"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"target\": {\n        \"id\": \"<string>\",\n        \"type\": \"<string>\"\n    },\n    \"address\": \"<string>\",\n    \"triggers\": [\n        \"<string>\",\n        \"<string>\"\n    ]\n}"
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "00c6b501-f2ef-4f55-8d70-fa37884948b7",
              "name": "Returns an error if the application does not\nhave the permission to manage webhooks.",
              "originalRequest": {
                "url": {
                  "path": [
                    "webhooks",
                    "<string>"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"target\": {\n        \"id\": \"<string>\",\n        \"type\": \"<string>\"\n    },\n    \"address\": \"<string>\",\n    \"triggers\": [\n        \"<string>\",\n        \"<string>\"\n    ]\n}"
                }
              },
              "status": "Forbidden",
              "code": 403,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "9617932b-6c53-41a1-a966-793ccfdd89bb",
              "name": "Returns an error if the target item or webhook\ncould not be found",
              "originalRequest": {
                "url": {
                  "path": [
                    "webhooks",
                    "<string>"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"target\": {\n        \"id\": \"<string>\",\n        \"type\": \"<string>\"\n    },\n    \"address\": \"<string>\",\n    \"triggers\": [\n        \"<string>\",\n        \"<string>\"\n    ]\n}"
                }
              },
              "status": "Not Found",
              "code": 404,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "ed4765c7-ed98-4a22-a20a-20e40c9afe75",
              "name": "Returns an error if the a webhook for this\ncombination of target, application, and user\nalready exists.",
              "originalRequest": {
                "url": {
                  "path": [
                    "webhooks",
                    "<string>"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"target\": {\n        \"id\": \"<string>\",\n        \"type\": \"<string>\"\n    },\n    \"address\": \"<string>\",\n    \"triggers\": [\n        \"<string>\",\n        \"<string>\"\n    ]\n}"
                }
              },
              "status": "Conflict",
              "code": 409,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "c2ee274c-2d97-4f5d-97f8-6e3edf74f32a",
          "name": "Delete webhook",
          "request": {
            "name": "Delete webhook",
            "description": {
              "content": "Deletes a webhook.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "webhooks",
                ":webhook_id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "The ID of the webhook.",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "webhook_id"
                }
              ]
            },
            "method": "DELETE",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "4afbecd9-3789-40f1-b6ff-f7304cf15799",
              "name": "An empty response will be returned when the webhook\nwas successfully deleted.",
              "originalRequest": {
                "url": {
                  "path": [
                    "webhooks",
                    "<string>"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE",
                "body": {}
              },
              "status": "No Content",
              "code": 204,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "4e442d3c-0aec-4e32-b4cd-46fd5e71b25c",
              "name": "Returns an error if the application does not\nhave the permission to manage webhooks.",
              "originalRequest": {
                "url": {
                  "path": [
                    "webhooks",
                    "<string>"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE",
                "body": {}
              },
              "status": "Forbidden",
              "code": 403,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "e294be10-ddd4-470d-b0ac-68dc87062a7c",
              "name": "Returns an error if the webhook could not be found",
              "originalRequest": {
                "url": {
                  "path": [
                    "webhooks",
                    "<string>"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE",
                "body": {}
              },
              "status": "Not Found",
              "code": 404,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        }
      ]
    },
    {
      "id": "83624e21-bf49-4938-af88-125c05643bc0",
      "name": "Skills",
      "item": [
        {
          "id": "45ed981d-8215-4c9e-b902-a07f0a1939ae",
          "name": "Update skill invocation",
          "request": {
            "name": "Update skill invocation",
            "description": {
              "content": "Updates the status, usage and response metadata of a\nskill invocation.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "skill_invocations",
                ":skill_invocation_id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "The ID of the skill invocation.",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "skill_invocation_id"
                }
              ]
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "auth": {
              "type": "oauth2"
            },
            "body": {
              "mode": "raw",
              "raw": "{\n    \"status\": \"<string>\",\n    \"metadata\": {\n        \"cards\": [\n            {\n                \"type\": \"<string>\",\n                \"created_at\": \"<dateTime>\",\n                \"skill\": {\n                    \"type\": \"<string>\",\n                    \"id\": \"<string>\"\n                },\n                \"skill_card_title\": {\n                    \"code\": \"<string>\",\n                    \"message\": \"<string>\"\n                },\n                \"skill_card_type\": \"<string>\",\n                \"invocation\": {\n                    \"type\": \"<string>\",\n                    \"id\": \"<string>\"\n                },\n                \"status\": {\n                    \"code\": \"<string>\",\n                    \"message\": \"<string>\"\n                },\n                \"entries\": [\n                    {\n                        \"type\": \"<string>\",\n                        \"text\": \"<string>\"\n                    },\n                    {\n                        \"type\": \"<string>\",\n                        \"text\": \"<string>\"\n                    }\n                ],\n                \"duration\": \"<integer>\"\n            },\n            {\n                \"type\": \"<string>\",\n                \"created_at\": \"<dateTime>\",\n                \"skill\": {\n                    \"type\": \"<string>\",\n                    \"id\": \"<string>\"\n                },\n                \"skill_card_title\": {\n                    \"code\": \"<string>\",\n                    \"message\": \"<string>\"\n                },\n                \"skill_card_type\": \"<string>\",\n                \"invocation\": {\n                    \"type\": \"<string>\",\n                    \"id\": \"<string>\"\n                },\n                \"status\": {\n                    \"code\": \"<string>\",\n                    \"message\": \"<string>\"\n                },\n                \"entries\": [\n                    {\n                        \"type\": \"<string>\",\n                        \"text\": \"<string>\"\n                    },\n                    {\n                        \"type\": \"<string>\",\n                        \"text\": \"<string>\"\n                    }\n                ],\n                \"duration\": \"<integer>\"\n            }\n        ]\n    },\n    \"file\": {\n        \"type\": \"<string>\",\n        \"id\": \"<string>\"\n    },\n    \"file_version\": {\n        \"type\": \"<string>\",\n        \"id\": \"<string>\"\n    }\n}"
            }
          },
          "response": [
            {
              "id": "0f0aec6e-d978-47cf-95fb-833641a0fc37",
              "name": "Returns an empty response.",
              "originalRequest": {
                "url": {
                  "path": [
                    "skill_invocations",
                    "<string>"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"status\": \"<string>\",\n    \"metadata\": {\n        \"cards\": [\n            {\n                \"type\": \"<string>\",\n                \"created_at\": \"<dateTime>\",\n                \"skill\": {\n                    \"type\": \"<string>\",\n                    \"id\": \"<string>\"\n                },\n                \"skill_card_title\": {\n                    \"code\": \"<string>\",\n                    \"message\": \"<string>\"\n                },\n                \"skill_card_type\": \"<string>\",\n                \"invocation\": {\n                    \"type\": \"<string>\",\n                    \"id\": \"<string>\"\n                },\n                \"status\": {\n                    \"code\": \"<string>\",\n                    \"message\": \"<string>\"\n                },\n                \"entries\": [\n                    {\n                        \"type\": \"<string>\",\n                        \"text\": \"<string>\"\n                    },\n                    {\n                        \"type\": \"<string>\",\n                        \"text\": \"<string>\"\n                    }\n                ],\n                \"duration\": \"<integer>\"\n            },\n            {\n                \"type\": \"<string>\",\n                \"created_at\": \"<dateTime>\",\n                \"skill\": {\n                    \"type\": \"<string>\",\n                    \"id\": \"<string>\"\n                },\n                \"skill_card_title\": {\n                    \"code\": \"<string>\",\n                    \"message\": \"<string>\"\n                },\n                \"skill_card_type\": \"<string>\",\n                \"invocation\": {\n                    \"type\": \"<string>\",\n                    \"id\": \"<string>\"\n                },\n                \"status\": {\n                    \"code\": \"<string>\",\n                    \"message\": \"<string>\"\n                },\n                \"entries\": [\n                    {\n                        \"type\": \"<string>\",\n                        \"text\": \"<string>\"\n                    },\n                    {\n                        \"type\": \"<string>\",\n                        \"text\": \"<string>\"\n                    }\n                ],\n                \"duration\": \"<integer>\"\n            }\n        ]\n    },\n    \"file\": {\n        \"type\": \"<string>\",\n        \"id\": \"<string>\"\n    },\n    \"file_version\": {\n        \"type\": \"<string>\",\n        \"id\": \"<string>\"\n    }\n}"
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            }
          ],
          "event": []
        }
      ]
    },
    {
      "id": "4a58edc7-89e5-454a-804c-c38977ea05e1",
      "name": "Events",
      "item": [
        {
          "id": "a6a49dc7-98da-4c0e-b02d-8f90163f7a34",
          "name": "Get a long poll endpoint",
          "request": {
            "name": "Get a long poll endpoint",
            "description": {
              "content": "Returns a list of real-time servers that can be used for long-polling updates\nto the [event stream](#get-events).\n\nLong polling is the concept where a HTTP request is kept open until the\nserver sends a response, then repeating the process over and over to receive\nupdated responses.\n\nLong polling the event stream can only be used for user events, not for\nenterprise events.\n\nTo use long polling, first use this endpoint to retrieve a list of long poll\nURLs. Next, make a long poll request to any of the provided URLs.\n\nWhen an event occurs in monitored account a response with the value\n`new_change` will be sent. The response contains no other details as\nit simply serves as a prompt to take further action such as sending a\nrequest to the [events endpoint](#get-events) with the last known\n`stream_position`.\n\nAfter the server sends this response it closes the connection. You must now\nrepeat the long poll process to begin listening for events again.\n\nIf no events occur for a while and the connection times out you will\nreceive a response with the value `reconnect`. When you receive this response\nyou’ll make another call to this endpoint to restart the process.\n\nIf you receive no events in `retry_timeout` seconds then you will need to\nmake another request to the real-time server (one of the URLs in the response\nfor this endpoint). This might be necessary due to network errors.\n\nFinally, if you receive a `max_retries` error when making a request to the\nreal-time server, you should start over by making a call to this endpoint\nfirst.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "events"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "OPTIONS",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "753f8e08-f4da-4b70-9b91-11e0b53e4bf7",
              "name": "Returns a paginated array of servers that can be used\ninstead of the regular endpoints for long-polling events.",
              "originalRequest": {
                "url": {
                  "path": [
                    "events"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "OPTIONS",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"chunk_size\": \"<long>\",\n \"entries\": [\n  {\n   \"type\": \"<string>\",\n   \"url\": \"<string>\",\n   \"ttl\": \"<integer>\",\n   \"max_retries\": \"<integer>\",\n   \"retry_timeout\": \"<integer>\"\n  },\n  {\n   \"type\": \"<string>\",\n   \"url\": \"<string>\",\n   \"ttl\": \"<integer>\",\n   \"max_retries\": \"<integer>\",\n   \"retry_timeout\": \"<integer>\"\n  }\n ]\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "136dc925-b671-43c9-be49-7941bf000f46",
          "name": "Get user and enterprise events",
          "request": {
            "name": "Get user and enterprise events",
            "description": {
              "content": "Returns up to a year of past events for a given user\nor for the entire enterprise.\n\nBy default this returns events for the authenticated user. To retrieve\nevents for the entire enterprise, set the `stream_type` to `admin_logs`.\nThe user making the API call will need to have admin privileges, and\nthe application will need to have the permission to access the event feed\nto get the enterprise event feed.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "events"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "description": "Defines the type of events that are returned\n\n* `all` returns everything for a user and is the default\n* `changes` returns events that may cause file tree changes\n  such as file updates or collaborations.\n* `sync` is similar to `changes` but only applies to synced folders\n* `admin_logs` returns all events for an entire enterprise and\n  requires the user making the API call to have admin permissions.",
                  "key": "stream_type",
                  "value": "all"
                },
                {
                  "description": "The location in the event stream to start receiving events from.\n\n* `now` will return an empty list events and\nthe latest stream position for initialization.\n* `0` or `null` will return all events.",
                  "key": "stream_position",
                  "value": "<string>"
                },
                {
                  "description": "Limits the number of events returned",
                  "key": "limit",
                  "value": "100"
                },
                {
                  "description": "A comma-separated list of events to filter by.",
                  "key": "event_type",
                  "value": "<string>,<string>"
                },
                {
                  "description": "The lower bound date and time to return events for.",
                  "key": "created_after",
                  "value": "<dateTime>"
                },
                {
                  "description": "The upper bound date and time to return events for.",
                  "key": "created_before",
                  "value": "<dateTime>"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "3f616721-0ffa-4ec8-90d4-c3ad70e565e1",
              "name": "Returns a list of event objects.\n\nEvents objects are returned in pages, with each page (chunk)\nincluding a list of event objects. The response also includes a\n`chunk_size` parameter indicating how many\nchunks are left, as well as the next `stream_position` that can be\nqueried.",
              "originalRequest": {
                "url": {
                  "path": [
                    "events"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "stream_type",
                      "value": "all"
                    },
                    {
                      "key": "stream_position",
                      "value": "<string>"
                    },
                    {
                      "key": "limit",
                      "value": "100"
                    },
                    {
                      "key": "event_type",
                      "value": "<string>,<string>"
                    },
                    {
                      "key": "created_after",
                      "value": "<dateTime>"
                    },
                    {
                      "key": "created_before",
                      "value": "<dateTime>"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"chunk_size\": \"<long>\",\n \"next_stream_position\": \"<string>\",\n \"entries\": [\n  {\n   \"type\": \"<string>\",\n   \"event_id\": \"<string>\",\n   \"created_by\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"event_type\": {},\n   \"session_id\": \"<string>\",\n   \"source\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\",\n    \"sha1\": \"<digest>\",\n    \"description\": \"<string>\",\n    \"size\": \"<integer>\",\n    \"path_collection\": [\n     {\n      \"id\": \"<string>\",\n      \"type\": \"<string>\",\n      \"sequence_id\": \"<string>\",\n      \"etag\": \"<string>\",\n      \"name\": \"<string>\"\n     },\n     {\n      \"id\": \"<string>\",\n      \"type\": \"<string>\",\n      \"sequence_id\": \"<string>\",\n      \"etag\": \"<string>\",\n      \"name\": \"<string>\"\n     }\n    ],\n    \"created_at\": \"<dateTime>\",\n    \"modified_at\": \"<dateTime>\",\n    \"trashed_at\": \"<dateTime>\",\n    \"purged_at\": \"<dateTime>\",\n    \"content_created_at\": \"<dateTime>\",\n    \"content_modified_at\": \"<dateTime>\",\n    \"expires_at\": \"<dateTime>\",\n    \"created_by\": {\n     \"id\": \"<string>\",\n     \"type\": \"<string>\",\n     \"name\": \"<string>\",\n     \"login\": \"<email>\"\n    },\n    \"modified_by\": {\n     \"id\": \"<string>\",\n     \"type\": \"<string>\",\n     \"name\": \"<string>\",\n     \"login\": \"<email>\"\n    },\n    \"owned_by\": {\n     \"id\": \"<string>\",\n     \"type\": \"<string>\",\n     \"name\": \"<string>\",\n     \"login\": \"<email>\"\n    },\n    \"shared_link\": {\n     \"url\": \"<url>\",\n     \"download_url\": \"<url>\",\n     \"vanity_url\": \"<url>\",\n     \"access\": \"<string>\",\n     \"effective_access\": \"<string>\",\n     \"effective_permission\": \"<string>\",\n     \"unshared_at\": \"<dateTime>\",\n     \"is_password_enabled\": \"<boolean>\",\n     \"permissions\": {\n      \"can_download\": \"<boolean>\",\n      \"can_preview\": \"<boolean>\"\n     },\n     \"download_count\": \"<integer>\",\n     \"preview_count\": \"<integer>\"\n    },\n    \"parent\": {\n     \"id\": \"<string>\",\n     \"type\": \"<string>\",\n     \"sequence_id\": \"<string>\",\n     \"etag\": \"<string>\",\n     \"name\": \"<string>\"\n    },\n    \"item_status\": \"<string>\"\n   },\n   \"additional_details\": \"<object>\"\n  },\n  {\n   \"type\": \"<string>\",\n   \"event_id\": \"<string>\",\n   \"created_by\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"event_type\": {},\n   \"session_id\": \"<string>\",\n   \"source\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\",\n    \"sha1\": \"<digest>\",\n    \"description\": \"<string>\",\n    \"size\": \"<integer>\",\n    \"path_collection\": [\n     {\n      \"id\": \"<string>\",\n      \"type\": \"<string>\",\n      \"sequence_id\": \"<string>\",\n      \"etag\": \"<string>\",\n      \"name\": \"<string>\"\n     },\n     {\n      \"id\": \"<string>\",\n      \"type\": \"<string>\",\n      \"sequence_id\": \"<string>\",\n      \"etag\": \"<string>\",\n      \"name\": \"<string>\"\n     }\n    ],\n    \"created_at\": \"<dateTime>\",\n    \"modified_at\": \"<dateTime>\",\n    \"trashed_at\": \"<dateTime>\",\n    \"purged_at\": \"<dateTime>\",\n    \"content_created_at\": \"<dateTime>\",\n    \"content_modified_at\": \"<dateTime>\",\n    \"expires_at\": \"<dateTime>\",\n    \"created_by\": {\n     \"id\": \"<string>\",\n     \"type\": \"<string>\",\n     \"name\": \"<string>\",\n     \"login\": \"<email>\"\n    },\n    \"modified_by\": {\n     \"id\": \"<string>\",\n     \"type\": \"<string>\",\n     \"name\": \"<string>\",\n     \"login\": \"<email>\"\n    },\n    \"owned_by\": {\n     \"id\": \"<string>\",\n     \"type\": \"<string>\",\n     \"name\": \"<string>\",\n     \"login\": \"<email>\"\n    },\n    \"shared_link\": {\n     \"url\": \"<url>\",\n     \"download_url\": \"<url>\",\n     \"vanity_url\": \"<url>\",\n     \"access\": \"<string>\",\n     \"effective_access\": \"<string>\",\n     \"effective_permission\": \"<string>\",\n     \"unshared_at\": \"<dateTime>\",\n     \"is_password_enabled\": \"<boolean>\",\n     \"permissions\": {\n      \"can_download\": \"<boolean>\",\n      \"can_preview\": \"<boolean>\"\n     },\n     \"download_count\": \"<integer>\",\n     \"preview_count\": \"<integer>\"\n    },\n    \"parent\": {\n     \"id\": \"<string>\",\n     \"type\": \"<string>\",\n     \"sequence_id\": \"<string>\",\n     \"etag\": \"<string>\",\n     \"name\": \"<string>\"\n    },\n    \"item_status\": \"<string>\"\n   },\n   \"additional_details\": \"<object>\"\n  }\n ]\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        }
      ]
    },
    {
      "id": "5d56ee2e-9b20-4768-b842-8232a4000d57",
      "name": "Collections",
      "item": [
        {
          "id": "f20e9378-5843-4e3f-8fd6-e5bf08ff3c70",
          "name": "List all collections",
          "request": {
            "name": "List all collections",
            "description": {
              "content": "Retrieves all collections for a given user.\n\nCurrently, only the `favorites` collection\nis supported.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "collections"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response, unless explicitly specified.",
                  "key": "fields",
                  "value": "<string>,<string>"
                },
                {
                  "description": "The offset of the item at which to begin the response.",
                  "key": "offset",
                  "value": "<long>"
                },
                {
                  "description": "The maximum number of items to return per page.",
                  "key": "limit",
                  "value": "100"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "1b9226d8-cb0c-4ba6-94a6-6624564baf47",
              "name": "Returns all collections for the given user",
              "originalRequest": {
                "url": {
                  "path": [
                    "collections"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "<string>,<string>"
                    },
                    {
                      "key": "offset",
                      "value": "<long>"
                    },
                    {
                      "key": "limit",
                      "value": "100"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"total_count\": \"<long>\",\n \"limit\": \"<long>\",\n \"offset\": \"<long>\",\n \"order\": [\n  {\n   \"by\": \"<string>\",\n   \"direction\": \"<string>\"\n  },\n  {\n   \"by\": \"<string>\",\n   \"direction\": \"<string>\"\n  }\n ],\n \"entries\": [\n  {\n   \"id\": \"schema type not provided\",\n   \"type\": \"<string>\",\n   \"name\": \"<string>\",\n   \"collection_type\": \"<string>\"\n  },\n  {\n   \"id\": \"schema type not provided\",\n   \"type\": \"<string>\",\n   \"name\": \"<string>\",\n   \"collection_type\": \"<string>\"\n  }\n ]\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "2fc9412a-4d6a-4601-b628-414c41b73540",
          "name": "List collection items",
          "request": {
            "name": "List collection items",
            "description": {
              "content": "Retrieves the files and/or folders contained within\nthis collection.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "collections",
                ":collection_id",
                "items"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response, unless explicitly specified.",
                  "key": "fields",
                  "value": "<string>,<string>"
                },
                {
                  "description": "The offset of the item at which to begin the response.",
                  "key": "offset",
                  "value": "<long>"
                },
                {
                  "description": "The maximum number of items to return per page.",
                  "key": "limit",
                  "value": "100"
                }
              ],
              "variable": [
                {
                  "description": {
                    "content": "The ID of the collection.",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "collection_id"
                }
              ]
            },
            "method": "GET",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "6bc7c65b-e367-4014-887c-a44c646c43b8",
              "name": "Returns an array of items in the collection.",
              "originalRequest": {
                "url": {
                  "path": [
                    "collections",
                    "<string>",
                    "items"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "<string>,<string>"
                    },
                    {
                      "key": "offset",
                      "value": "<long>"
                    },
                    {
                      "key": "limit",
                      "value": "100"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"total_count\": \"<long>\",\n \"limit\": \"<long>\",\n \"offset\": \"<long>\",\n \"order\": [\n  {\n   \"by\": \"<string>\",\n   \"direction\": \"<string>\"\n  },\n  {\n   \"by\": \"<string>\",\n   \"direction\": \"<string>\"\n  }\n ],\n \"entries\": [\n  {\n   \"id\": \"schema type not provided\",\n   \"type\": \"<string>\",\n   \"sequence_id\": \"<string>\",\n   \"etag\": \"<string>\",\n   \"name\": \"<string>\"\n  },\n  {\n   \"id\": \"schema type not provided\",\n   \"type\": \"<string>\",\n   \"sequence_id\": \"<string>\",\n   \"etag\": \"<string>\",\n   \"name\": \"<string>\"\n  }\n ]\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        }
      ]
    },
    {
      "id": "135c4313-d7df-462c-bc11-f8f19ace1ced",
      "name": "Recent Items",
      "item": [
        {
          "id": "9410b1f8-26fd-4bb9-a4a6-b0b845fabdb0",
          "name": "List recent items",
          "request": {
            "name": "List recent items",
            "description": {
              "content": "Returns information about the recent items accessed\nby a user, either in the last 90 days or up to the last\n1000 items accessed.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "recent_items"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response, unless explicitly specified.",
                  "key": "fields",
                  "value": "<string>,<string>"
                },
                {
                  "description": "The maximum number of items to return per page.",
                  "key": "limit",
                  "value": "100"
                },
                {
                  "description": "The position marker at which to begin the response.\n\nThis requires `usemarker` to be set to true.",
                  "key": "marker",
                  "value": "<string>"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "31aa284b-dca5-46a1-90d9-87d46452045f",
              "name": "Returns a list recent items access by a user.",
              "originalRequest": {
                "url": {
                  "path": [
                    "recent_items"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "<string>,<string>"
                    },
                    {
                      "key": "limit",
                      "value": "100"
                    },
                    {
                      "key": "marker",
                      "value": "<string>"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"limit\": \"<long>\",\n \"next_marker\": \"<long>\",\n \"prev_marker\": \"<long>\",\n \"entries\": [\n  {\n   \"type\": \"<string>\",\n   \"item\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\"\n   },\n   \"interaction_type\": \"<string>\",\n   \"interacted_at\": \"<dateTime>\",\n   \"interaction_shared_link\": \"<string>\"\n  },\n  {\n   \"type\": \"<string>\",\n   \"item\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\"\n   },\n   \"interaction_type\": \"<string>\",\n   \"interacted_at\": \"<dateTime>\",\n   \"interaction_shared_link\": \"<string>\"\n  }\n ]\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        }
      ]
    },
    {
      "id": "dca91b3c-804c-4831-b1fc-437db2ac4f8b",
      "name": "Retention Policies",
      "item": [
        {
          "id": "da5c303b-cdc1-4422-a831-cfe68f487f65",
          "name": "List retention policies",
          "request": {
            "name": "List retention policies",
            "description": {
              "content": "Retrieves all of the retention policies for an enterprise.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "retention_policies"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "description": "Filters results by a case sensitive prefix of the name of\nretention policies.",
                  "key": "policy_name",
                  "value": "<string>"
                },
                {
                  "description": "Filters results by the type of retention policy.",
                  "key": "policy_type",
                  "value": "<string>"
                },
                {
                  "description": "Filters results by the ID of the user who created policy.",
                  "key": "created_by_user_id",
                  "value": "<string>"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "30201381-344e-4244-9936-b67a355145e5",
              "name": "Returns a list retention policies in the enterprise.",
              "originalRequest": {
                "url": {
                  "path": [
                    "retention_policies"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "policy_name",
                      "value": "<string>"
                    },
                    {
                      "key": "policy_type",
                      "value": "<string>"
                    },
                    {
                      "key": "created_by_user_id",
                      "value": "<string>"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"total_count\": \"<long>\",\n \"entries\": [\n  {\n   \"id\": \"schema type not provided\",\n   \"type\": \"<string>\",\n   \"policy_name\": \"<string>\",\n   \"policy_type\": \"<string>\",\n   \"retention_length\": \"<int32>\",\n   \"disposition_action\": \"<string>\",\n   \"status\": \"<string>\",\n   \"created_by\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"created_at\": \"<dateTime>\",\n   \"modified_at\": \"<dateTime>\"\n  },\n  {\n   \"id\": \"schema type not provided\",\n   \"type\": \"<string>\",\n   \"policy_name\": \"<string>\",\n   \"policy_type\": \"<string>\",\n   \"retention_length\": \"<int32>\",\n   \"disposition_action\": \"<string>\",\n   \"status\": \"<string>\",\n   \"created_by\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"created_at\": \"<dateTime>\",\n   \"modified_at\": \"<dateTime>\"\n  }\n ]\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "500adb48-831b-4def-b121-862cbef38263",
              "name": "Returns a `bad_request` if a non existent `policy_type` was specified.",
              "originalRequest": {
                "url": {
                  "path": [
                    "retention_policies"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "policy_name",
                      "value": "<string>"
                    },
                    {
                      "key": "policy_type",
                      "value": "<string>"
                    },
                    {
                      "key": "created_by_user_id",
                      "value": "<string>"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "54b2c5d2-04bf-4103-aa83-3c2d2ebbc733",
              "name": "Returns a `not_found` error if the user specified in `created_by_user_id`\ndoes not exist.",
              "originalRequest": {
                "url": {
                  "path": [
                    "retention_policies"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "policy_name",
                      "value": "<string>"
                    },
                    {
                      "key": "policy_type",
                      "value": "<string>"
                    },
                    {
                      "key": "created_by_user_id",
                      "value": "<string>"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Not Found",
              "code": 404,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "41bbc680-6ec9-4391-b747-1f55ed11f812",
          "name": "Create retention policy",
          "request": {
            "name": "Create retention policy",
            "description": {
              "content": "Creates a retention policy.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "retention_policies"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": {
              "type": "oauth2"
            },
            "body": {
              "mode": "raw",
              "raw": "{\n    \"policy_name\": \"<string>\",\n    \"policy_type\": \"<string>\",\n    \"disposition_action\": \"<string>\",\n    \"retention_length\": \"<int32>\",\n    \"can_owner_extend_retention\": \"<boolean>\",\n    \"are_owners_notified\": \"<boolean>\",\n    \"custom_notification_recipients\": [\n        {\n            \"type\": \"<string>\",\n            \"id\": \"<string>\",\n            \"name\": \"<string>\",\n            \"login\": \"<string>\"\n        },\n        {\n            \"type\": \"<string>\",\n            \"id\": \"<string>\",\n            \"name\": \"<string>\",\n            \"login\": \"<string>\"\n        }\n    ]\n}"
            }
          },
          "response": [
            {
              "id": "9acc251b-4332-42fb-90fc-89085c405e91",
              "name": "Returns a new retention policy object.",
              "originalRequest": {
                "url": {
                  "path": [
                    "retention_policies"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"policy_name\": \"<string>\",\n    \"policy_type\": \"<string>\",\n    \"disposition_action\": \"<string>\",\n    \"retention_length\": \"<int32>\",\n    \"can_owner_extend_retention\": \"<boolean>\",\n    \"are_owners_notified\": \"<boolean>\",\n    \"custom_notification_recipients\": [\n        {\n            \"type\": \"<string>\",\n            \"id\": \"<string>\",\n            \"name\": \"<string>\",\n            \"login\": \"<string>\"\n        },\n        {\n            \"type\": \"<string>\",\n            \"id\": \"<string>\",\n            \"name\": \"<string>\",\n            \"login\": \"<string>\"\n        }\n    ]\n}"
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"policy_name\": \"<string>\",\n \"policy_type\": \"<string>\",\n \"retention_length\": \"<int32>\",\n \"disposition_action\": \"<string>\",\n \"status\": \"<string>\",\n \"created_by\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"created_at\": \"<dateTime>\",\n \"modified_at\": \"<dateTime>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "b657177e-2cec-4e42-8515-afe797d75508",
              "name": "Returns a `bad_request` error with the `retention_length` was\nspecified for a `infinite` retention policy, or an incorrect\n`disposition_action` was set.",
              "originalRequest": {
                "url": {
                  "path": [
                    "retention_policies"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"policy_name\": \"<string>\",\n    \"policy_type\": \"<string>\",\n    \"disposition_action\": \"<string>\",\n    \"retention_length\": \"<int32>\",\n    \"can_owner_extend_retention\": \"<boolean>\",\n    \"are_owners_notified\": \"<boolean>\",\n    \"custom_notification_recipients\": [\n        {\n            \"type\": \"<string>\",\n            \"id\": \"<string>\",\n            \"name\": \"<string>\",\n            \"login\": \"<string>\"\n        },\n        {\n            \"type\": \"<string>\",\n            \"id\": \"<string>\",\n            \"name\": \"<string>\",\n            \"login\": \"<string>\"\n        }\n    ]\n}"
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "6d43dd40-2df8-447f-afe6-b784e739c888",
              "name": "Returns an error if a retention policy with the given name already exists",
              "originalRequest": {
                "url": {
                  "path": [
                    "retention_policies"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"policy_name\": \"<string>\",\n    \"policy_type\": \"<string>\",\n    \"disposition_action\": \"<string>\",\n    \"retention_length\": \"<int32>\",\n    \"can_owner_extend_retention\": \"<boolean>\",\n    \"are_owners_notified\": \"<boolean>\",\n    \"custom_notification_recipients\": [\n        {\n            \"type\": \"<string>\",\n            \"id\": \"<string>\",\n            \"name\": \"<string>\",\n            \"login\": \"<string>\"\n        },\n        {\n            \"type\": \"<string>\",\n            \"id\": \"<string>\",\n            \"name\": \"<string>\",\n            \"login\": \"<string>\"\n        }\n    ]\n}"
                }
              },
              "status": "Conflict",
              "code": 409,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "3fa513c7-2319-4b20-880b-edf18fe659a8",
          "name": "Get retention policy",
          "request": {
            "name": "Get retention policy",
            "description": {
              "content": "Retrieves a retention policy.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "retention_policies",
                ":retention_policy_id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "The ID of the retention policy.",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "retention_policy_id"
                }
              ]
            },
            "method": "GET",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "64171801-4189-4c40-bd88-0f56dda2f616",
              "name": "Returns the retention policy object.",
              "originalRequest": {
                "url": {
                  "path": [
                    "retention_policies",
                    "<string>"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"policy_name\": \"<string>\",\n \"policy_type\": \"<string>\",\n \"retention_length\": \"<int32>\",\n \"disposition_action\": \"<string>\",\n \"status\": \"<string>\",\n \"created_by\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"created_at\": \"<dateTime>\",\n \"modified_at\": \"<dateTime>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "836c72eb-158f-4022-bacc-3bf3d75afa90",
          "name": "Update retention policy",
          "request": {
            "name": "Update retention policy",
            "description": {
              "content": "Updates a retention policy.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "retention_policies",
                ":retention_policy_id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "The ID of the retention policy.",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "retention_policy_id"
                }
              ]
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "auth": {
              "type": "oauth2"
            },
            "body": {
              "mode": "raw",
              "raw": "{\n    \"policy_name\": \"<string>\",\n    \"disposition_action\": \"<string>\",\n    \"status\": \"<string>\"\n}"
            }
          },
          "response": [
            {
              "id": "9f8d3131-a6af-4af9-b6d4-66bcc0d6d3db",
              "name": "Returns the updated retention policy object.",
              "originalRequest": {
                "url": {
                  "path": [
                    "retention_policies",
                    "<string>"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"policy_name\": \"<string>\",\n    \"disposition_action\": \"<string>\",\n    \"status\": \"<string>\"\n}"
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"policy_name\": \"<string>\",\n \"policy_type\": \"<string>\",\n \"retention_length\": \"<int32>\",\n \"disposition_action\": \"<string>\",\n \"status\": \"<string>\",\n \"created_by\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"created_at\": \"<dateTime>\",\n \"modified_at\": \"<dateTime>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "880eea74-c8c9-41fd-bf85-a2d626b9f26e",
              "name": "Returns a `bad_request` if an incorrect\n`disposition_action` was set.",
              "originalRequest": {
                "url": {
                  "path": [
                    "retention_policies",
                    "<string>"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"policy_name\": \"<string>\",\n    \"disposition_action\": \"<string>\",\n    \"status\": \"<string>\"\n}"
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "de8e809a-749c-4e09-ae7f-034475c2810c",
              "name": "Returns an error if a retention policy with the given name already exists",
              "originalRequest": {
                "url": {
                  "path": [
                    "retention_policies",
                    "<string>"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"policy_name\": \"<string>\",\n    \"disposition_action\": \"<string>\",\n    \"status\": \"<string>\"\n}"
                }
              },
              "status": "Conflict",
              "code": 409,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "f635c36c-f0c8-4efe-8c1e-f2f766307dd5",
          "name": "List policy's assignments",
          "request": {
            "name": "List policy's assignments",
            "description": {
              "content": "Returns a list of all retention policy assignments associated with a specified\nretention policy.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "retention_policies",
                ":retention_policy_id",
                "assignments"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "description": "The type of the retention policy assignment to retrieve.",
                  "key": "type",
                  "value": "<string>"
                },
                {
                  "description": "The position marker at which to begin the response.\n\nThis requires `usemarker` to be set to true.",
                  "key": "marker",
                  "value": "<string>"
                },
                {
                  "description": "The maximum number of items to return per page.",
                  "key": "limit",
                  "value": "100"
                }
              ],
              "variable": [
                {
                  "description": {
                    "content": "The ID of the retention policy.",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "retention_policy_id"
                }
              ]
            },
            "method": "GET",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "45185a31-f1a1-4b9e-b9bf-503c2411635c",
              "name": "Returns a list of the retention policy assignments associated with the\nspecified retention policy.",
              "originalRequest": {
                "url": {
                  "path": [
                    "retention_policies",
                    "<string>",
                    "assignments"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "type",
                      "value": "<string>"
                    },
                    {
                      "key": "marker",
                      "value": "<string>"
                    },
                    {
                      "key": "limit",
                      "value": "100"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"limit\": \"<long>\",\n \"next_marker\": \"<long>\",\n \"prev_marker\": \"<long>\",\n \"entries\": [\n  {\n   \"id\": \"schema type not provided\",\n   \"type\": \"<string>\",\n   \"retention_policy\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"policy_name\": \"<string>\"\n   },\n   \"assigned_to\": {\n    \"id\": \"schema type not provided\"\n   },\n   \"assigned_by\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"assigned_at\": \"<dateTime>\"\n  },\n  {\n   \"id\": \"schema type not provided\",\n   \"type\": \"<string>\",\n   \"retention_policy\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"policy_name\": \"<string>\"\n   },\n   \"assigned_to\": {\n    \"id\": \"schema type not provided\"\n   },\n   \"assigned_by\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"assigned_at\": \"<dateTime>\"\n  }\n ]\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "91bdb1a9-8d19-40bf-9bfa-b9715518168e",
              "name": "Returns an error if an unknown `type` is specified.",
              "originalRequest": {
                "url": {
                  "path": [
                    "retention_policies",
                    "<string>",
                    "assignments"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "type",
                      "value": "<string>"
                    },
                    {
                      "key": "marker",
                      "value": "<string>"
                    },
                    {
                      "key": "limit",
                      "value": "100"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "0690fb6e-140b-44b6-ba9b-6c35a59482de",
          "name": "Assign retention policy",
          "request": {
            "name": "Assign retention policy",
            "description": {
              "content": "Assigns a retention policy to an item.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "retention_policy_assignments"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": {
              "type": "oauth2"
            },
            "body": {
              "mode": "raw",
              "raw": "{\n    \"policy_id\": \"<string>\",\n    \"assign_to\": {\n        \"type\": \"<string>\",\n        \"id\": \"<string>\"\n    }\n}"
            }
          },
          "response": [
            {
              "id": "53b52b26-5cf2-4068-971f-7feb6eeaf68d",
              "name": "Returns a new retention policy assignment object.",
              "originalRequest": {
                "url": {
                  "path": [
                    "retention_policy_assignments"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"policy_id\": \"<string>\",\n    \"assign_to\": {\n        \"type\": \"<string>\",\n        \"id\": \"<string>\"\n    }\n}"
                }
              },
              "status": "Created",
              "code": 201,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"retention_policy\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"policy_name\": \"<string>\"\n },\n \"assigned_to\": {\n  \"id\": \"schema type not provided\"\n },\n \"assigned_by\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"assigned_at\": \"<dateTime>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "5cf4073d-0512-44c6-a28e-f75a757835ae",
              "name": "Returns an error if an `id` is specified while assigning a the\nretention policy to an enterprise.",
              "originalRequest": {
                "url": {
                  "path": [
                    "retention_policy_assignments"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"policy_id\": \"<string>\",\n    \"assign_to\": {\n        \"type\": \"<string>\",\n        \"id\": \"<string>\"\n    }\n}"
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "3a754041-9c87-4d76-8c6f-ffb3fc87b405",
              "name": "Returns an error if no retention policy with the given `policy_id` exists.",
              "originalRequest": {
                "url": {
                  "path": [
                    "retention_policy_assignments"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"policy_id\": \"<string>\",\n    \"assign_to\": {\n        \"type\": \"<string>\",\n        \"id\": \"<string>\"\n    }\n}"
                }
              },
              "status": "Not Found",
              "code": 404,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "9e785f0c-8b83-4e0f-be51-107197f46b47",
              "name": "Returns an error if a retention policy of equal or greater length has\nalready been assigned to this item.",
              "originalRequest": {
                "url": {
                  "path": [
                    "retention_policy_assignments"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"policy_id\": \"<string>\",\n    \"assign_to\": {\n        \"type\": \"<string>\",\n        \"id\": \"<string>\"\n    }\n}"
                }
              },
              "status": "Conflict",
              "code": 409,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "fdc29260-0a44-47be-bf41-26a458e6a311",
          "name": "Get policy assignment",
          "request": {
            "name": "Get policy assignment",
            "description": {
              "content": "Retrieves a retention policy assignment",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "retention_policy_assignments",
                ":retention_policy_assignment_id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "The ID of the retention policy assignment.",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "retention_policy_assignment_id"
                }
              ]
            },
            "method": "GET",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "f2d7b280-4b68-40d0-895c-587df7aec653",
              "name": "Returns the retention policy assignment object.",
              "originalRequest": {
                "url": {
                  "path": [
                    "retention_policy_assignments",
                    "<string>"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"retention_policy\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"policy_name\": \"<string>\"\n },\n \"assigned_to\": {\n  \"id\": \"schema type not provided\"\n },\n \"assigned_by\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"assigned_at\": \"<dateTime>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "a9a19489-ea44-4810-b1bd-e3c97cf553bf",
          "name": "List policy's assignments",
          "request": {
            "name": "List policy's assignments",
            "description": {
              "content": "Retrieves a list of items a legal hold policy has been assigned to.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "legal_hold_policy_assignments"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "description": "The ID of the legal hold policy",
                  "key": "policy_id",
                  "value": "<string>"
                },
                {
                  "description": "Filters the results by the type of item the\npolicy was applied to.",
                  "key": "assign_to_type",
                  "value": "<string>"
                },
                {
                  "description": "Filters the results by the ID of item the\npolicy was applied to.",
                  "key": "assign_to_id",
                  "value": "<string>"
                },
                {
                  "description": "The position marker at which to begin the response.\n\nThis requires `usemarker` to be set to true.",
                  "key": "marker",
                  "value": "<string>"
                },
                {
                  "description": "The maximum number of items to return per page.",
                  "key": "limit",
                  "value": "100"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "19284ba7-545a-45e5-8913-a148f3fffb2b",
              "name": "Returns a list of legal hold policy assignments.",
              "originalRequest": {
                "url": {
                  "path": [
                    "legal_hold_policy_assignments"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "policy_id",
                      "value": "<string>"
                    },
                    {
                      "key": "assign_to_type",
                      "value": "<string>"
                    },
                    {
                      "key": "assign_to_id",
                      "value": "<string>"
                    },
                    {
                      "key": "marker",
                      "value": "<string>"
                    },
                    {
                      "key": "limit",
                      "value": "100"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"limit\": \"<long>\",\n \"next_marker\": \"<long>\",\n \"prev_marker\": \"<long>\",\n \"entries\": [\n  {\n   \"id\": \"schema type not provided\",\n   \"type\": \"<string>\",\n   \"legal_hold_policy\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\"\n   },\n   \"assigned_to\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\"\n   },\n   \"assigned_by\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"assigned_at\": \"<dateTime>\",\n   \"deleted_at\": \"<dateTime>\"\n  },\n  {\n   \"id\": \"schema type not provided\",\n   \"type\": \"<string>\",\n   \"legal_hold_policy\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\"\n   },\n   \"assigned_to\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\"\n   },\n   \"assigned_by\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"assigned_at\": \"<dateTime>\",\n   \"deleted_at\": \"<dateTime>\"\n  }\n ]\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "3db6956a-2b25-4168-bc32-2ec6c6bcfc95",
          "name": "Get policy assignment",
          "request": {
            "name": "Get policy assignment",
            "description": {
              "content": "Retrieve a legal hold policy assignment.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "legal_hold_policy_assignments",
                ":legal_hold_policy_assignment_id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "The ID of the legal hold policy assignment",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "legal_hold_policy_assignment_id"
                }
              ]
            },
            "method": "GET",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "6fa2ebf9-5b34-444c-b3ce-0c46e8b5c8de",
              "name": "Returns a legal hold policy object.",
              "originalRequest": {
                "url": {
                  "path": [
                    "legal_hold_policy_assignments",
                    "<string>"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"legal_hold_policy\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\"\n },\n \"assigned_to\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"sequence_id\": \"<string>\",\n  \"etag\": \"<string>\",\n  \"name\": \"<string>\"\n },\n \"assigned_by\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"assigned_at\": \"<dateTime>\",\n \"deleted_at\": \"<dateTime>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "6c4169ff-47ea-4e45-bdf7-84b434c5e019",
          "name": "List retentions on files",
          "request": {
            "name": "List retentions on files",
            "description": {
              "content": "Retrieves all file version retentions for the given enterprise.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "file_version_retentions"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "description": "Filters results by files with this ID.",
                  "key": "file_id",
                  "value": "<string>"
                },
                {
                  "description": "Filters results by file versions with this ID.",
                  "key": "file_version_id",
                  "value": "<string>"
                },
                {
                  "description": "Filters results by the retention policy with this ID.",
                  "key": "policy_id",
                  "value": "<string>"
                },
                {
                  "description": "Filters results by the retention policy with this disposition\naction.",
                  "key": "disposition_action",
                  "value": "<string>"
                },
                {
                  "description": "Filters results by files that will have their disposition\ncome into effect before this date.",
                  "key": "disposition_before",
                  "value": "<string>"
                },
                {
                  "description": "Filters results by files that will have their disposition\ncome into effect after this date.",
                  "key": "disposition_after",
                  "value": "<string>"
                },
                {
                  "description": "The maximum number of items to return per page.",
                  "key": "limit",
                  "value": "100"
                },
                {
                  "description": "The position marker at which to begin the response.\n\nThis requires `usemarker` to be set to true.",
                  "key": "marker",
                  "value": "<string>"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "a722ccf8-a9d1-4be9-a88a-1a612ffdfc9b",
              "name": "Returns a list of all file version retentions for the enterprise.",
              "originalRequest": {
                "url": {
                  "path": [
                    "file_version_retentions"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "file_id",
                      "value": "<string>"
                    },
                    {
                      "key": "file_version_id",
                      "value": "<string>"
                    },
                    {
                      "key": "policy_id",
                      "value": "<string>"
                    },
                    {
                      "key": "disposition_action",
                      "value": "<string>"
                    },
                    {
                      "key": "disposition_before",
                      "value": "<string>"
                    },
                    {
                      "key": "disposition_after",
                      "value": "<string>"
                    },
                    {
                      "key": "limit",
                      "value": "100"
                    },
                    {
                      "key": "marker",
                      "value": "<string>"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"limit\": \"<long>\",\n \"next_marker\": \"<long>\",\n \"prev_marker\": \"<long>\",\n \"entries\": [\n  {\n   \"id\": \"schema type not provided\",\n   \"type\": \"<string>\",\n   \"file_version\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"sha1\": \"<string>\"\n   },\n   \"file\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\"\n   },\n   \"applied_at\": \"<dateTime>\",\n   \"disposition_at\": \"<dateTime>\",\n   \"winning_retention_policy\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"policy_name\": \"<string>\"\n   }\n  },\n  {\n   \"id\": \"schema type not provided\",\n   \"type\": \"<string>\",\n   \"file_version\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"sha1\": \"<string>\"\n   },\n   \"file\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\"\n   },\n   \"applied_at\": \"<dateTime>\",\n   \"disposition_at\": \"<dateTime>\",\n   \"winning_retention_policy\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"policy_name\": \"<string>\"\n   }\n  }\n ]\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "b4b0d84d-bfab-4c53-8ff9-9572184a8359",
          "name": "Get retention for file",
          "request": {
            "name": "Get retention for file",
            "description": {
              "content": "Returns information about a file version retention.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "file_version_retentions",
                ":file_version_retention_id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "The ID of the file version retention",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "file_version_retention_id"
                }
              ]
            },
            "method": "GET",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "cbe43c89-886a-44cf-8d34-0d2aa3bc4f29",
              "name": "Returns a file version retention object.",
              "originalRequest": {
                "url": {
                  "path": [
                    "file_version_retentions",
                    "<string>"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"file_version\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"sha1\": \"<string>\"\n },\n \"file\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"sequence_id\": \"<string>\",\n  \"etag\": \"<string>\",\n  \"name\": \"<string>\"\n },\n \"applied_at\": \"<dateTime>\",\n \"disposition_at\": \"<dateTime>\",\n \"winning_retention_policy\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"policy_name\": \"<string>\"\n }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "4d84321e-1392-42a4-85eb-18f79f8b893c",
          "name": "Get policy assignment",
          "request": {
            "name": "Get policy assignment",
            "description": {
              "content": "Fetches a specific storage policy assignment.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "storage_policy_assignments",
                ":storage_policy_assignment_id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "The ID of the storage policy assignment.",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "storage_policy_assignment_id"
                }
              ]
            },
            "method": "GET",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "ef0fdf00-1131-4d19-8e86-73b5d198e01a",
              "name": "Returns a storage policy assignment object.",
              "originalRequest": {
                "url": {
                  "path": [
                    "storage_policy_assignments",
                    "<string>"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"storage_policy\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\"\n },\n \"assigned_to\": {\n  \"id\": \"schema type not provided\"\n }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        }
      ]
    },
    {
      "id": "53deba94-712e-4086-89b4-4ec7456cfba6",
      "name": "Legal Hold Policies",
      "item": [
        {
          "id": "1da95469-6ad3-4903-8296-46759a5048cb",
          "name": "List all legal hold policies",
          "request": {
            "name": "List all legal hold policies",
            "description": {
              "content": "Retrieves a list of legal hold policies that belong to\nan enterprise.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "legal_hold_policies"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "description": "Limits results to policies for which the names start with\nthis search term. This is a case-insensitive prefix.",
                  "key": "policy_name",
                  "value": "<string>"
                },
                {
                  "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response, unless explicitly specified.",
                  "key": "fields",
                  "value": "<string>,<string>"
                },
                {
                  "description": "The position marker at which to begin the response.\n\nThis requires `usemarker` to be set to true.",
                  "key": "marker",
                  "value": "<string>"
                },
                {
                  "description": "The maximum number of items to return per page.",
                  "key": "limit",
                  "value": "100"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "cd103af8-8dd8-4cc6-9fa7-66e11bd8b4e9",
              "name": "Returns a list of legal hold policies.",
              "originalRequest": {
                "url": {
                  "path": [
                    "legal_hold_policies"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "policy_name",
                      "value": "<string>"
                    },
                    {
                      "key": "fields",
                      "value": "<string>,<string>"
                    },
                    {
                      "key": "marker",
                      "value": "<string>"
                    },
                    {
                      "key": "limit",
                      "value": "100"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"limit\": \"<long>\",\n \"next_marker\": \"<long>\",\n \"prev_marker\": \"<long>\",\n \"entries\": [\n  {\n   \"id\": \"schema type not provided\",\n   \"type\": \"<string>\",\n   \"policy_name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"status\": \"<string>\",\n   \"assignment_counts\": {\n    \"user\": \"<long>\",\n    \"folder\": \"<long>\",\n    \"file\": \"<long>\",\n    \"file_version\": \"<long>\"\n   },\n   \"created_by\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"created_at\": \"<dateTime>\",\n   \"modified_at\": \"<dateTime>\",\n   \"deleted_at\": \"<dateTime>\",\n   \"filter_started_at\": \"<dateTime>\",\n   \"filter_ended_at\": \"<dateTime>\",\n   \"release_notes\": \"<string>\"\n  },\n  {\n   \"id\": \"schema type not provided\",\n   \"type\": \"<string>\",\n   \"policy_name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"status\": \"<string>\",\n   \"assignment_counts\": {\n    \"user\": \"<long>\",\n    \"folder\": \"<long>\",\n    \"file\": \"<long>\",\n    \"file_version\": \"<long>\"\n   },\n   \"created_by\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"created_at\": \"<dateTime>\",\n   \"modified_at\": \"<dateTime>\",\n   \"deleted_at\": \"<dateTime>\",\n   \"filter_started_at\": \"<dateTime>\",\n   \"filter_ended_at\": \"<dateTime>\",\n   \"release_notes\": \"<string>\"\n  }\n ]\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "8c07378c-d095-4006-8e7f-b81a68409305",
          "name": "Create legal hold policy",
          "request": {
            "name": "Create legal hold policy",
            "description": {
              "content": "Create a new legal hold policy.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "legal_hold_policies"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": {
              "type": "oauth2"
            },
            "body": {
              "mode": "raw",
              "raw": "{\n    \"policy_name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"filter_started_at\": \"<dateTime>\",\n    \"filter_ended_at\": \"<dateTime>\",\n    \"is_ongoing\": \"<boolean>\"\n}"
            }
          },
          "response": [
            {
              "id": "f28eb76a-5e23-4cee-bfbf-fc86a879cdac",
              "name": "Returns a new legal hold policy object.",
              "originalRequest": {
                "url": {
                  "path": [
                    "legal_hold_policies"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"policy_name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"filter_started_at\": \"<dateTime>\",\n    \"filter_ended_at\": \"<dateTime>\",\n    \"is_ongoing\": \"<boolean>\"\n}"
                }
              },
              "status": "Created",
              "code": 201,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"policy_name\": \"<string>\",\n \"description\": \"<string>\",\n \"status\": \"<string>\",\n \"assignment_counts\": {\n  \"user\": \"<long>\",\n  \"folder\": \"<long>\",\n  \"file\": \"<long>\",\n  \"file_version\": \"<long>\"\n },\n \"created_by\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"created_at\": \"<dateTime>\",\n \"modified_at\": \"<dateTime>\",\n \"deleted_at\": \"<dateTime>\",\n \"filter_started_at\": \"<dateTime>\",\n \"filter_ended_at\": \"<dateTime>\",\n \"release_notes\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "ce2131c3-6c8d-4ec0-a3a2-90a5952ec2db",
              "name": "Returns an error if required parameters are missing,\nor neither `is_ongoing` or filter dates are specified.",
              "originalRequest": {
                "url": {
                  "path": [
                    "legal_hold_policies"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"policy_name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"filter_started_at\": \"<dateTime>\",\n    \"filter_ended_at\": \"<dateTime>\",\n    \"is_ongoing\": \"<boolean>\"\n}"
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"policy_name\": \"<string>\",\n \"description\": \"<string>\",\n \"status\": \"<string>\",\n \"assignment_counts\": {\n  \"user\": \"<long>\",\n  \"folder\": \"<long>\",\n  \"file\": \"<long>\",\n  \"file_version\": \"<long>\"\n },\n \"created_by\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"created_at\": \"<dateTime>\",\n \"modified_at\": \"<dateTime>\",\n \"deleted_at\": \"<dateTime>\",\n \"filter_started_at\": \"<dateTime>\",\n \"filter_ended_at\": \"<dateTime>\",\n \"release_notes\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "ab35471e-dca2-4314-9219-cabc2155d86d",
              "name": "Returns an error if a policy with this name already exists.",
              "originalRequest": {
                "url": {
                  "path": [
                    "legal_hold_policies"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"policy_name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"filter_started_at\": \"<dateTime>\",\n    \"filter_ended_at\": \"<dateTime>\",\n    \"is_ongoing\": \"<boolean>\"\n}"
                }
              },
              "status": "Conflict",
              "code": 409,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "46f5b843-2e03-4d19-bd95-b48deec04cce",
          "name": "Get legal hold policy",
          "request": {
            "name": "Get legal hold policy",
            "description": {
              "content": "Retrieve a legal hold policy.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "legal_hold_policies",
                ":legal_hold_policy_id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "The ID of the legal hold policy",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "legal_hold_policy_id"
                }
              ]
            },
            "method": "GET",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "37c9c95f-0f8e-42ef-9e17-9347167eae40",
              "name": "Returns a legal hold policy object.",
              "originalRequest": {
                "url": {
                  "path": [
                    "legal_hold_policies",
                    "<string>"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"policy_name\": \"<string>\",\n \"description\": \"<string>\",\n \"status\": \"<string>\",\n \"assignment_counts\": {\n  \"user\": \"<long>\",\n  \"folder\": \"<long>\",\n  \"file\": \"<long>\",\n  \"file_version\": \"<long>\"\n },\n \"created_by\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"created_at\": \"<dateTime>\",\n \"modified_at\": \"<dateTime>\",\n \"deleted_at\": \"<dateTime>\",\n \"filter_started_at\": \"<dateTime>\",\n \"filter_ended_at\": \"<dateTime>\",\n \"release_notes\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "ea1b61ff-10ce-41ad-a033-1196a1a9f8f9",
          "name": "Update legal hold policy",
          "request": {
            "name": "Update legal hold policy",
            "description": {
              "content": "Update legal hold policy.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "legal_hold_policies",
                ":legal_hold_policy_id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "The ID of the legal hold policy",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "legal_hold_policy_id"
                }
              ]
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "auth": {
              "type": "oauth2"
            },
            "body": {
              "mode": "raw",
              "raw": "{\n    \"policy_name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"release_notes\": \"<string>\"\n}"
            }
          },
          "response": [
            {
              "id": "3aa27389-0913-4518-86cd-79a22be0b0f3",
              "name": "Returns a new legal hold policy object.",
              "originalRequest": {
                "url": {
                  "path": [
                    "legal_hold_policies",
                    "<string>"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"policy_name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"release_notes\": \"<string>\"\n}"
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"policy_name\": \"<string>\",\n \"description\": \"<string>\",\n \"status\": \"<string>\",\n \"assignment_counts\": {\n  \"user\": \"<long>\",\n  \"folder\": \"<long>\",\n  \"file\": \"<long>\",\n  \"file_version\": \"<long>\"\n },\n \"created_by\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"created_at\": \"<dateTime>\",\n \"modified_at\": \"<dateTime>\",\n \"deleted_at\": \"<dateTime>\",\n \"filter_started_at\": \"<dateTime>\",\n \"filter_ended_at\": \"<dateTime>\",\n \"release_notes\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "f597b104-9fe4-405a-80c7-603cbbd338af",
              "name": "Returns an error if a policy with this name already exists.",
              "originalRequest": {
                "url": {
                  "path": [
                    "legal_hold_policies",
                    "<string>"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"policy_name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"release_notes\": \"<string>\"\n}"
                }
              },
              "status": "Conflict",
              "code": 409,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "0cc1946e-b222-4f64-989a-68963702a34c",
          "name": "Delete legal hold policy",
          "request": {
            "name": "Delete legal hold policy",
            "description": {
              "content": "Delete an existing legal hold policy.\n\nThis is an asynchronous process. The policy will not be\nfully deleted yet when the response returns.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "legal_hold_policies",
                ":legal_hold_policy_id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "The ID of the legal hold policy",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "legal_hold_policy_id"
                }
              ]
            },
            "method": "DELETE",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "ed47fce9-a0a8-4f2d-8203-575cfb782221",
              "name": "A blank response is returned if the policy was\nsuccessfully deleted.",
              "originalRequest": {
                "url": {
                  "path": [
                    "legal_hold_policies",
                    "<string>"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE",
                "body": {}
              },
              "status": "Accepted",
              "code": 202,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            }
          ],
          "event": []
        },
        {
          "id": "acf919d1-9466-4bdd-bc3e-c910e22a974f",
          "name": "Assign legal hold policy",
          "request": {
            "name": "Assign legal hold policy",
            "description": {
              "content": "Assign a legal hold to a file, file version, folder, or user.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "legal_hold_policy_assignments"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": {
              "type": "oauth2"
            },
            "body": {
              "mode": "raw",
              "raw": "{\n    \"policy_id\": \"<string>\",\n    \"assign_to\": {\n        \"type\": \"<string>\",\n        \"id\": \"<string>\"\n    }\n}"
            }
          },
          "response": [
            {
              "id": "4c171a03-470e-4fec-a935-05baf262aeee",
              "name": "Returns a new legal hold policy assignment.",
              "originalRequest": {
                "url": {
                  "path": [
                    "legal_hold_policy_assignments"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"policy_id\": \"<string>\",\n    \"assign_to\": {\n        \"type\": \"<string>\",\n        \"id\": \"<string>\"\n    }\n}"
                }
              },
              "status": "Created",
              "code": 201,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"legal_hold_policy\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\"\n },\n \"assigned_to\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"sequence_id\": \"<string>\",\n  \"etag\": \"<string>\",\n  \"name\": \"<string>\"\n },\n \"assigned_by\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"assigned_at\": \"<dateTime>\",\n \"deleted_at\": \"<dateTime>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "f0753533-60b2-426d-92af-2503d1c9d880",
          "name": "Unassign legal hold policy",
          "request": {
            "name": "Unassign legal hold policy",
            "description": {
              "content": "Remove a legal hold from an item.\n\nThis is an asynchronous process. The policy will not be\nfully removed yet when the response returns.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "legal_hold_policy_assignments",
                ":legal_hold_policy_assignment_id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "The ID of the legal hold policy assignment",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "legal_hold_policy_assignment_id"
                }
              ]
            },
            "method": "DELETE",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "c15b010d-87c4-43bd-8fd6-613e2ced4fcc",
              "name": "A blank response is returned if the assignment was\nsuccessfully deleted.",
              "originalRequest": {
                "url": {
                  "path": [
                    "legal_hold_policy_assignments",
                    "<string>"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE",
                "body": {}
              },
              "status": "Accepted",
              "code": 202,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            }
          ],
          "event": []
        },
        {
          "id": "6b796564-13b5-413a-82a2-fd84abde032d",
          "name": "List legal holds for policy",
          "request": {
            "name": "List legal holds for policy",
            "description": {
              "content": "Get list of non-deleted legal holds for a single legal\nhold policy.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "file_version_legal_holds"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "description": "The ID of the legal hold policy to get the file version legal\nholds for.",
                  "key": "policy_id",
                  "value": "<string>"
                },
                {
                  "description": "The position marker at which to begin the response.\n\nThis requires `usemarker` to be set to true.",
                  "key": "marker",
                  "value": "<string>"
                },
                {
                  "description": "The maximum number of items to return per page.",
                  "key": "limit",
                  "value": "100"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "9f02f011-d264-4d63-a75e-f52fd843cd86",
              "name": "Returns the list of file version legal holds for a specific legal\nhold policy.",
              "originalRequest": {
                "url": {
                  "path": [
                    "file_version_legal_holds"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "policy_id",
                      "value": "<string>"
                    },
                    {
                      "key": "marker",
                      "value": "<string>"
                    },
                    {
                      "key": "limit",
                      "value": "100"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"limit\": \"<long>\",\n \"next_marker\": \"<long>\",\n \"prev_marker\": \"<long>\",\n \"entries\": [\n  {\n   \"id\": \"schema type not provided\",\n   \"type\": \"<string>\",\n   \"file_version\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"sha1\": \"<string>\"\n   },\n   \"file\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\"\n   },\n   \"legal_hold_policy_assignments\": [\n    {\n     \"id\": \"schema type not provided\",\n     \"type\": \"<string>\",\n     \"legal_hold_policy\": {\n      \"id\": \"schema type not provided\",\n      \"type\": \"<string>\"\n     },\n     \"assigned_to\": {\n      \"id\": \"schema type not provided\",\n      \"type\": \"<string>\",\n      \"sequence_id\": \"<string>\",\n      \"etag\": \"<string>\",\n      \"name\": \"<string>\"\n     },\n     \"assigned_by\": {\n      \"id\": \"schema type not provided\",\n      \"type\": \"<string>\",\n      \"name\": \"<string>\",\n      \"login\": \"<email>\"\n     },\n     \"assigned_at\": \"<dateTime>\",\n     \"deleted_at\": \"<dateTime>\"\n    },\n    {\n     \"id\": \"schema type not provided\",\n     \"type\": \"<string>\",\n     \"legal_hold_policy\": {\n      \"id\": \"schema type not provided\",\n      \"type\": \"<string>\"\n     },\n     \"assigned_to\": {\n      \"id\": \"schema type not provided\",\n      \"type\": \"<string>\",\n      \"sequence_id\": \"<string>\",\n      \"etag\": \"<string>\",\n      \"name\": \"<string>\"\n     },\n     \"assigned_by\": {\n      \"id\": \"schema type not provided\",\n      \"type\": \"<string>\",\n      \"name\": \"<string>\",\n      \"login\": \"<email>\"\n     },\n     \"assigned_at\": \"<dateTime>\",\n     \"deleted_at\": \"<dateTime>\"\n    }\n   ],\n   \"deleted_at\": \"<dateTime>\"\n  },\n  {\n   \"id\": \"schema type not provided\",\n   \"type\": \"<string>\",\n   \"file_version\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"sha1\": \"<string>\"\n   },\n   \"file\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\"\n   },\n   \"legal_hold_policy_assignments\": [\n    {\n     \"id\": \"schema type not provided\",\n     \"type\": \"<string>\",\n     \"legal_hold_policy\": {\n      \"id\": \"schema type not provided\",\n      \"type\": \"<string>\"\n     },\n     \"assigned_to\": {\n      \"id\": \"schema type not provided\",\n      \"type\": \"<string>\",\n      \"sequence_id\": \"<string>\",\n      \"etag\": \"<string>\",\n      \"name\": \"<string>\"\n     },\n     \"assigned_by\": {\n      \"id\": \"schema type not provided\",\n      \"type\": \"<string>\",\n      \"name\": \"<string>\",\n      \"login\": \"<email>\"\n     },\n     \"assigned_at\": \"<dateTime>\",\n     \"deleted_at\": \"<dateTime>\"\n    },\n    {\n     \"id\": \"schema type not provided\",\n     \"type\": \"<string>\",\n     \"legal_hold_policy\": {\n      \"id\": \"schema type not provided\",\n      \"type\": \"<string>\"\n     },\n     \"assigned_to\": {\n      \"id\": \"schema type not provided\",\n      \"type\": \"<string>\",\n      \"sequence_id\": \"<string>\",\n      \"etag\": \"<string>\",\n      \"name\": \"<string>\"\n     },\n     \"assigned_by\": {\n      \"id\": \"schema type not provided\",\n      \"type\": \"<string>\",\n      \"name\": \"<string>\",\n      \"login\": \"<email>\"\n     },\n     \"assigned_at\": \"<dateTime>\",\n     \"deleted_at\": \"<dateTime>\"\n    }\n   ],\n   \"deleted_at\": \"<dateTime>\"\n  }\n ]\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "dc14c1ef-2a2f-4d28-90d1-9a2b2eb4b811",
          "name": "Inspect legal hold on file",
          "request": {
            "name": "Inspect legal hold on file",
            "description": {
              "content": "Retrieves information about the legal hold policies\nassigned to a file version.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "file_version_legal_holds",
                ":file_version_legal_hold_id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "The ID of the file version legal hold",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "file_version_legal_hold_id"
                }
              ]
            },
            "method": "GET",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "78eb3687-f658-4290-98e1-c94256a25312",
              "name": "Returns the legal hold policy assignments for the file version.",
              "originalRequest": {
                "url": {
                  "path": [
                    "file_version_legal_holds",
                    "<string>"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"file_version\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"sha1\": \"<string>\"\n },\n \"file\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"sequence_id\": \"<string>\",\n  \"etag\": \"<string>\",\n  \"name\": \"<string>\"\n },\n \"legal_hold_policy_assignments\": [\n  {\n   \"id\": \"schema type not provided\",\n   \"type\": \"<string>\",\n   \"legal_hold_policy\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\"\n   },\n   \"assigned_to\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\"\n   },\n   \"assigned_by\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"assigned_at\": \"<dateTime>\",\n   \"deleted_at\": \"<dateTime>\"\n  },\n  {\n   \"id\": \"schema type not provided\",\n   \"type\": \"<string>\",\n   \"legal_hold_policy\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\"\n   },\n   \"assigned_to\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\"\n   },\n   \"assigned_by\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"assigned_at\": \"<dateTime>\",\n   \"deleted_at\": \"<dateTime>\"\n  }\n ],\n \"deleted_at\": \"<dateTime>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        }
      ]
    },
    {
      "id": "cfee8c6f-88f9-4bdd-82ba-e17d5e15be82",
      "name": "Device Pins",
      "item": [
        {
          "id": "229fe671-6d02-4ecc-a79f-687f9ca391a1",
          "name": "Get device pin",
          "request": {
            "name": "Get device pin",
            "description": {
              "content": "Retrieves information about an individual device pin.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "device_pinners",
                ":device_pinner_id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "The ID of the device pin",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "device_pinner_id"
                }
              ]
            },
            "method": "GET",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "7a535f47-f166-4659-8e3f-89d44afe91af",
              "name": "Returns information about a single device pin.",
              "originalRequest": {
                "url": {
                  "path": [
                    "device_pinners",
                    "<string>"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"owned_by\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"product_name\": \"<string>\",\n \"created_at\": \"<dateTime>\",\n \"modified_at\": \"<dateTime>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "e02a1f30-5ba7-4d7b-b1a0-82d96a9d3d4b",
          "name": "Delete device pin",
          "request": {
            "name": "Delete device pin",
            "description": {
              "content": "Deletes an individual device pin.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "device_pinners",
                ":device_pinner_id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "The ID of the device pin",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "device_pinner_id"
                }
              ]
            },
            "method": "DELETE",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "d0ae90e9-7598-4fdf-90d5-f2b7f3252223",
              "name": "Returns an empty response when the pin has been deleted.",
              "originalRequest": {
                "url": {
                  "path": [
                    "device_pinners",
                    "<string>"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE",
                "body": {}
              },
              "status": "No Content",
              "code": 204,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            }
          ],
          "event": []
        },
        {
          "id": "4cc3a5bf-c5e9-450f-aed2-34186504cd31",
          "name": "List enterprise device pins",
          "request": {
            "name": "List enterprise device pins",
            "description": {
              "content": "Retrieves all the device pins within an enterprise.\n\nThe user must have admin privileges, and the application\nneeds the \"manage enterprise\" scope to make this call.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "enterprises",
                ":enterprise_id",
                "device_pinners"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "description": "The position marker at which to begin the response.\n\nThis requires `usemarker` to be set to true.",
                  "key": "marker",
                  "value": "<string>"
                },
                {
                  "description": "The maximum number of items to return per page.",
                  "key": "limit",
                  "value": "100"
                },
                {
                  "description": "The direction to sort items in.",
                  "key": "direction",
                  "value": "<string>"
                }
              ],
              "variable": [
                {
                  "description": {
                    "content": "The ID of the enterprise",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "enterprise_id"
                }
              ]
            },
            "method": "GET",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "7d3f5077-ecb0-463f-bbc7-7c0e3c389889",
              "name": "Returns a list of device pins for a given enterprise.",
              "originalRequest": {
                "url": {
                  "path": [
                    "enterprises",
                    "<string>",
                    "device_pinners"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "marker",
                      "value": "<string>"
                    },
                    {
                      "key": "limit",
                      "value": "100"
                    },
                    {
                      "key": "direction",
                      "value": "<string>"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"limit\": \"<long>\",\n \"next_marker\": \"<long>\",\n \"prev_marker\": \"<long>\",\n \"entries\": [\n  {\n   \"id\": \"schema type not provided\",\n   \"type\": \"<string>\",\n   \"owned_by\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"product_name\": \"<string>\",\n   \"created_at\": \"<dateTime>\",\n   \"modified_at\": \"<dateTime>\"\n  },\n  {\n   \"id\": \"schema type not provided\",\n   \"type\": \"<string>\",\n   \"owned_by\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"product_name\": \"<string>\",\n   \"created_at\": \"<dateTime>\",\n   \"modified_at\": \"<dateTime>\"\n  }\n ]\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        }
      ]
    },
    {
      "id": "a5e8ac0b-beb2-4769-970e-369e829c7121",
      "name": "Terms of Service",
      "item": [
        {
          "id": "acde4291-7246-460b-a5df-3879237f84d0",
          "name": "List terms of services",
          "request": {
            "name": "List terms of services",
            "description": {
              "content": "Returns the current terms of service text and settings\nfor the enterprise.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "terms_of_services"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "description": "Limits the results to the terms of service of the given type.",
                  "key": "tos_type",
                  "value": "<string>"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "41ba5400-91af-4399-8942-f533e2dc731a",
              "name": "Returns a collection of terms of service text and settings for the\nenterprise.",
              "originalRequest": {
                "url": {
                  "path": [
                    "terms_of_services"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "tos_type",
                      "value": "<string>"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"total_count\": \"<long>\",\n \"entries\": [\n  {\n   \"id\": \"schema type not provided\",\n   \"type\": \"<string>\",\n   \"status\": \"<string>\",\n   \"enterprise\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\"\n   },\n   \"tos_type\": \"<string>\",\n   \"text\": \"<string>\",\n   \"created_at\": \"<dateTime>\",\n   \"modified_at\": \"<dateTime>\"\n  },\n  {\n   \"id\": \"schema type not provided\",\n   \"type\": \"<string>\",\n   \"status\": \"<string>\",\n   \"enterprise\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\"\n   },\n   \"tos_type\": \"<string>\",\n   \"text\": \"<string>\",\n   \"created_at\": \"<dateTime>\",\n   \"modified_at\": \"<dateTime>\"\n  }\n ]\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "3c5ecc96-c23b-4de6-b629-b7ccc571a66e",
          "name": "Create terms of service",
          "request": {
            "name": "Create terms of service",
            "description": {
              "content": "Creates a terms of service for a given enterprise\nand type of user.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "terms_of_services"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": {
              "type": "oauth2"
            },
            "body": {
              "mode": "raw",
              "raw": "{\n    \"status\": \"<string>\",\n    \"text\": \"<string>\",\n    \"tos_type\": \"<string>\"\n}"
            }
          },
          "response": [
            {
              "id": "6dc78fce-1b75-4707-897a-878a7a11942f",
              "name": "Returns a new task object",
              "originalRequest": {
                "url": {
                  "path": [
                    "terms_of_services"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"status\": \"<string>\",\n    \"text\": \"<string>\",\n    \"tos_type\": \"<string>\"\n}"
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"item\": {\n  \"id\": \"<string>\",\n  \"type\": \"<string>\",\n  \"sequence_id\": \"<string>\",\n  \"etag\": \"<string>\",\n  \"name\": \"<string>\"\n },\n \"due_at\": \"<dateTime>\",\n \"action\": \"<string>\",\n \"message\": \"<string>\",\n \"task_assignment_collection\": {\n  \"total_count\": \"<long>\",\n  \"limit\": \"<long>\",\n  \"offset\": \"<long>\",\n  \"order\": [\n   {\n    \"by\": \"<string>\",\n    \"direction\": \"<string>\"\n   },\n   {\n    \"by\": \"<string>\",\n    \"direction\": \"<string>\"\n   }\n  ],\n  \"entries\": [\n   {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"item\": {\n     \"id\": \"schema type not provided\",\n     \"type\": \"<string>\",\n     \"sequence_id\": \"<string>\",\n     \"etag\": \"<string>\",\n     \"name\": \"<string>\"\n    },\n    \"assigned_to\": {\n     \"id\": \"schema type not provided\",\n     \"type\": \"<string>\",\n     \"name\": \"<string>\",\n     \"login\": \"<email>\"\n    },\n    \"message\": \"<string>\",\n    \"completed_at\": \"<dateTime>\",\n    \"assigned_at\": \"<dateTime>\",\n    \"reminded_at\": \"<dateTime>\",\n    \"resolution_state\": \"<string>\",\n    \"assigned_by\": {\n     \"id\": \"schema type not provided\",\n     \"type\": \"<string>\",\n     \"name\": \"<string>\",\n     \"login\": \"<email>\"\n    }\n   },\n   {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"item\": {\n     \"id\": \"schema type not provided\",\n     \"type\": \"<string>\",\n     \"sequence_id\": \"<string>\",\n     \"etag\": \"<string>\",\n     \"name\": \"<string>\"\n    },\n    \"assigned_to\": {\n     \"id\": \"schema type not provided\",\n     \"type\": \"<string>\",\n     \"name\": \"<string>\",\n     \"login\": \"<email>\"\n    },\n    \"message\": \"<string>\",\n    \"completed_at\": \"<dateTime>\",\n    \"assigned_at\": \"<dateTime>\",\n    \"reminded_at\": \"<dateTime>\",\n    \"resolution_state\": \"<string>\",\n    \"assigned_by\": {\n     \"id\": \"schema type not provided\",\n     \"type\": \"<string>\",\n     \"name\": \"<string>\",\n     \"login\": \"<email>\"\n    }\n   }\n  ]\n },\n \"is_completed\": \"<boolean>\",\n \"created_by\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"created_at\": \"<dateTime>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "c49d9df1-dac9-4907-8320-d7dde4eaa47e",
          "name": "Get terms of service",
          "request": {
            "name": "Get terms of service",
            "description": {
              "content": "Fetches a specific terms of service.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "terms_of_services",
                ":terms_of_service_id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "The ID of the terms of service.",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "terms_of_service_id"
                }
              ]
            },
            "method": "GET",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "0812233d-8bf9-43f0-9d36-af7ef22be42a",
              "name": "Returns a terms of service object.",
              "originalRequest": {
                "url": {
                  "path": [
                    "terms_of_services",
                    "<string>"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"status\": \"<string>\",\n \"enterprise\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\"\n },\n \"tos_type\": \"<string>\",\n \"text\": \"<string>\",\n \"created_at\": \"<dateTime>\",\n \"modified_at\": \"<dateTime>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "87e73b85-1fa1-4790-8717-85b53134790d",
          "name": "Update terms of service",
          "request": {
            "name": "Update terms of service",
            "description": {
              "content": "Updates a specific terms of service.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "terms_of_services",
                ":terms_of_service_id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "The ID of the terms of service.",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "terms_of_service_id"
                }
              ]
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "auth": {
              "type": "oauth2"
            },
            "body": {
              "mode": "raw",
              "raw": "{\n    \"status\": \"<string>\",\n    \"text\": \"<string>\",\n    \"nisi14a\": true\n}"
            }
          },
          "response": [
            {
              "id": "7bc415fb-8e4f-4295-b34d-784f14310f9e",
              "name": "Returns an updated terms of service object.",
              "originalRequest": {
                "url": {
                  "path": [
                    "terms_of_services",
                    "<string>"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"status\": \"<string>\",\n    \"text\": \"<string>\",\n    \"nisi14a\": true\n}"
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"status\": \"<string>\",\n \"enterprise\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\"\n },\n \"tos_type\": \"<string>\",\n \"text\": \"<string>\",\n \"created_at\": \"<dateTime>\",\n \"modified_at\": \"<dateTime>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "55ca1a22-d1de-4594-9f83-e248f2d25619",
          "name": "List ToS user statuses",
          "request": {
            "name": "List ToS user statuses",
            "description": {
              "content": "Retrieves an overview of users and their status for a\nterms of service, including Whether they have accepted\nthe terms and when.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "terms_of_service_user_statuses"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "description": "The ID of the terms of service.",
                  "key": "tos_id",
                  "value": "<string>"
                },
                {
                  "description": "Limits results to the given user ID.",
                  "key": "user_id",
                  "value": "<string>"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "e3cd9e45-8336-4567-85c8-b5973b4e9746",
              "name": "Returns a list of terms of service statuses.",
              "originalRequest": {
                "url": {
                  "path": [
                    "terms_of_service_user_statuses"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "tos_id",
                      "value": "<string>"
                    },
                    {
                      "key": "user_id",
                      "value": "<string>"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"total_count\": \"<long>\",\n \"entries\": [\n  {\n   \"id\": \"schema type not provided\",\n   \"type\": \"<string>\",\n   \"tos\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\"\n   },\n   \"user\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"is_accepted\": \"<boolean>\",\n   \"created_at\": \"<dateTime>\",\n   \"modified_at\": \"<dateTime>\"\n  },\n  {\n   \"id\": \"schema type not provided\",\n   \"type\": \"<string>\",\n   \"tos\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\"\n   },\n   \"user\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"is_accepted\": \"<boolean>\",\n   \"created_at\": \"<dateTime>\",\n   \"modified_at\": \"<dateTime>\"\n  }\n ]\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "33c39014-b30a-41b2-a54b-819c91200fc5",
          "name": "Set status for new user",
          "request": {
            "name": "Set status for new user",
            "description": {
              "content": "Sets the status for a terms of service for a user.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "terms_of_service_user_statuses"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": {
              "type": "oauth2"
            },
            "body": {
              "mode": "raw",
              "raw": "{\n    \"tos\": {\n        \"id\": \"<string>\",\n        \"type\": \"<string>\"\n    },\n    \"user\": {\n        \"id\": \"<string>\",\n        \"type\": \"<string>\"\n    },\n    \"is_accepted\": \"<boolean>\"\n}"
            }
          },
          "response": [
            {
              "id": "19a5aacc-d2da-4a37-a0d1-2bfab5c16c88",
              "name": "Returns a terms of service status object.",
              "originalRequest": {
                "url": {
                  "path": [
                    "terms_of_service_user_statuses"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"tos\": {\n        \"id\": \"<string>\",\n        \"type\": \"<string>\"\n    },\n    \"user\": {\n        \"id\": \"<string>\",\n        \"type\": \"<string>\"\n    },\n    \"is_accepted\": \"<boolean>\"\n}"
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"tos\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\"\n },\n \"user\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"is_accepted\": \"<boolean>\",\n \"created_at\": \"<dateTime>\",\n \"modified_at\": \"<dateTime>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "873aa2e2-6027-45e4-92c0-6b74185854c1",
          "name": "Set status for existing user",
          "request": {
            "name": "Set status for existing user",
            "description": {
              "content": "Updates the status for a terms of service for a user.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "terms_of_service_user_statuses",
                ":terms_of_service_user_status_id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "The ID of the terms of service status.",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "terms_of_service_user_status_id"
                }
              ]
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "auth": {
              "type": "oauth2"
            },
            "body": {
              "mode": "raw",
              "raw": "{\n    \"is_accepted\": \"<boolean>\"\n}"
            }
          },
          "response": [
            {
              "id": "39629ad7-4e7f-4a02-9efc-7c895b2fe2fa",
              "name": "Returns the updated terms of service status object.",
              "originalRequest": {
                "url": {
                  "path": [
                    "terms_of_service_user_statuses",
                    "<string>"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"is_accepted\": \"<boolean>\"\n}"
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"tos\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\"\n },\n \"user\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"is_accepted\": \"<boolean>\",\n \"created_at\": \"<dateTime>\",\n \"modified_at\": \"<dateTime>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        }
      ]
    },
    {
      "id": "392de428-6c5c-468f-a8f3-0b6d4b6d5cd8",
      "name": "Collaboration Whitelist",
      "item": [
        {
          "id": "989009d0-0be6-4f30-9921-1a43ae9fe7de",
          "name": "List whitelist entries",
          "request": {
            "name": "List whitelist entries",
            "description": {
              "content": "Returns the list of whitelist entries which specify what domains can\ncollaborate with the current enterprise.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "collaboration_whitelist_entries"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "description": "The position marker at which to begin the response.\n\nThis requires `usemarker` to be set to true.",
                  "key": "marker",
                  "value": "<string>"
                },
                {
                  "description": "The maximum number of items to return per page.",
                  "key": "limit",
                  "value": "100"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "ea328621-345c-4b9c-952a-96e9b3b434ca",
              "name": "Returns a collection of collaboration whitelist entries.",
              "originalRequest": {
                "url": {
                  "path": [
                    "collaboration_whitelist_entries"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "marker",
                      "value": "<string>"
                    },
                    {
                      "key": "limit",
                      "value": "100"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"limit\": \"<long>\",\n \"next_marker\": \"<long>\",\n \"prev_marker\": \"<long>\",\n \"entries\": [\n  {\n   \"id\": \"schema type not provided\",\n   \"type\": \"<string>\",\n   \"domain\": \"<string>\",\n   \"direction\": \"<string>\",\n   \"enterprise\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\"\n   },\n   \"created_at\": \"<dateTime>\"\n  },\n  {\n   \"id\": \"schema type not provided\",\n   \"type\": \"<string>\",\n   \"domain\": \"<string>\",\n   \"direction\": \"<string>\",\n   \"enterprise\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\"\n   },\n   \"created_at\": \"<dateTime>\"\n  }\n ]\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "95aa47ff-22e6-4ca7-899f-bbf2d93caab8",
          "name": "Create whitelist entry",
          "request": {
            "name": "Create whitelist entry",
            "description": {
              "content": "Creates a collaboration whitelist entry, specifying a domain\nand direction to allow collaboration for.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "collaboration_whitelist_entries"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": {
              "type": "oauth2"
            },
            "body": {
              "mode": "raw",
              "raw": "{\n    \"domain\": \"<string>\",\n    \"direction\": \"<string>\"\n}"
            }
          },
          "response": [
            {
              "id": "1e126dca-c712-4c6a-a9e7-c905973adb06",
              "name": "Returns a new collaboration whitelist entry.",
              "originalRequest": {
                "url": {
                  "path": [
                    "collaboration_whitelist_entries"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"domain\": \"<string>\",\n    \"direction\": \"<string>\"\n}"
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"domain\": \"<string>\",\n \"direction\": \"<string>\",\n \"enterprise\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\"\n },\n \"created_at\": \"<dateTime>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "35a9bf6d-440f-45f6-9f63-1313da2fda09",
          "name": "Get whitelist entry",
          "request": {
            "name": "Get whitelist entry",
            "description": {
              "content": "Returns a specific collaboration whitelist entry.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "collaboration_whitelist_entries",
                ":collaboration_whitelist_entry_id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "The ID of the collaboration whitelist item",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "collaboration_whitelist_entry_id"
                }
              ]
            },
            "method": "GET",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "9c3c1c5e-6d64-4de3-90c8-b7ab208dc1db",
              "name": "Returns a collaboration whitelist entry.",
              "originalRequest": {
                "url": {
                  "path": [
                    "collaboration_whitelist_entries",
                    "<string>"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"domain\": \"<string>\",\n \"direction\": \"<string>\",\n \"enterprise\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\"\n },\n \"created_at\": \"<dateTime>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "89bee394-bbbf-4e86-a608-34c56c47a94c",
          "name": "Delete whitelist entry",
          "request": {
            "name": "Delete whitelist entry",
            "description": {
              "content": "Deletes a specific collaboration whitelist entry.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "collaboration_whitelist_entries",
                ":collaboration_whitelist_entry_id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "The ID of the collaboration whitelist item",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "collaboration_whitelist_entry_id"
                }
              ]
            },
            "method": "DELETE",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "b708b90a-2d77-4de2-9d64-98b0925a5363",
              "name": "A blank response is returned if the entry was\nsuccessfully deleted.",
              "originalRequest": {
                "url": {
                  "path": [
                    "collaboration_whitelist_entries",
                    "<string>"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE",
                "body": {}
              },
              "status": "No Content",
              "code": 204,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            }
          ],
          "event": []
        },
        {
          "id": "e874bb10-df99-4ea8-8f3c-2884c53cd700",
          "name": "List whitelist exemptions",
          "request": {
            "name": "List whitelist exemptions",
            "description": {
              "content": "Returns a list of users who have been exempt from the collaboration\nwhitelist.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "collaboration_whitelist_exempt_targets"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "description": "The position marker at which to begin the response.\n\nThis requires `usemarker` to be set to true.",
                  "key": "marker",
                  "value": "<string>"
                },
                {
                  "description": "The maximum number of items to return per page.",
                  "key": "limit",
                  "value": "100"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "afddca03-880a-4597-916d-45d12ce29161",
              "name": "Returns a collection of collaboration whitelist exemptions.",
              "originalRequest": {
                "url": {
                  "path": [
                    "collaboration_whitelist_exempt_targets"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "marker",
                      "value": "<string>"
                    },
                    {
                      "key": "limit",
                      "value": "100"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"limit\": \"<long>\",\n \"next_marker\": \"<long>\",\n \"prev_marker\": \"<long>\",\n \"entries\": [\n  {\n   \"id\": \"schema type not provided\",\n   \"type\": \"<string>\",\n   \"enterprise\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\"\n   },\n   \"user\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\"\n   },\n   \"created_at\": \"<dateTime>\",\n   \"modified_at\": \"<dateTime>\"\n  },\n  {\n   \"id\": \"schema type not provided\",\n   \"type\": \"<string>\",\n   \"enterprise\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\"\n   },\n   \"user\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\"\n   },\n   \"created_at\": \"<dateTime>\",\n   \"modified_at\": \"<dateTime>\"\n  }\n ]\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "26ddfb42-511b-4bb5-865a-98a443e1258c",
          "name": "Create whitelist exemption",
          "request": {
            "name": "Create whitelist exemption",
            "description": {
              "content": "Creates a collaboration whitelist entry exemption, specifying a user\nthat is exempted from the whitelist.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "collaboration_whitelist_exempt_targets"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": {
              "type": "oauth2"
            },
            "body": {
              "mode": "raw",
              "raw": "{\n    \"user\": {\n        \"id\": \"<string>\"\n    }\n}"
            }
          },
          "response": [
            {
              "id": "78ec46b5-bd99-4222-9e00-02207b26b739",
              "name": "Returns a new collaboration whitelist entry.",
              "originalRequest": {
                "url": {
                  "path": [
                    "collaboration_whitelist_exempt_targets"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"user\": {\n        \"id\": \"<string>\"\n    }\n}"
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"enterprise\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\"\n },\n \"user\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\"\n },\n \"created_at\": \"<dateTime>\",\n \"modified_at\": \"<dateTime>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "c481c069-1237-4810-ad1e-03ac518f3f59",
          "name": "Get whitelist exemption",
          "request": {
            "name": "Get whitelist exemption",
            "description": {
              "content": "Returns a users who has been exempt from the collaboration\nwhitelist.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "collaboration_whitelist_exempt_targets",
                ":collaboration_whitelist_exempt_target_id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "The ID of the collaboration whitelist exemption",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "collaboration_whitelist_exempt_target_id"
                }
              ]
            },
            "method": "GET",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "a3db58c9-076e-444d-9f1b-b6e3edcafecb",
              "name": "Returns a collaboration whitelist exemption.",
              "originalRequest": {
                "url": {
                  "path": [
                    "collaboration_whitelist_exempt_targets",
                    "<string>"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"enterprise\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\"\n },\n \"user\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\"\n },\n \"created_at\": \"<dateTime>\",\n \"modified_at\": \"<dateTime>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "6881844e-53b6-4c94-a116-405e8517adbc",
          "name": "Remove whitelist exemption",
          "request": {
            "name": "Remove whitelist exemption",
            "description": {
              "content": "Deletes a specific collaboration whitelist exemption.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "collaboration_whitelist_exempt_targets",
                ":collaboration_whitelist_exempt_target_id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "The ID of the collaboration whitelist exemption",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "collaboration_whitelist_exempt_target_id"
                }
              ]
            },
            "method": "DELETE",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "1bd86120-0c87-4439-afed-a4072bab97a3",
              "name": "A blank response is returned if the exemption was\nsuccessfully deleted.",
              "originalRequest": {
                "url": {
                  "path": [
                    "collaboration_whitelist_exempt_targets",
                    "<string>"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE",
                "body": {}
              },
              "status": "No Content",
              "code": 204,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            }
          ],
          "event": []
        }
      ]
    },
    {
      "id": "7ddd47da-890b-4d9d-aa27-34794e09d4e6",
      "name": "Multi Zones",
      "item": [
        {
          "id": "416e59eb-c904-42bc-9122-5e8fa3384a66",
          "name": "List storage policies",
          "request": {
            "name": "List storage policies",
            "description": {
              "content": "Fetches all the storage policies in the enterprise.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "storage_policies"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response, unless explicitly specified.",
                  "key": "fields",
                  "value": "<string>,<string>"
                },
                {
                  "description": "The position marker at which to begin the response.\n\nThis requires `usemarker` to be set to true.",
                  "key": "marker",
                  "value": "<string>"
                },
                {
                  "description": "The maximum number of items to return per page.",
                  "key": "limit",
                  "value": "100"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "994fabab-f3f3-43c4-a73e-c92417790510",
              "name": "Returns a collection of storage policies.",
              "originalRequest": {
                "url": {
                  "path": [
                    "storage_policies"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "<string>,<string>"
                    },
                    {
                      "key": "marker",
                      "value": "<string>"
                    },
                    {
                      "key": "limit",
                      "value": "100"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"limit\": \"<long>\",\n \"next_marker\": \"<long>\",\n \"prev_marker\": \"<long>\",\n \"entries\": [\n  {\n   \"id\": \"schema type not provided\",\n   \"type\": \"<string>\",\n   \"name\": \"<string>\"\n  },\n  {\n   \"id\": \"schema type not provided\",\n   \"type\": \"<string>\",\n   \"name\": \"<string>\"\n  }\n ]\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "21bfd29e-9a45-45f8-8176-b306ad91eef7",
          "name": "Get storage policy",
          "request": {
            "name": "Get storage policy",
            "description": {
              "content": "Fetches a specific storage policy.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "storage_policies",
                ":storage_policy_id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "The ID of the storage policy.",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "storage_policy_id"
                }
              ]
            },
            "method": "GET",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "195657fb-fb71-4ec6-bdd4-027fc548cb77",
              "name": "Returns a storage policy object.",
              "originalRequest": {
                "url": {
                  "path": [
                    "storage_policies",
                    "<string>"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"name\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "0e19e5e8-7071-4636-8659-8a9902840676",
          "name": "List policy assignments",
          "request": {
            "name": "List policy assignments",
            "description": {
              "content": "Fetches all the storage policy assignment for an enterprise or user.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "storage_policy_assignments"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "description": "The position marker at which to begin the response.\n\nThis requires `usemarker` to be set to true.",
                  "key": "marker",
                  "value": "<string>"
                },
                {
                  "description": "The target type to return assignments for",
                  "key": "resolved_for_type",
                  "value": "<string>"
                },
                {
                  "description": "The ID of the user or enterprise to return assignments for",
                  "key": "resolved_for_id",
                  "value": "<string>"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "47d3e597-ff50-43c5-9788-bb6938a631c6",
              "name": "Returns a collection of storage policies for\nthe enterprise or user.",
              "originalRequest": {
                "url": {
                  "path": [
                    "storage_policy_assignments"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "marker",
                      "value": "<string>"
                    },
                    {
                      "key": "resolved_for_type",
                      "value": "<string>"
                    },
                    {
                      "key": "resolved_for_id",
                      "value": "<string>"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"limit\": \"<long>\",\n \"next_marker\": \"<long>\",\n \"prev_marker\": \"<long>\",\n \"entries\": [\n  {\n   \"storage_policy\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\"\n   },\n   \"assigned_to\": {\n    \"id\": \"schema type not provided\"\n   }\n  },\n  {\n   \"storage_policy\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\"\n   },\n   \"assigned_to\": {\n    \"id\": \"schema type not provided\"\n   }\n  }\n ]\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "2751b7f6-0d81-4ece-a2ad-10b7326ebc4b",
          "name": "Assign storage policy",
          "request": {
            "name": "Assign storage policy",
            "description": {
              "content": "Creates a storage policy assignment for an enterprise or user.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "storage_policy_assignments"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": {
              "type": "oauth2"
            },
            "body": {
              "mode": "raw",
              "raw": "{\n    \"storage_policy\": {\n        \"type\": \"<string>\",\n        \"id\": \"<string>\"\n    },\n    \"assigned_to\": {\n        \"type\": \"<string>\",\n        \"id\": \"<string>\"\n    }\n}"
            }
          },
          "response": [
            {
              "id": "b1e58d30-4213-47a5-832a-4ab7313d4ac4",
              "name": "Returns the new storage policy assignment created.",
              "originalRequest": {
                "url": {
                  "path": [
                    "storage_policy_assignments"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"storage_policy\": {\n        \"type\": \"<string>\",\n        \"id\": \"<string>\"\n    },\n    \"assigned_to\": {\n        \"type\": \"<string>\",\n        \"id\": \"<string>\"\n    }\n}"
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"storage_policy\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\"\n },\n \"assigned_to\": {\n  \"id\": \"schema type not provided\"\n }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "b4d2dcbe-b710-447d-b490-f1a3b762ddc9",
          "name": "Update policy assignment",
          "request": {
            "name": "Update policy assignment",
            "description": {
              "content": "Updates a specific storage policy assignment.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "storage_policy_assignments",
                ":storage_policy_assignment_id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "The ID of the storage policy assignment.",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "storage_policy_assignment_id"
                }
              ]
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "auth": {
              "type": "oauth2"
            },
            "body": {
              "mode": "raw",
              "raw": "{\n    \"storage_policy\": {\n        \"type\": \"<string>\",\n        \"id\": \"<string>\"\n    },\n    \"adipisicingf3\": 34149330\n}"
            }
          },
          "response": [
            {
              "id": "b9620aeb-24e8-4347-a9c9-e7646d9829d7",
              "name": "Returns an updated storage policy assignment object.",
              "originalRequest": {
                "url": {
                  "path": [
                    "storage_policy_assignments",
                    "<string>"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"storage_policy\": {\n        \"type\": \"<string>\",\n        \"id\": \"<string>\"\n    },\n    \"adipisicingf3\": 34149330\n}"
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"storage_policy\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\"\n },\n \"assigned_to\": {\n  \"id\": \"schema type not provided\"\n }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "c92765cc-8d24-4ad6-9798-2d75de6cabc0",
          "name": "Unassign storage policy",
          "request": {
            "name": "Unassign storage policy",
            "description": {
              "content": "Delete a storage policy assignment.\n\nDeleting a storage policy assignment on a user\nwill have the user inherit the enterprise's default\nstorage policy.\n\nThere is a rate limit for calling this endpoint of only\ntwice per user in a 24 hour period.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "storage_policy_assignments",
                ":storage_policy_assignment_id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "The ID of the storage policy assignment.",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "storage_policy_assignment_id"
                }
              ]
            },
            "method": "DELETE",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "6c714acc-3b32-455e-8a70-899b4a9561f0",
              "name": "Returns an empty response when the storage policy\nassignment is successfully deleted.",
              "originalRequest": {
                "url": {
                  "path": [
                    "storage_policy_assignments",
                    "<string>"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE",
                "body": {}
              },
              "status": "No Content",
              "code": 204,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            }
          ],
          "event": []
        }
      ]
    }
  ],
  "event": [],
  "variable": [
    {
      "id": "baseUrl",
      "type": "string",
      "value": "https://api.box.com/2.0"
    }
  ],
  "info": {
    "_postman_id": "ad8128f1-bec5-4655-ac2f-5622e6a7d289",
    "name": "Box Platform 2.0 APIs",
    "version": {},
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "description": {
      "content": "The Box Content API gives you access to secure content management and content experience features for use in your own app. It strives to be RESTful and is organized around the main resources you’re familiar with from the Box web interface.\n\nContact Support: \n{\n\nName : Box Developer Relations\n\nEmail : devrel@box.com\n\n}",
      "type": "text/plain"
    }
  }
}