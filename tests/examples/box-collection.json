{
  "item": [
    {
      "id": "725b0a0a-0fab-4672-845e-497eca0e845f",
      "name": "Authorize a user",
      "request": {
        "name": "Authorize a user",
        "description": {
          "content": "Authorize a user by sending them through the [Box](https://box.com)\nwebsite and request their permission to act on their behalf.\n\nThis is the first step when authenticating a user using\nOAuth 2.0. To request a user's authorization to use the Box APIs\non their behalf you will need to send a user to the URL with this\nformat.",
          "type": "text/plain"
        },
        "url": {
          "protocol": "https",
          "path": [
            "api",
            "oauth2",
            "authorize"
          ],
          "host": [
            "account",
            "box",
            "com"
          ],
          "query": [
            {
              "description": "The type of response we'd like to receive.",
              "key": "response_type",
              "value": "<token>"
            },
            {
              "description": "The Client ID of the application that is requesting to authenticate\nthe user. To get the Client ID for your application, log in to your\nBox developer console and click the **Edit Application** link for\nthe application you're working with. In the OAuth2 Parameters section\nof the configuration page, find the item labeled **client_id**. The\ntext of that item is your application's Client ID.",
              "key": "client_id",
              "value": "<string>"
            },
            {
              "description": "The URL to which Box redirects the browser after the user has granted\nor rejected the application permission. This URL must match the\nredirect URL in the configuration of your application. It must be a\nvalid HTTPS URL and it needs to be able to handle the redirection to\ncomplete the next step in the OAuth2 flow.",
              "key": "redirect_uri",
              "value": "<url>"
            },
            {
              "description": "A custom string of your choice. Box will pass the same string to\nthe redirect URL when authentication is complete. This parameter\ncan be used to identify a user on redirect, as well as protect\nagainst hijacked sessions and other attacks.",
              "key": "state",
              "value": "<string>"
            },
            {
              "description": "A comma-separated list of application scopes you'd like to\nauthenticate the user for. This defaults to all the scopes configured\nfor the application in its configuration page.",
              "key": "scope",
              "value": "<string>"
            }
          ],
          "variable": []
        },
        "method": "GET",
        "auth": {
          "type": "noauth"
        }
      },
      "response": [
        {
          "id": "a8ab01e8-ee49-483b-a7f9-4e775c9cb2f8",
          "name": "Does not return any data, but rather should be used in the browser.",
          "originalRequest": {
            "url": {
              "protocol": "https",
              "path": [
                "api",
                "oauth2",
                "authorize"
              ],
              "host": [
                "account",
                "box",
                "com"
              ],
              "query": [
                {
                  "key": "response_type",
                  "value": "<token>"
                },
                {
                  "key": "client_id",
                  "value": "<string>"
                },
                {
                  "key": "redirect_uri",
                  "value": "<url>"
                },
                {
                  "key": "state",
                  "value": "<string>"
                },
                {
                  "key": "scope",
                  "value": "<string>"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "body": {}
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "text/html"
            }
          ],
          "body": "<html>",
          "cookie": [],
          "_postman_previewlanguage": "text"
        }
      ],
      "event": []
    },
    {
      "id": "8ba74368-20cc-4ec7-a7a8-c1542d8d88ae",
      "name": "oauth2",
      "item": [
        {
          "id": "bf52ea99-c4af-4fac-9712-4369e7621259",
          "name": "Request an access token",
          "request": {
            "name": "Request an access token",
            "description": {
              "content": "Request an Access Token using either a client-side obtained OAuth2\nauthorization code or a server-side JWT assertion.\n\nAn Access Token is a string that enables Box to verify that a\nrequest belongs to an authorized session. In the normal order of\noperations you will begin by requesting authentication from the\n[authorize](#get-authorize) endpoint and Box will send you an\nauthorization code.\n\nYou will then send this code to this endpoint to exchange it for\nan Access Token. The returned Access Token can then be used to to make\nBox API calls.",
              "type": "text/plain"
            },
            "url": {
              "protocol": "https",
              "path": [
                "oauth2",
                "token"
              ],
              "host": [
                "api",
                "box",
                "com"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/x-www-form-urlencoded"
              }
            ],
            "method": "POST",
            "auth": {
              "type": "noauth"
            },
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "grant_type",
                  "value": "<urn>"
                },
                {
                  "key": "client_id",
                  "value": "<string>"
                },
                {
                  "key": "client_secret",
                  "value": "<string>"
                },
                {
                  "key": "code",
                  "value": "<token>"
                },
                {
                  "key": "refresh_token",
                  "value": "<token>"
                },
                {
                  "key": "assertion",
                  "value": "<jwt>"
                },
                {
                  "key": "subject_token",
                  "value": "<token>"
                },
                {
                  "key": "subject_token_type",
                  "value": "<string>"
                },
                {
                  "key": "actor_token",
                  "value": "<token>"
                },
                {
                  "key": "actor_token_type",
                  "value": "<urn>"
                },
                {
                  "key": "scope",
                  "value": "<space_delimited_list>"
                },
                {
                  "key": "resource",
                  "value": "<url>"
                }
              ]
            }
          },
          "response": [
            {
              "id": "ab11a620-144a-41d1-80a5-9b736ce7d3a7",
              "name": "Returns a new Access Token that can be used to make authenticated\nAPI calls by passing along the token in a authorization header as\nfollows `Authorization: Bearer <Token>`.",
              "originalRequest": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "oauth2",
                    "token"
                  ],
                  "host": [
                    "api",
                    "box",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/x-www-form-urlencoded"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "urlencoded",
                  "urlencoded": [
                    {
                      "key": "grant_type",
                      "value": "<urn>"
                    },
                    {
                      "key": "client_id",
                      "value": "<string>"
                    },
                    {
                      "key": "client_secret",
                      "value": "<string>"
                    },
                    {
                      "key": "code",
                      "value": "<token>"
                    },
                    {
                      "key": "refresh_token",
                      "value": "<token>"
                    },
                    {
                      "key": "assertion",
                      "value": "<jwt>"
                    },
                    {
                      "key": "subject_token",
                      "value": "<token>"
                    },
                    {
                      "key": "subject_token_type",
                      "value": "<string>"
                    },
                    {
                      "key": "actor_token",
                      "value": "<token>"
                    },
                    {
                      "key": "actor_token_type",
                      "value": "<urn>"
                    },
                    {
                      "key": "scope",
                      "value": "<space_delimited_list>"
                    },
                    {
                      "key": "resource",
                      "value": "<url>"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"access_token\": \"<token>\",\n \"expires_in\": \"<long>\",\n \"token_type\": \"<string>\",\n \"restricted_to\": [\n  {\n   \"scope\": \"<string>\",\n   \"object\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\"\n   }\n  },\n  {\n   \"scope\": \"<string>\",\n   \"object\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\"\n   }\n  }\n ],\n \"refresh_token\": \"<token>\",\n \"issued_token_type\": \"<urn>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "96571039-a147-44bd-826c-bfd0428f84a0",
              "name": "An authentication error.",
              "originalRequest": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "oauth2",
                    "token"
                  ],
                  "host": [
                    "api",
                    "box",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/x-www-form-urlencoded"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "urlencoded",
                  "urlencoded": [
                    {
                      "key": "grant_type",
                      "value": "<urn>"
                    },
                    {
                      "key": "client_id",
                      "value": "<string>"
                    },
                    {
                      "key": "client_secret",
                      "value": "<string>"
                    },
                    {
                      "key": "code",
                      "value": "<token>"
                    },
                    {
                      "key": "refresh_token",
                      "value": "<token>"
                    },
                    {
                      "key": "assertion",
                      "value": "<jwt>"
                    },
                    {
                      "key": "subject_token",
                      "value": "<token>"
                    },
                    {
                      "key": "subject_token_type",
                      "value": "<string>"
                    },
                    {
                      "key": "actor_token",
                      "value": "<token>"
                    },
                    {
                      "key": "actor_token_type",
                      "value": "<urn>"
                    },
                    {
                      "key": "scope",
                      "value": "<space_delimited_list>"
                    },
                    {
                      "key": "resource",
                      "value": "<url>"
                    }
                  ]
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"error\": \"<string>\",\n \"error_description\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "d1fbeda5-b1de-40dd-bf82-a2ca762da15d",
          "name": "Revoke an access token",
          "request": {
            "name": "Revoke an access token",
            "description": {
              "content": "Revoke an active Access Token, effectively logging a user out\nthat has been previously authenticated.",
              "type": "text/plain"
            },
            "url": {
              "protocol": "https",
              "path": [
                "oauth2",
                "revoke"
              ],
              "host": [
                "api",
                "box",
                "com"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/x-www-form-urlencoded"
              }
            ],
            "method": "POST",
            "auth": {
              "type": "noauth"
            },
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "client_id",
                  "value": "<string>"
                },
                {
                  "key": "client_secret",
                  "value": "<string>"
                },
                {
                  "key": "token",
                  "value": "<token>"
                }
              ]
            }
          },
          "response": [
            {
              "id": "f3019fb4-dcfb-4abe-87b2-a145f02024ed",
              "name": "Returns an empty response when the token was successfully revoked.",
              "originalRequest": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "oauth2",
                    "revoke"
                  ],
                  "host": [
                    "api",
                    "box",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/x-www-form-urlencoded"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "urlencoded",
                  "urlencoded": [
                    {
                      "key": "client_id",
                      "value": "<string>"
                    },
                    {
                      "key": "client_secret",
                      "value": "<string>"
                    },
                    {
                      "key": "token",
                      "value": "<token>"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "306455a8-d817-4f91-9f6d-376b42255c05",
              "name": "An authentication error.",
              "originalRequest": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "oauth2",
                    "revoke"
                  ],
                  "host": [
                    "api",
                    "box",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/x-www-form-urlencoded"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "urlencoded",
                  "urlencoded": [
                    {
                      "key": "client_id",
                      "value": "<string>"
                    },
                    {
                      "key": "client_secret",
                      "value": "<string>"
                    },
                    {
                      "key": "token",
                      "value": "<token>"
                    }
                  ]
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"error\": \"<string>\",\n \"error_description\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        }
      ],
      "event": []
    },
    {
      "id": "39d6abaa-0aa0-4aa6-a337-c1110a8d1efe",
      "name": "files",
      "item": [
        {
          "id": "fb56ac72-9adc-4268-b21b-4c7673a71803",
          "name": "{file id}",
          "item": [
            {
              "id": "0b5c8e11-3a51-4881-b3e6-033c99ec82e2",
              "name": "Get a file",
              "request": {
                "name": "Get a file",
                "description": {
                  "content": "Retrieves the details about a file.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "files",
                    ":file_id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response, unless explicitly specified.",
                      "key": "fields",
                      "value": "<string>,<string>"
                    }
                  ],
                  "variable": [
                    {
                      "description": {
                        "content": "The ID of the file.",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "<string>",
                      "key": "file_id"
                    }
                  ]
                },
                "method": "GET",
                "auth": {
                  "type": "oauth2"
                }
              },
              "response": [
                {
                  "id": "ea83bea1-28a0-4f3b-8570-df4895d693b0",
                  "name": "Returns a file object.\n\n[Some fields are optional](#file) and need to be explicitly\nrequested using the [fields](#get-files-id--request--fields)\nparameter.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "files",
                        "<string>"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "fields",
                          "value": "<string>,<string>"
                        }
                      ],
                      "variable": []
                    },
                    "method": "GET",
                    "body": {}
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n \"id\": \"<string>\",\n \"type\": \"<string>\",\n \"sequence_id\": \"<string>\",\n \"etag\": \"<string>\",\n \"name\": \"<string>\",\n \"sha1\": \"<digest>\",\n \"description\": \"<string>\",\n \"size\": \"<integer>\",\n \"path_collection\": [\n  {\n   \"id\": \"<string>\",\n   \"type\": \"<string>\",\n   \"sequence_id\": \"<string>\",\n   \"etag\": \"<string>\",\n   \"name\": \"<string>\"\n  },\n  {\n   \"id\": \"<string>\",\n   \"type\": \"<string>\",\n   \"sequence_id\": \"<string>\",\n   \"etag\": \"<string>\",\n   \"name\": \"<string>\"\n  }\n ],\n \"created_at\": \"<dateTime>\",\n \"modified_at\": \"<dateTime>\",\n \"trashed_at\": \"<dateTime>\",\n \"purged_at\": \"<dateTime>\",\n \"content_created_at\": \"<dateTime>\",\n \"content_modified_at\": \"<dateTime>\",\n \"expires_at\": \"<dateTime>\",\n \"created_by\": {\n  \"id\": \"<string>\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"modified_by\": {\n  \"id\": \"<string>\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"owned_by\": {\n  \"id\": \"<string>\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"shared_link\": {\n  \"url\": \"<url>\",\n  \"download_url\": \"<url>\",\n  \"vanity_url\": \"<url>\",\n  \"access\": \"<string>\",\n  \"effective_access\": \"<string>\",\n  \"effective_permission\": \"<string>\",\n  \"unshared_at\": \"<dateTime>\",\n  \"is_password_enabled\": \"<boolean>\",\n  \"permissions\": {\n   \"can_download\": \"<boolean>\",\n   \"can_preview\": \"<boolean>\"\n  },\n  \"download_count\": \"<integer>\",\n  \"preview_count\": \"<integer>\"\n },\n \"parent\": {\n  \"id\": \"<string>\",\n  \"type\": \"<string>\",\n  \"sequence_id\": \"<string>\",\n  \"etag\": \"<string>\",\n  \"name\": \"<string>\"\n },\n \"item_status\": \"<string>\",\n \"version_number\": \"<string>\",\n \"comment_count\": \"<integer>\",\n \"permissions\": {\n  \"can_delete\": \"<boolean>\",\n  \"can_download\": \"<boolean>\",\n  \"can_invite_collaborator\": \"<boolean>\",\n  \"can_rename\": \"<boolean>\",\n  \"can_set_share_access\": \"<boolean>\",\n  \"can_share\": \"<boolean>\",\n  \"can_annotate\": \"<boolean>\",\n  \"can_comment\": \"<boolean>\",\n  \"can_preview\": \"<boolean>\",\n  \"can_upload\": \"<boolean>\",\n  \"can_view_annotations_all\": \"<boolean>\",\n  \"can_view_annotations_self\": \"<boolean>\"\n },\n \"tags\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"lock\": {\n  \"id\": \"<string>\",\n  \"type\": \"<string>\",\n  \"created_by\": {\n   \"id\": \"<string>\",\n   \"type\": \"<string>\",\n   \"name\": \"<string>\",\n   \"login\": \"<email>\"\n  },\n  \"created_at\": \"<dateTime>\",\n  \"expired_at\": \"<dateTime>\",\n  \"is_download_prevented\": \"<boolean>\"\n },\n \"extension\": \"<string>\",\n \"is_package\": \"<boolean>\",\n \"expiring_embed_link\": \"<string>\",\n \"watermark_info\": {\n  \"is_watermarked\": \"<boolean>\"\n },\n \"allowed_invitee_roles\": \"company\",\n \"is_externally_owned\": \"<boolean>\",\n \"has_collaborations\": \"<boolean>\",\n \"metadata\": \"<object>\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": []
            },
            {
              "id": "45bfb993-c6fc-4a39-9503-63a311a8cd82",
              "name": "Restore file",
              "request": {
                "name": "Restore file",
                "description": {
                  "content": "Restores an file that has been moved to the trash.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "files",
                    ":file_id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response, unless explicitly specified.",
                      "key": "fields",
                      "value": "<string>,<string>"
                    }
                  ],
                  "variable": [
                    {
                      "description": {
                        "content": "The ID of the file.",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "<string>",
                      "key": "file_id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "auth": {
                  "type": "oauth2"
                },
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"<string>\",\n    \"parent\": {\n        \"id\": \"<string>\"\n    }\n}"
                }
              },
              "response": [
                {
                  "id": "f0fd0411-39cd-47c6-8345-0aa54fd34ae3",
                  "name": "Returns a file object when the file has been restored.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "files",
                        "<string>"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "fields",
                          "value": "<string>,<string>"
                        }
                      ],
                      "variable": []
                    },
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "method": "POST",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"name\": \"<string>\",\n    \"parent\": {\n        \"id\": \"<string>\"\n    }\n}"
                    }
                  },
                  "status": "Created",
                  "code": 201,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n \"id\": \"<string>\",\n \"type\": \"<string>\",\n \"sequence_id\": \"<string>\",\n \"etag\": \"<string>\",\n \"name\": \"<string>\",\n \"sha1\": \"<digest>\",\n \"description\": \"<string>\",\n \"size\": \"<integer>\",\n \"path_collection\": [\n  {\n   \"id\": \"<string>\",\n   \"type\": \"<string>\",\n   \"sequence_id\": \"<string>\",\n   \"etag\": \"<string>\",\n   \"name\": \"<string>\"\n  },\n  {\n   \"id\": \"<string>\",\n   \"type\": \"<string>\",\n   \"sequence_id\": \"<string>\",\n   \"etag\": \"<string>\",\n   \"name\": \"<string>\"\n  }\n ],\n \"created_at\": \"<dateTime>\",\n \"modified_at\": \"<dateTime>\",\n \"trashed_at\": \"<dateTime>\",\n \"purged_at\": \"<dateTime>\",\n \"content_created_at\": \"<dateTime>\",\n \"content_modified_at\": \"<dateTime>\",\n \"expires_at\": \"<dateTime>\",\n \"created_by\": {\n  \"id\": \"<string>\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"modified_by\": {\n  \"id\": \"<string>\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"owned_by\": {\n  \"id\": \"<string>\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"shared_link\": {\n  \"url\": \"<url>\",\n  \"download_url\": \"<url>\",\n  \"vanity_url\": \"<url>\",\n  \"access\": \"<string>\",\n  \"effective_access\": \"<string>\",\n  \"effective_permission\": \"<string>\",\n  \"unshared_at\": \"<dateTime>\",\n  \"is_password_enabled\": \"<boolean>\",\n  \"permissions\": {\n   \"can_download\": \"<boolean>\",\n   \"can_preview\": \"<boolean>\"\n  },\n  \"download_count\": \"<integer>\",\n  \"preview_count\": \"<integer>\"\n },\n \"parent\": {\n  \"id\": \"<string>\",\n  \"type\": \"<string>\",\n  \"sequence_id\": \"<string>\",\n  \"etag\": \"<string>\",\n  \"name\": \"<string>\"\n },\n \"item_status\": \"<string>\",\n \"version_number\": \"<string>\",\n \"comment_count\": \"<integer>\",\n \"permissions\": {\n  \"can_delete\": \"<boolean>\",\n  \"can_download\": \"<boolean>\",\n  \"can_invite_collaborator\": \"<boolean>\",\n  \"can_rename\": \"<boolean>\",\n  \"can_set_share_access\": \"<boolean>\",\n  \"can_share\": \"<boolean>\",\n  \"can_annotate\": \"<boolean>\",\n  \"can_comment\": \"<boolean>\",\n  \"can_preview\": \"<boolean>\",\n  \"can_upload\": \"<boolean>\",\n  \"can_view_annotations_all\": \"<boolean>\",\n  \"can_view_annotations_self\": \"<boolean>\"\n },\n \"tags\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"lock\": {\n  \"id\": \"<string>\",\n  \"type\": \"<string>\",\n  \"created_by\": {\n   \"id\": \"<string>\",\n   \"type\": \"<string>\",\n   \"name\": \"<string>\",\n   \"login\": \"<email>\"\n  },\n  \"created_at\": \"<dateTime>\",\n  \"expired_at\": \"<dateTime>\",\n  \"is_download_prevented\": \"<boolean>\"\n },\n \"extension\": \"<string>\",\n \"is_package\": \"<boolean>\",\n \"expiring_embed_link\": \"<string>\",\n \"watermark_info\": {\n  \"is_watermarked\": \"<boolean>\"\n },\n \"allowed_invitee_roles\": \"open\",\n \"is_externally_owned\": \"<boolean>\",\n \"has_collaborations\": \"<boolean>\",\n \"metadata\": \"<object>\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "b2230c30-39bc-4630-801c-3339c71eea5e",
                  "name": "Returns an error if the user does not have access to the folder\nthe file is being restored to, or the user does not have permission\nto restore files from the trash.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "files",
                        "<string>"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "fields",
                          "value": "<string>,<string>"
                        }
                      ],
                      "variable": []
                    },
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "method": "POST",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"name\": \"<string>\",\n    \"parent\": {\n        \"id\": \"<string>\"\n    }\n}"
                    }
                  },
                  "status": "Forbidden",
                  "code": 403,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "54c38d89-5486-45f8-901a-f39e802e4b09",
                  "name": "Returns an error if the file is not in the trash.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "files",
                        "<string>"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "fields",
                          "value": "<string>,<string>"
                        }
                      ],
                      "variable": []
                    },
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "method": "POST",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"name\": \"<string>\",\n    \"parent\": {\n        \"id\": \"<string>\"\n    }\n}"
                    }
                  },
                  "status": "Not Found",
                  "code": 404,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "52078602-33af-408e-ac32-f1bbe116d35d",
                  "name": "Returns an error if there is an file with the same name\nin the folder the file is being restored to.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "files",
                        "<string>"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "fields",
                          "value": "<string>,<string>"
                        }
                      ],
                      "variable": []
                    },
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "method": "POST",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"name\": \"<string>\",\n    \"parent\": {\n        \"id\": \"<string>\"\n    }\n}"
                    }
                  },
                  "status": "Conflict",
                  "code": 409,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": []
            },
            {
              "id": "40ae062d-5bd7-4451-b96b-223b0753270e",
              "name": "Update a file",
              "request": {
                "name": "Update a file",
                "description": {
                  "content": "Updates a file. This can be used to rename or move a file,\ncreate a shared link, or lock a file.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "files",
                    ":file_id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response, unless explicitly specified.",
                      "key": "fields",
                      "value": "<string>,<string>"
                    }
                  ],
                  "variable": [
                    {
                      "description": {
                        "content": "The ID of the file.",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "<string>",
                      "key": "file_id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "If-Match",
                    "value": "<string>",
                    "description": "Ensure this item hasn't recently changed\nby ensuring the item's current `etag` matches the\n`etag` passed into this header."
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "auth": {
                  "type": "oauth2"
                },
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"parent\": {\n        \"id\": \"<string>\"\n    },\n    \"shared_link\": {\n        \"access\": \"<string>\",\n        \"password\": \"<string>\",\n        \"unshared_at\": \"<dateTime>\",\n        \"permissions\": {\n            \"can_download\": \"<boolean>\"\n        }\n    },\n    \"lock\": {\n        \"access\": \"<string>\",\n        \"expires_at\": \"<dateTime>\",\n        \"is_download_prevented\": \"<boolean>\"\n    },\n    \"permissions\": {\n        \"can_download\": \"<string>\"\n    },\n    \"tags\": [\n        \"<string>\",\n        \"<string>\"\n    ]\n}"
                }
              },
              "response": [
                {
                  "id": "817bfcd6-4f50-4be8-bb17-7b0bcde787fc",
                  "name": "Returns a file object.\n\n[Some fields are optional](#file) and need to be explicitly\nrequested using the [fields](#get-files-id--request--fields)\nparameter.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "files",
                        "<string>"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "fields",
                          "value": "<string>,<string>"
                        }
                      ],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Ensure this item hasn't recently changed\nby ensuring the item's current `etag` matches the\n`etag` passed into this header.",
                          "type": "text/plain"
                        },
                        "key": "If-Match",
                        "value": "<string>"
                      },
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "method": "PUT",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"parent\": {\n        \"id\": \"<string>\"\n    },\n    \"shared_link\": {\n        \"access\": \"<string>\",\n        \"password\": \"<string>\",\n        \"unshared_at\": \"<dateTime>\",\n        \"permissions\": {\n            \"can_download\": \"<boolean>\"\n        }\n    },\n    \"lock\": {\n        \"access\": \"<string>\",\n        \"expires_at\": \"<dateTime>\",\n        \"is_download_prevented\": \"<boolean>\"\n    },\n    \"permissions\": {\n        \"can_download\": \"<string>\"\n    },\n    \"tags\": [\n        \"<string>\",\n        \"<string>\"\n    ]\n}"
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n \"id\": \"<string>\",\n \"type\": \"<string>\",\n \"sequence_id\": \"<string>\",\n \"etag\": \"<string>\",\n \"name\": \"<string>\",\n \"sha1\": \"<digest>\",\n \"description\": \"<string>\",\n \"size\": \"<integer>\",\n \"path_collection\": [\n  {\n   \"id\": \"<string>\",\n   \"type\": \"<string>\",\n   \"sequence_id\": \"<string>\",\n   \"etag\": \"<string>\",\n   \"name\": \"<string>\"\n  },\n  {\n   \"id\": \"<string>\",\n   \"type\": \"<string>\",\n   \"sequence_id\": \"<string>\",\n   \"etag\": \"<string>\",\n   \"name\": \"<string>\"\n  }\n ],\n \"created_at\": \"<dateTime>\",\n \"modified_at\": \"<dateTime>\",\n \"trashed_at\": \"<dateTime>\",\n \"purged_at\": \"<dateTime>\",\n \"content_created_at\": \"<dateTime>\",\n \"content_modified_at\": \"<dateTime>\",\n \"expires_at\": \"<dateTime>\",\n \"created_by\": {\n  \"id\": \"<string>\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"modified_by\": {\n  \"id\": \"<string>\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"owned_by\": {\n  \"id\": \"<string>\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"shared_link\": {\n  \"url\": \"<url>\",\n  \"download_url\": \"<url>\",\n  \"vanity_url\": \"<url>\",\n  \"access\": \"<string>\",\n  \"effective_access\": \"<string>\",\n  \"effective_permission\": \"<string>\",\n  \"unshared_at\": \"<dateTime>\",\n  \"is_password_enabled\": \"<boolean>\",\n  \"permissions\": {\n   \"can_download\": \"<boolean>\",\n   \"can_preview\": \"<boolean>\"\n  },\n  \"download_count\": \"<integer>\",\n  \"preview_count\": \"<integer>\"\n },\n \"parent\": {\n  \"id\": \"<string>\",\n  \"type\": \"<string>\",\n  \"sequence_id\": \"<string>\",\n  \"etag\": \"<string>\",\n  \"name\": \"<string>\"\n },\n \"item_status\": \"<string>\",\n \"version_number\": \"<string>\",\n \"comment_count\": \"<integer>\",\n \"permissions\": {\n  \"can_delete\": \"<boolean>\",\n  \"can_download\": \"<boolean>\",\n  \"can_invite_collaborator\": \"<boolean>\",\n  \"can_rename\": \"<boolean>\",\n  \"can_set_share_access\": \"<boolean>\",\n  \"can_share\": \"<boolean>\",\n  \"can_annotate\": \"<boolean>\",\n  \"can_comment\": \"<boolean>\",\n  \"can_preview\": \"<boolean>\",\n  \"can_upload\": \"<boolean>\",\n  \"can_view_annotations_all\": \"<boolean>\",\n  \"can_view_annotations_self\": \"<boolean>\"\n },\n \"tags\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"lock\": {\n  \"id\": \"<string>\",\n  \"type\": \"<string>\",\n  \"created_by\": {\n   \"id\": \"<string>\",\n   \"type\": \"<string>\",\n   \"name\": \"<string>\",\n   \"login\": \"<email>\"\n  },\n  \"created_at\": \"<dateTime>\",\n  \"expired_at\": \"<dateTime>\",\n  \"is_download_prevented\": \"<boolean>\"\n },\n \"extension\": \"<string>\",\n \"is_package\": \"<boolean>\",\n \"expiring_embed_link\": \"<string>\",\n \"watermark_info\": {\n  \"is_watermarked\": \"<boolean>\"\n },\n \"allowed_invitee_roles\": \"open\",\n \"is_externally_owned\": \"<boolean>\",\n \"has_collaborations\": \"<boolean>\",\n \"metadata\": \"<object>\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": []
            },
            {
              "id": "ba8b39b7-73c2-42e1-a966-813ed050e37a",
              "name": "Delete a file",
              "request": {
                "name": "Delete a file",
                "description": {
                  "content": "Deletes a file, either permanently or by moving it to\nthe trash.\n\nThe the enterprise settings determine whether the item will\nbe permanently deleted from Box or moved to the trash.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "files",
                    ":file_id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "description": {
                        "content": "The ID of the file.",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "<string>",
                      "key": "file_id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "If-Match",
                    "value": "<string>",
                    "description": "Ensure this item hasn't recently changed\nby ensuring the item's current `etag` matches the\n`etag` passed into this header."
                  }
                ],
                "method": "DELETE",
                "auth": {
                  "type": "oauth2"
                }
              },
              "response": [
                {
                  "id": "a638a42c-1cb3-40b1-98a6-09d582697193",
                  "name": "Returns an empty response when the file has been successfully\ndeleted.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "files",
                        "<string>"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Ensure this item hasn't recently changed\nby ensuring the item's current `etag` matches the\n`etag` passed into this header.",
                          "type": "text/plain"
                        },
                        "key": "If-Match",
                        "value": "<string>"
                      }
                    ],
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "No Content",
                  "code": 204,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "_postman_previewlanguage": "text"
                },
                {
                  "id": "3584d954-c959-47d3-bda6-e06b81df889f",
                  "name": "If the `If-Match` header was sent and the file has since changed, the\nAPI will return a `412 Precondition Failed` error.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "files",
                        "<string>"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Ensure this item hasn't recently changed\nby ensuring the item's current `etag` matches the\n`etag` passed into this header.",
                          "type": "text/plain"
                        },
                        "key": "If-Match",
                        "value": "<string>"
                      }
                    ],
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "Precondition Failed",
                  "code": 412,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": []
            },
            {
              "id": "c0d06e1e-58f2-4d68-8671-74d39fe13015",
              "name": "content",
              "item": [
                {
                  "id": "98094408-9dc0-4800-a8f0-85fab2d41c16",
                  "name": "Download a file",
                  "request": {
                    "name": "Download a file",
                    "description": {
                      "content": "Returns the contents of a file in binary format.",
                      "type": "text/plain"
                    },
                    "url": {
                      "path": [
                        "files",
                        ":file_id",
                        "content"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "description": "The file version to download",
                          "key": "version",
                          "value": "<string>"
                        }
                      ],
                      "variable": [
                        {
                          "description": {
                            "content": "The ID of the file.",
                            "type": "text/plain"
                          },
                          "type": "any",
                          "value": "<string>",
                          "key": "file_id"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Range",
                        "value": "<string>",
                        "description": "The byte range of the content to download.\n\nThe format `{start_byte}-{end_byte}` can be used to specify\nwhat section of the file to download."
                      },
                      {
                        "key": "BoxApi",
                        "value": "<string>",
                        "description": "The URL and password for a file that has\nbeen shared using a shared link, as this file would otherwise\nnot be accessible to the user.\n\nUse the format `shared_link=SHARED_LINK_URL` or if a password was set\nuse `shared_link=[link]&shared_link_password=[password]`"
                      }
                    ],
                    "method": "GET",
                    "auth": {
                      "type": "oauth2"
                    }
                  },
                  "response": [
                    {
                      "id": "cbf1da99-8d63-46f8-a579-6bc24426f300",
                      "name": "If the file is not ready to be downloaded yet `Retry-After` header will\nbe returned indicating the time in seconds after which the file will\nbe available for the client to download.\n\nThis response can occur when the file was uploaded immediately before the\ndownload request.",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "files",
                            "<string>",
                            "content"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [
                            {
                              "key": "version",
                              "value": "<string>"
                            }
                          ],
                          "variable": []
                        },
                        "header": [
                          {
                            "description": {
                              "content": "The byte range of the content to download.\n\nThe format `{start_byte}-{end_byte}` can be used to specify\nwhat section of the file to download.",
                              "type": "text/plain"
                            },
                            "key": "Range",
                            "value": "<string>"
                          },
                          {
                            "description": {
                              "content": "The URL and password for a file that has\nbeen shared using a shared link, as this file would otherwise\nnot be accessible to the user.\n\nUse the format `shared_link=SHARED_LINK_URL` or if a password was set\nuse `shared_link=[link]&shared_link_password=[password]`",
                              "type": "text/plain"
                            },
                            "key": "BoxApi",
                            "value": "<string>"
                          }
                        ],
                        "method": "GET",
                        "body": {}
                      },
                      "status": "Accepted",
                      "code": 202,
                      "header": [
                        {
                          "key": "Retry-After",
                          "value": "<integer>",
                          "description": "The time in seconds after which to retry the download"
                        },
                        {
                          "key": "Content-Type",
                          "value": "text/plain"
                        }
                      ],
                      "body": "",
                      "cookie": [],
                      "_postman_previewlanguage": "text"
                    },
                    {
                      "id": "13a0483f-75af-4f2e-9189-b6071330c882",
                      "name": "If the file is available to be downloaded the response will include a\n`Location` header for the file on `dl.boxcloud.com`.\n\nThe `dl.boxcloud.com` URL is not persistent and clients will need\nto follow the redirect in order to actually download the file.",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "files",
                            "<string>",
                            "content"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [
                            {
                              "key": "version",
                              "value": "<string>"
                            }
                          ],
                          "variable": []
                        },
                        "header": [
                          {
                            "description": {
                              "content": "The byte range of the content to download.\n\nThe format `{start_byte}-{end_byte}` can be used to specify\nwhat section of the file to download.",
                              "type": "text/plain"
                            },
                            "key": "Range",
                            "value": "<string>"
                          },
                          {
                            "description": {
                              "content": "The URL and password for a file that has\nbeen shared using a shared link, as this file would otherwise\nnot be accessible to the user.\n\nUse the format `shared_link=SHARED_LINK_URL` or if a password was set\nuse `shared_link=[link]&shared_link_password=[password]`",
                              "type": "text/plain"
                            },
                            "key": "BoxApi",
                            "value": "<string>"
                          }
                        ],
                        "method": "GET",
                        "body": {}
                      },
                      "status": "Found",
                      "code": 302,
                      "header": [
                        {
                          "key": "Location",
                          "value": "<url>",
                          "description": "A pointer to the download URL"
                        },
                        {
                          "key": "Content-Type",
                          "value": "text/plain"
                        }
                      ],
                      "body": "",
                      "cookie": [],
                      "_postman_previewlanguage": "text"
                    }
                  ],
                  "event": []
                },
                {
                  "id": "fc386420-fff8-4eda-a399-6cce346e9d85",
                  "name": "Upload a file version",
                  "request": {
                    "name": "Upload a file version",
                    "description": {
                      "content": "Update a file's content. For file sizes over 50MB we recommend\nusing the Chunk Upload APIs.",
                      "type": "text/plain"
                    },
                    "url": {
                      "protocol": "https",
                      "path": [
                        "api",
                        "2.0",
                        "files",
                        ":file_id",
                        "content"
                      ],
                      "host": [
                        "upload",
                        "box",
                        "com"
                      ],
                      "query": [
                        {
                          "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response, unless explicitly specified.",
                          "key": "fields",
                          "value": "<string>,<string>"
                        }
                      ],
                      "variable": [
                        {
                          "description": {
                            "content": "The ID of the file.",
                            "type": "text/plain"
                          },
                          "type": "any",
                          "value": "<string>",
                          "key": "file_id"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "If-Match",
                        "value": "<string>",
                        "description": "Ensure this item hasn't recently changed\nby ensuring the item's current `etag` matches the\n`etag` passed into this header."
                      },
                      {
                        "key": "Content-MD5",
                        "value": "<string>",
                        "description": "An optional header containing the SHA-1 hash of the file to\nensure that the file was not corrupted in transit."
                      },
                      {
                        "key": "Content-Type",
                        "value": "multipart/form-data"
                      }
                    ],
                    "method": "POST",
                    "auth": {
                      "type": "oauth2"
                    },
                    "body": {
                      "mode": "formdata",
                      "formdata": [
                        {
                          "key": "attributes",
                          "value": "{\"name\":\"<string>\",\"content_modified_at\":\"<dateTime>\"}"
                        },
                        {
                          "key": "file",
                          "value": "<binary>"
                        }
                      ]
                    }
                  },
                  "response": [
                    {
                      "id": "cd371083-bcb6-462e-a34c-9a06aa6a83ac",
                      "name": "Returns the new file object in a list.",
                      "originalRequest": {
                        "url": {
                          "protocol": "https",
                          "path": [
                            "api",
                            "2.0",
                            "files",
                            "<string>",
                            "content"
                          ],
                          "host": [
                            "upload",
                            "box",
                            "com"
                          ],
                          "query": [
                            {
                              "key": "fields",
                              "value": "<string>,<string>"
                            }
                          ],
                          "variable": []
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Ensure this item hasn't recently changed\nby ensuring the item's current `etag` matches the\n`etag` passed into this header.",
                              "type": "text/plain"
                            },
                            "key": "If-Match",
                            "value": "<string>"
                          },
                          {
                            "description": {
                              "content": "An optional header containing the SHA-1 hash of the file to\nensure that the file was not corrupted in transit.",
                              "type": "text/plain"
                            },
                            "key": "Content-MD5",
                            "value": "<string>"
                          },
                          {
                            "key": "Content-Type",
                            "value": "multipart/form-data"
                          }
                        ],
                        "method": "POST",
                        "body": {
                          "mode": "formdata",
                          "formdata": [
                            {
                              "key": "attributes",
                              "value": "{\"name\":\"<string>\",\"content_modified_at\":\"<dateTime>\"}"
                            },
                            {
                              "key": "file",
                              "value": "<binary>"
                            }
                          ]
                        }
                      },
                      "status": "OK",
                      "code": 200,
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n \"total_count\": \"<long>\",\n \"entries\": [\n  {\n   \"id\": \"<string>\",\n   \"type\": \"<string>\",\n   \"sequence_id\": \"<string>\",\n   \"etag\": \"<string>\",\n   \"name\": \"<string>\",\n   \"sha1\": \"<digest>\",\n   \"description\": \"<string>\",\n   \"size\": \"<integer>\",\n   \"path_collection\": [\n    {\n     \"id\": \"<string>\",\n     \"type\": \"<string>\",\n     \"sequence_id\": \"<string>\",\n     \"etag\": \"<string>\",\n     \"name\": \"<string>\"\n    },\n    {\n     \"id\": \"<string>\",\n     \"type\": \"<string>\",\n     \"sequence_id\": \"<string>\",\n     \"etag\": \"<string>\",\n     \"name\": \"<string>\"\n    }\n   ],\n   \"created_at\": \"<dateTime>\",\n   \"modified_at\": \"<dateTime>\",\n   \"trashed_at\": \"<dateTime>\",\n   \"purged_at\": \"<dateTime>\",\n   \"content_created_at\": \"<dateTime>\",\n   \"content_modified_at\": \"<dateTime>\",\n   \"expires_at\": \"<dateTime>\",\n   \"created_by\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"modified_by\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"owned_by\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"shared_link\": {\n    \"url\": \"<url>\",\n    \"download_url\": \"<url>\",\n    \"vanity_url\": \"<url>\",\n    \"access\": \"<string>\",\n    \"effective_access\": \"<string>\",\n    \"effective_permission\": \"<string>\",\n    \"unshared_at\": \"<dateTime>\",\n    \"is_password_enabled\": \"<boolean>\",\n    \"permissions\": {\n     \"can_download\": \"<boolean>\",\n     \"can_preview\": \"<boolean>\"\n    },\n    \"download_count\": \"<integer>\",\n    \"preview_count\": \"<integer>\"\n   },\n   \"parent\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\"\n   },\n   \"item_status\": \"<string>\",\n   \"version_number\": \"<string>\",\n   \"comment_count\": \"<integer>\",\n   \"permissions\": {\n    \"can_delete\": \"<boolean>\",\n    \"can_download\": \"<boolean>\",\n    \"can_invite_collaborator\": \"<boolean>\",\n    \"can_rename\": \"<boolean>\",\n    \"can_set_share_access\": \"<boolean>\",\n    \"can_share\": \"<boolean>\",\n    \"can_annotate\": \"<boolean>\",\n    \"can_comment\": \"<boolean>\",\n    \"can_preview\": \"<boolean>\",\n    \"can_upload\": \"<boolean>\",\n    \"can_view_annotations_all\": \"<boolean>\",\n    \"can_view_annotations_self\": \"<boolean>\"\n   },\n   \"tags\": [\n    \"<string>\",\n    \"<string>\"\n   ],\n   \"lock\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\",\n    \"created_by\": {\n     \"id\": \"<string>\",\n     \"type\": \"<string>\",\n     \"name\": \"<string>\",\n     \"login\": \"<email>\"\n    },\n    \"created_at\": \"<dateTime>\",\n    \"expired_at\": \"<dateTime>\",\n    \"is_download_prevented\": \"<boolean>\"\n   },\n   \"extension\": \"<string>\",\n   \"is_package\": \"<boolean>\",\n   \"expiring_embed_link\": \"<string>\",\n   \"watermark_info\": {\n    \"is_watermarked\": \"<boolean>\"\n   },\n   \"allowed_invitee_roles\": \"collaborators\",\n   \"is_externally_owned\": \"<boolean>\",\n   \"has_collaborations\": \"<boolean>\",\n   \"metadata\": \"<object>\"\n  },\n  {\n   \"id\": \"<string>\",\n   \"type\": \"<string>\",\n   \"sequence_id\": \"<string>\",\n   \"etag\": \"<string>\",\n   \"name\": \"<string>\",\n   \"sha1\": \"<digest>\",\n   \"description\": \"<string>\",\n   \"size\": \"<integer>\",\n   \"path_collection\": [\n    {\n     \"id\": \"<string>\",\n     \"type\": \"<string>\",\n     \"sequence_id\": \"<string>\",\n     \"etag\": \"<string>\",\n     \"name\": \"<string>\"\n    },\n    {\n     \"id\": \"<string>\",\n     \"type\": \"<string>\",\n     \"sequence_id\": \"<string>\",\n     \"etag\": \"<string>\",\n     \"name\": \"<string>\"\n    }\n   ],\n   \"created_at\": \"<dateTime>\",\n   \"modified_at\": \"<dateTime>\",\n   \"trashed_at\": \"<dateTime>\",\n   \"purged_at\": \"<dateTime>\",\n   \"content_created_at\": \"<dateTime>\",\n   \"content_modified_at\": \"<dateTime>\",\n   \"expires_at\": \"<dateTime>\",\n   \"created_by\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"modified_by\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"owned_by\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"shared_link\": {\n    \"url\": \"<url>\",\n    \"download_url\": \"<url>\",\n    \"vanity_url\": \"<url>\",\n    \"access\": \"<string>\",\n    \"effective_access\": \"<string>\",\n    \"effective_permission\": \"<string>\",\n    \"unshared_at\": \"<dateTime>\",\n    \"is_password_enabled\": \"<boolean>\",\n    \"permissions\": {\n     \"can_download\": \"<boolean>\",\n     \"can_preview\": \"<boolean>\"\n    },\n    \"download_count\": \"<integer>\",\n    \"preview_count\": \"<integer>\"\n   },\n   \"parent\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\"\n   },\n   \"item_status\": \"<string>\",\n   \"version_number\": \"<string>\",\n   \"comment_count\": \"<integer>\",\n   \"permissions\": {\n    \"can_delete\": \"<boolean>\",\n    \"can_download\": \"<boolean>\",\n    \"can_invite_collaborator\": \"<boolean>\",\n    \"can_rename\": \"<boolean>\",\n    \"can_set_share_access\": \"<boolean>\",\n    \"can_share\": \"<boolean>\",\n    \"can_annotate\": \"<boolean>\",\n    \"can_comment\": \"<boolean>\",\n    \"can_preview\": \"<boolean>\",\n    \"can_upload\": \"<boolean>\",\n    \"can_view_annotations_all\": \"<boolean>\",\n    \"can_view_annotations_self\": \"<boolean>\"\n   },\n   \"tags\": [\n    \"<string>\",\n    \"<string>\"\n   ],\n   \"lock\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\",\n    \"created_by\": {\n     \"id\": \"<string>\",\n     \"type\": \"<string>\",\n     \"name\": \"<string>\",\n     \"login\": \"<email>\"\n    },\n    \"created_at\": \"<dateTime>\",\n    \"expired_at\": \"<dateTime>\",\n    \"is_download_prevented\": \"<boolean>\"\n   },\n   \"extension\": \"<string>\",\n   \"is_package\": \"<boolean>\",\n   \"expiring_embed_link\": \"<string>\",\n   \"watermark_info\": {\n    \"is_watermarked\": \"<boolean>\"\n   },\n   \"allowed_invitee_roles\": \"open\",\n   \"is_externally_owned\": \"<boolean>\",\n   \"has_collaborations\": \"<boolean>\",\n   \"metadata\": \"<object>\"\n  }\n ]\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    }
                  ],
                  "event": []
                }
              ],
              "event": []
            },
            {
              "id": "6b941863-61f8-4140-823e-e0f7ecc2aaa2",
              "name": "Create upload session for existing file",
              "request": {
                "name": "Create upload session for existing file",
                "description": {
                  "content": "Creates an upload session for an existing file.",
                  "type": "text/plain"
                },
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "2.0",
                    "files",
                    ":file_id",
                    "upload_sessions"
                  ],
                  "host": [
                    "upload",
                    "box",
                    "com"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "description": {
                        "content": "The ID of the file.",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "<string>",
                      "key": "file_id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "auth": {
                  "type": "oauth2"
                },
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"file_size\": \"<long>\",\n    \"file_name\": \"<string>\"\n}"
                }
              },
              "response": [
                {
                  "id": "675181bd-6e57-4c47-b59a-6dec543233b6",
                  "name": "Returns a new upload session.",
                  "originalRequest": {
                    "url": {
                      "protocol": "https",
                      "path": [
                        "api",
                        "2.0",
                        "files",
                        "<string>",
                        "upload_sessions"
                      ],
                      "host": [
                        "upload",
                        "box",
                        "com"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "method": "POST",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"file_size\": \"<long>\",\n    \"file_name\": \"<string>\"\n}"
                    }
                  },
                  "status": "Created",
                  "code": 201,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n \"id\": \"<string>\",\n \"type\": \"<string>\",\n \"session_expires_at\": \"<dateTime>\",\n \"part_size\": \"<long>\",\n \"total_parts\": \"<integer>\",\n \"num_parts_processed\": \"<integer>\",\n \"session_endpoints\": {\n  \"upload_part\": \"<string>\",\n  \"commit\": \"<string>\",\n  \"abort\": \"<string>\",\n  \"list_parts\": \"<string>\",\n  \"status\": \"<string>\",\n  \"log_event\": \"<string>\"\n }\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "151e38ab-1af7-4002-b01d-8d3cb499d1f9",
                  "name": "Returns an error if the file already exists,\nor the account has run out of disk space.",
                  "originalRequest": {
                    "url": {
                      "protocol": "https",
                      "path": [
                        "api",
                        "2.0",
                        "files",
                        "<string>",
                        "upload_sessions"
                      ],
                      "host": [
                        "upload",
                        "box",
                        "com"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "method": "POST",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"file_size\": \"<long>\",\n    \"file_name\": \"<string>\"\n}"
                    }
                  },
                  "status": "Conflict",
                  "code": 409,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": []
            },
            {
              "id": "5db1165b-d821-417e-8e4c-ab6827b2719a",
              "name": "Copy a file",
              "request": {
                "name": "Copy a file",
                "description": {
                  "content": "Creates a copy of a file.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "files",
                    ":file_id",
                    "copy"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response, unless explicitly specified.",
                      "key": "fields",
                      "value": "<string>,<string>"
                    }
                  ],
                  "variable": [
                    {
                      "description": {
                        "content": "The ID of the file.",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "<string>",
                      "key": "file_id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "auth": {
                  "type": "oauth2"
                },
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"parent\": {\n        \"id\": \"<string>\"\n    },\n    \"name\": \"<string>\",\n    \"version\": \"<string>\"\n}"
                }
              },
              "response": [
                {
                  "id": "eb6578a0-57ce-4dbc-8a03-351b5e486e83",
                  "name": "Returns a new file object representing the copied file.\n\n[Some fields are optional](#file) and need to be explicitly\nrequested using the [fields](#post-files-id-copy--request--fields)\nparameter.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "files",
                        "<string>",
                        "copy"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "fields",
                          "value": "<string>,<string>"
                        }
                      ],
                      "variable": []
                    },
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "method": "POST",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"parent\": {\n        \"id\": \"<string>\"\n    },\n    \"name\": \"<string>\",\n    \"version\": \"<string>\"\n}"
                    }
                  },
                  "status": "Created",
                  "code": 201,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n \"id\": \"<string>\",\n \"type\": \"<string>\",\n \"sequence_id\": \"<string>\",\n \"etag\": \"<string>\",\n \"name\": \"<string>\",\n \"sha1\": \"<digest>\",\n \"description\": \"<string>\",\n \"size\": \"<integer>\",\n \"path_collection\": [\n  {\n   \"id\": \"<string>\",\n   \"type\": \"<string>\",\n   \"sequence_id\": \"<string>\",\n   \"etag\": \"<string>\",\n   \"name\": \"<string>\"\n  },\n  {\n   \"id\": \"<string>\",\n   \"type\": \"<string>\",\n   \"sequence_id\": \"<string>\",\n   \"etag\": \"<string>\",\n   \"name\": \"<string>\"\n  }\n ],\n \"created_at\": \"<dateTime>\",\n \"modified_at\": \"<dateTime>\",\n \"trashed_at\": \"<dateTime>\",\n \"purged_at\": \"<dateTime>\",\n \"content_created_at\": \"<dateTime>\",\n \"content_modified_at\": \"<dateTime>\",\n \"expires_at\": \"<dateTime>\",\n \"created_by\": {\n  \"id\": \"<string>\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"modified_by\": {\n  \"id\": \"<string>\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"owned_by\": {\n  \"id\": \"<string>\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"shared_link\": {\n  \"url\": \"<url>\",\n  \"download_url\": \"<url>\",\n  \"vanity_url\": \"<url>\",\n  \"access\": \"<string>\",\n  \"effective_access\": \"<string>\",\n  \"effective_permission\": \"<string>\",\n  \"unshared_at\": \"<dateTime>\",\n  \"is_password_enabled\": \"<boolean>\",\n  \"permissions\": {\n   \"can_download\": \"<boolean>\",\n   \"can_preview\": \"<boolean>\"\n  },\n  \"download_count\": \"<integer>\",\n  \"preview_count\": \"<integer>\"\n },\n \"parent\": {\n  \"id\": \"<string>\",\n  \"type\": \"<string>\",\n  \"sequence_id\": \"<string>\",\n  \"etag\": \"<string>\",\n  \"name\": \"<string>\"\n },\n \"item_status\": \"<string>\",\n \"version_number\": \"<string>\",\n \"comment_count\": \"<integer>\",\n \"permissions\": {\n  \"can_delete\": \"<boolean>\",\n  \"can_download\": \"<boolean>\",\n  \"can_invite_collaborator\": \"<boolean>\",\n  \"can_rename\": \"<boolean>\",\n  \"can_set_share_access\": \"<boolean>\",\n  \"can_share\": \"<boolean>\",\n  \"can_annotate\": \"<boolean>\",\n  \"can_comment\": \"<boolean>\",\n  \"can_preview\": \"<boolean>\",\n  \"can_upload\": \"<boolean>\",\n  \"can_view_annotations_all\": \"<boolean>\",\n  \"can_view_annotations_self\": \"<boolean>\"\n },\n \"tags\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"lock\": {\n  \"id\": \"<string>\",\n  \"type\": \"<string>\",\n  \"created_by\": {\n   \"id\": \"<string>\",\n   \"type\": \"<string>\",\n   \"name\": \"<string>\",\n   \"login\": \"<email>\"\n  },\n  \"created_at\": \"<dateTime>\",\n  \"expired_at\": \"<dateTime>\",\n  \"is_download_prevented\": \"<boolean>\"\n },\n \"extension\": \"<string>\",\n \"is_package\": \"<boolean>\",\n \"expiring_embed_link\": \"<string>\",\n \"watermark_info\": {\n  \"is_watermarked\": \"<boolean>\"\n },\n \"allowed_invitee_roles\": \"collaborators\",\n \"is_externally_owned\": \"<boolean>\",\n \"has_collaborations\": \"<boolean>\",\n \"metadata\": \"<object>\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "e27fd144-053e-4fb4-bfd1-d4367417b6a3",
                  "name": "* `operation_blocked_temporary`: Returned if either of the destination\n  or source folders is locked due to another move, copy, delete or\n  restore operation in process.\n\n  The operation can be retried at a later point.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "files",
                        "<string>",
                        "copy"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "fields",
                          "value": "<string>,<string>"
                        }
                      ],
                      "variable": []
                    },
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "method": "POST",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"parent\": {\n        \"id\": \"<string>\"\n    },\n    \"name\": \"<string>\",\n    \"version\": \"<string>\"\n}"
                    }
                  },
                  "status": "Conflict",
                  "code": 409,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": []
            },
            {
              "id": "ab80680d-2a90-4448-a62b-bb82efe7ac77",
              "name": "Get a file thumbnail",
              "request": {
                "name": "Get a file thumbnail",
                "description": {
                  "content": "Retrieves a thumbnail, or smaller image representation, of a file.\n\nSizes of `32x32`,`64x64`, `128x128`, and `256x256` can be returned in\nthe `.png` format and sizes of `32x32`, `94x94`, `160x160`, and `320x320`\ncan be returned in the `.jpg` format.\n\nThumbnails can be generated for the image and video file formats listed\n[found on our community site](http://community.box.com/t5/Managing-\\\nYour-Content/What-file-types-are-supported-by-Box-s-Content-Preview/\\\nta-p/327).",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "files",
                    ":file_id",
                    "thumbnail.:extension"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "description": "The minimum height of the thumbnail",
                      "key": "min_height",
                      "value": "<long>"
                    },
                    {
                      "description": "The minimum width of the thumbnail",
                      "key": "min_width",
                      "value": "<long>"
                    },
                    {
                      "description": "The maximum height of the thumbnail",
                      "key": "max_height",
                      "value": "<long>"
                    },
                    {
                      "description": "The maximum width of the thumbnail",
                      "key": "max_width",
                      "value": "<long>"
                    }
                  ],
                  "variable": [
                    {
                      "description": {
                        "content": "The ID of the file.",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "<string>",
                      "key": "file_id"
                    },
                    {
                      "description": {
                        "content": "The file format for the thumbnail",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "<string>",
                      "key": "extension"
                    }
                  ]
                },
                "method": "GET",
                "auth": {
                  "type": "oauth2"
                }
              },
              "response": [
                {
                  "id": "86b4ba6f-de92-42c0-9ad6-14127088c306",
                  "name": "When a thumbnail can be created the thumbnail data will be\nreturned in the body of the response.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "files",
                        "<string>",
                        "thumbnail.:extension"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "min_height",
                          "value": "<long>"
                        },
                        {
                          "key": "min_width",
                          "value": "<long>"
                        },
                        {
                          "key": "max_height",
                          "value": "<long>"
                        },
                        {
                          "key": "max_width",
                          "value": "<long>"
                        }
                      ],
                      "variable": []
                    },
                    "method": "GET",
                    "body": {}
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "image/png"
                    }
                  ],
                  "body": "<binary>",
                  "cookie": [],
                  "_postman_previewlanguage": "text"
                },
                {
                  "id": "44752af0-4135-4711-aea6-2010524f6505",
                  "name": "If the thumbnail is not available yet, a `Location` header\npointing to a placeholder graphic will be returned.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "files",
                        "<string>",
                        "thumbnail.:extension"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "min_height",
                          "value": "<long>"
                        },
                        {
                          "key": "min_width",
                          "value": "<long>"
                        },
                        {
                          "key": "max_height",
                          "value": "<long>"
                        },
                        {
                          "key": "max_width",
                          "value": "<long>"
                        }
                      ],
                      "variable": []
                    },
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Accepted",
                  "code": 202,
                  "header": [
                    {
                      "key": "Retry-After",
                      "value": "<long>",
                      "description": "The time in seconds after which the thumbnail will be available.\n\nYour application  only attempt to get the thumbnail again after\nthis time."
                    },
                    {
                      "key": "Location",
                      "value": "<url>",
                      "description": "A pointer to a placeholder graphic that can be used until the\nthumbnail has been generated."
                    },
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "_postman_previewlanguage": "text"
                },
                {
                  "id": "82eb9158-0d58-4e62-a1ce-08360cfbee27",
                  "name": "If Box is unable to generate a thumbnail for this file type, a `Location`\nheader pointing to a placeholder graphic for this file type will be\nreturned.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "files",
                        "<string>",
                        "thumbnail.:extension"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "min_height",
                          "value": "<long>"
                        },
                        {
                          "key": "min_width",
                          "value": "<long>"
                        },
                        {
                          "key": "max_height",
                          "value": "<long>"
                        },
                        {
                          "key": "max_width",
                          "value": "<long>"
                        }
                      ],
                      "variable": []
                    },
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Found",
                  "code": 302,
                  "header": [
                    {
                      "key": "Location",
                      "value": "<url>",
                      "description": "A pointer to a placeholder graphic that can be used for this\nfile type."
                    },
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "_postman_previewlanguage": "text"
                },
                {
                  "id": "d651180c-35fa-4939-99e5-f5e144f5fbca",
                  "name": "If Box is unable to generate a thumbnail for this particular file, `404`\nwill be returned with a code of `preview_cannot_be_generated`.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "files",
                        "<string>",
                        "thumbnail.:extension"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "min_height",
                          "value": "<long>"
                        },
                        {
                          "key": "min_width",
                          "value": "<long>"
                        },
                        {
                          "key": "max_height",
                          "value": "<long>"
                        },
                        {
                          "key": "max_width",
                          "value": "<long>"
                        }
                      ],
                      "variable": []
                    },
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Not Found",
                  "code": 404,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": []
            },
            {
              "id": "a7387897-626c-40f5-84af-a53c8d5f36ca",
              "name": "Get file collaborations",
              "request": {
                "name": "Get file collaborations",
                "description": {
                  "content": "Retrieves a list of collaborations for a file. This\nreturns all the users that have access to the file.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "files",
                    ":file_id",
                    "collaborations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response, unless explicitly specified.",
                      "key": "fields",
                      "value": "<string>,<string>"
                    },
                    {
                      "description": "The maximum number of items to return per page.",
                      "key": "limit",
                      "value": "100"
                    },
                    {
                      "description": "The offset of the item at which to begin the response.",
                      "key": "offset",
                      "value": "<long>"
                    }
                  ],
                  "variable": [
                    {
                      "description": {
                        "content": "The ID of the file.",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "<string>",
                      "key": "file_id"
                    }
                  ]
                },
                "method": "GET",
                "auth": {
                  "type": "oauth2"
                }
              },
              "response": [
                {
                  "id": "fa344401-a70e-4b5b-91e7-6afc551796fe",
                  "name": "Returns a collection of collaboration objects. If there are no\ncollaborations on this file an empty collection will be returned.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "files",
                        "<string>",
                        "collaborations"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "fields",
                          "value": "<string>,<string>"
                        },
                        {
                          "key": "limit",
                          "value": "100"
                        },
                        {
                          "key": "offset",
                          "value": "<long>"
                        }
                      ],
                      "variable": []
                    },
                    "method": "GET",
                    "body": {}
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n \"total_count\": \"<long>\",\n \"limit\": \"<long>\",\n \"offset\": \"<long>\",\n \"order\": [\n  {\n   \"by\": \"<string>\",\n   \"direction\": \"<string>\"\n  },\n  {\n   \"by\": \"<string>\",\n   \"direction\": \"<string>\"\n  }\n ],\n \"entries\": [\n  {\n   \"id\": \"<string>\",\n   \"type\": \"<string>\",\n   \"item\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\"\n   },\n   \"accessible_by\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"invite_email\": \"<string>\",\n   \"role\": \"<string>\",\n   \"expires_at\": \"<dateTime>\",\n   \"can_view_path\": \"<boolean>\",\n   \"status\": \"<string>\",\n   \"acknowledged_at\": \"<dateTime>\",\n   \"created_by\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"created_at\": \"<dateTime>\",\n   \"modified_at\": \"<dateTime>\",\n   \"acceptance_requirements_status\": {\n    \"terms_of_service_requirement\": {\n     \"is_accepted\": \"<boolean>\",\n     \"terms_of_service\": {\n      \"id\": \"<string>\",\n      \"type\": \"<string>\"\n     }\n    },\n    \"strong_password_requirement\": {\n     \"enterprise_has_strong_password_required_for_external_users\": \"<boolean>\",\n     \"user_has_strong_password\": \"<boolean>\"\n    },\n    \"two_factor_authentication_requirement\": {\n     \"enterprise_has_two_factor_auth_enabled\": \"<boolean>\",\n     \"user_has_two_factor_authentication_enabled\": \"<boolean>\"\n    }\n   }\n  },\n  {\n   \"id\": \"<string>\",\n   \"type\": \"<string>\",\n   \"item\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\"\n   },\n   \"accessible_by\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"invite_email\": \"<string>\",\n   \"role\": \"<string>\",\n   \"expires_at\": \"<dateTime>\",\n   \"can_view_path\": \"<boolean>\",\n   \"status\": \"<string>\",\n   \"acknowledged_at\": \"<dateTime>\",\n   \"created_by\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"created_at\": \"<dateTime>\",\n   \"modified_at\": \"<dateTime>\",\n   \"acceptance_requirements_status\": {\n    \"terms_of_service_requirement\": {\n     \"is_accepted\": \"<boolean>\",\n     \"terms_of_service\": {\n      \"id\": \"<string>\",\n      \"type\": \"<string>\"\n     }\n    },\n    \"strong_password_requirement\": {\n     \"enterprise_has_strong_password_required_for_external_users\": \"<boolean>\",\n     \"user_has_strong_password\": \"<boolean>\"\n    },\n    \"two_factor_authentication_requirement\": {\n     \"enterprise_has_two_factor_auth_enabled\": \"<boolean>\",\n     \"user_has_two_factor_authentication_enabled\": \"<boolean>\"\n    }\n   }\n  }\n ]\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": []
            },
            {
              "id": "6763d0fa-ace0-4ca1-b879-5da33b1e9cd3",
              "name": "List a file's comments",
              "request": {
                "name": "List a file's comments",
                "description": {
                  "content": "Retrieves a list of comments for a file.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "files",
                    ":file_id",
                    "comments"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response, unless explicitly specified.",
                      "key": "fields",
                      "value": "<string>,<string>"
                    },
                    {
                      "description": "The maximum number of items to return per page.",
                      "key": "limit",
                      "value": "100"
                    },
                    {
                      "description": "The offset of the item at which to begin the response.",
                      "key": "offset",
                      "value": "<long>"
                    }
                  ],
                  "variable": [
                    {
                      "description": {
                        "content": "The ID of the file.",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "<string>",
                      "key": "file_id"
                    }
                  ]
                },
                "method": "GET",
                "auth": {
                  "type": "oauth2"
                }
              },
              "response": [
                {
                  "id": "78654845-1a5b-47c3-b4c5-02a57bf1a818",
                  "name": "Returns a collection of comment objects. If there are no\ncomments on this file an empty collection will be returned.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "files",
                        "<string>",
                        "comments"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "fields",
                          "value": "<string>,<string>"
                        },
                        {
                          "key": "limit",
                          "value": "100"
                        },
                        {
                          "key": "offset",
                          "value": "<long>"
                        }
                      ],
                      "variable": []
                    },
                    "method": "GET",
                    "body": {}
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n \"total_count\": \"<long>\",\n \"limit\": \"<long>\",\n \"offset\": \"<long>\",\n \"order\": [\n  {\n   \"by\": \"<string>\",\n   \"direction\": \"<string>\"\n  },\n  {\n   \"by\": \"<string>\",\n   \"direction\": \"<string>\"\n  }\n ],\n \"entries\": [\n  {\n   \"id\": \"<string>\",\n   \"type\": \"<string>\",\n   \"is_reply_comment\": \"<boolean>\",\n   \"message\": \"<string>\",\n   \"created_by\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"created_at\": \"<dateTime>\",\n   \"modified_at\": \"<dateTime>\",\n   \"item\": {\n    \"id\": \"<string>\"\n   },\n   \"tagged_message\": \"<string>\"\n  },\n  {\n   \"id\": \"<string>\",\n   \"type\": \"<string>\",\n   \"is_reply_comment\": \"<boolean>\",\n   \"message\": \"<string>\",\n   \"created_by\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"created_at\": \"<dateTime>\",\n   \"modified_at\": \"<dateTime>\",\n   \"item\": {\n    \"id\": \"<string>\"\n   },\n   \"tagged_message\": \"<string>\"\n  }\n ]\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": []
            },
            {
              "id": "85e2918f-6e26-4f24-a0a4-4467b9ad8925",
              "name": "Get file tasks",
              "request": {
                "name": "Get file tasks",
                "description": {
                  "content": "Retrieves a list of all the tasks for a file. This\nendpoint does not support paging.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "files",
                    ":file_id",
                    "tasks"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "description": {
                        "content": "The ID of the file.",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "<string>",
                      "key": "file_id"
                    }
                  ]
                },
                "method": "GET",
                "auth": {
                  "type": "oauth2"
                }
              },
              "response": [
                {
                  "id": "5b7c57a5-f9b7-440e-bf13-23fea750daeb",
                  "name": "Returns a collection of task objects. If there are no\ntasks on this file an empty collection will be returned.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "files",
                        "<string>",
                        "tasks"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "method": "GET",
                    "body": {}
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n \"total_count\": \"<long>\",\n \"entries\": [\n  {\n   \"id\": \"schema type not provided\",\n   \"type\": \"<string>\",\n   \"item\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\"\n   },\n   \"due_at\": \"<dateTime>\",\n   \"action\": \"<string>\",\n   \"message\": \"<string>\",\n   \"task_assignment_collection\": {\n    \"total_count\": \"<long>\",\n    \"limit\": \"<long>\",\n    \"offset\": \"<long>\",\n    \"order\": [\n     {\n      \"by\": \"<string>\",\n      \"direction\": \"<string>\"\n     },\n     {\n      \"by\": \"<string>\",\n      \"direction\": \"<string>\"\n     }\n    ],\n    \"entries\": [\n     {\n      \"id\": \"schema type not provided\",\n      \"type\": \"<string>\",\n      \"item\": {\n       \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       },\n       \"type\": \"<string>\",\n       \"sequence_id\": \"<string>\",\n       \"etag\": \"<string>\",\n       \"name\": \"<string>\"\n      },\n      \"assigned_to\": {\n       \"id\": \"schema type not provided\",\n       \"type\": \"<string>\",\n       \"name\": \"<string>\",\n       \"login\": \"<email>\"\n      },\n      \"message\": \"<string>\",\n      \"completed_at\": \"<dateTime>\",\n      \"assigned_at\": \"<dateTime>\",\n      \"reminded_at\": \"<dateTime>\",\n      \"resolution_state\": \"<string>\",\n      \"assigned_by\": {\n       \"id\": \"schema type not provided\",\n       \"type\": \"<string>\",\n       \"name\": \"<string>\",\n       \"login\": \"<email>\"\n      }\n     },\n     {\n      \"id\": \"schema type not provided\",\n      \"type\": \"<string>\",\n      \"item\": {\n       \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       },\n       \"type\": \"<string>\",\n       \"sequence_id\": \"<string>\",\n       \"etag\": \"<string>\",\n       \"name\": \"<string>\"\n      },\n      \"assigned_to\": {\n       \"id\": \"schema type not provided\",\n       \"type\": \"<string>\",\n       \"name\": \"<string>\",\n       \"login\": \"<email>\"\n      },\n      \"message\": \"<string>\",\n      \"completed_at\": \"<dateTime>\",\n      \"assigned_at\": \"<dateTime>\",\n      \"reminded_at\": \"<dateTime>\",\n      \"resolution_state\": \"<string>\",\n      \"assigned_by\": {\n       \"id\": \"schema type not provided\",\n       \"type\": \"<string>\",\n       \"name\": \"<string>\",\n       \"login\": \"<email>\"\n      }\n     }\n    ]\n   },\n   \"is_completed\": \"<boolean>\",\n   \"created_by\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"created_at\": \"<dateTime>\"\n  },\n  {\n   \"id\": \"schema type not provided\",\n   \"type\": \"<string>\",\n   \"item\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\"\n   },\n   \"due_at\": \"<dateTime>\",\n   \"action\": \"<string>\",\n   \"message\": \"<string>\",\n   \"task_assignment_collection\": {\n    \"total_count\": \"<long>\",\n    \"limit\": \"<long>\",\n    \"offset\": \"<long>\",\n    \"order\": [\n     {\n      \"by\": \"<string>\",\n      \"direction\": \"<string>\"\n     },\n     {\n      \"by\": \"<string>\",\n      \"direction\": \"<string>\"\n     }\n    ],\n    \"entries\": [\n     {\n      \"id\": \"schema type not provided\",\n      \"type\": \"<string>\",\n      \"item\": {\n       \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       },\n       \"type\": \"<string>\",\n       \"sequence_id\": \"<string>\",\n       \"etag\": \"<string>\",\n       \"name\": \"<string>\"\n      },\n      \"assigned_to\": {\n       \"id\": \"schema type not provided\",\n       \"type\": \"<string>\",\n       \"name\": \"<string>\",\n       \"login\": \"<email>\"\n      },\n      \"message\": \"<string>\",\n      \"completed_at\": \"<dateTime>\",\n      \"assigned_at\": \"<dateTime>\",\n      \"reminded_at\": \"<dateTime>\",\n      \"resolution_state\": \"<string>\",\n      \"assigned_by\": {\n       \"id\": \"schema type not provided\",\n       \"type\": \"<string>\",\n       \"name\": \"<string>\",\n       \"login\": \"<email>\"\n      }\n     },\n     {\n      \"id\": \"schema type not provided\",\n      \"type\": \"<string>\",\n      \"item\": {\n       \"id\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n       },\n       \"type\": \"<string>\",\n       \"sequence_id\": \"<string>\",\n       \"etag\": \"<string>\",\n       \"name\": \"<string>\"\n      },\n      \"assigned_to\": {\n       \"id\": \"schema type not provided\",\n       \"type\": \"<string>\",\n       \"name\": \"<string>\",\n       \"login\": \"<email>\"\n      },\n      \"message\": \"<string>\",\n      \"completed_at\": \"<dateTime>\",\n      \"assigned_at\": \"<dateTime>\",\n      \"reminded_at\": \"<dateTime>\",\n      \"resolution_state\": \"<string>\",\n      \"assigned_by\": {\n       \"id\": \"schema type not provided\",\n       \"type\": \"<string>\",\n       \"name\": \"<string>\",\n       \"login\": \"<email>\"\n      }\n     }\n    ]\n   },\n   \"is_completed\": \"<boolean>\",\n   \"created_by\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"created_at\": \"<dateTime>\"\n  }\n ]\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "d89fb7f2-2cb0-49ca-b1eb-648d50e96e72",
                  "name": "Returns an error if the file for the given ID does not exist or\nis inaccessible to your account.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "files",
                        "<string>",
                        "tasks"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Not Found",
                  "code": 404,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": []
            },
            {
              "id": "596645c3-1fd2-4244-a853-df18b8d3bf02",
              "name": "trash",
              "item": [
                {
                  "id": "852ef4d6-d89a-4508-9cf6-74a91c948f6d",
                  "name": "Get trashed file",
                  "request": {
                    "name": "Get trashed file",
                    "description": {
                      "content": "Retrieves a file that has been moved to the trash.",
                      "type": "text/plain"
                    },
                    "url": {
                      "path": [
                        "files",
                        ":file_id",
                        "trash"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response, unless explicitly specified.",
                          "key": "fields",
                          "value": "<string>,<string>"
                        }
                      ],
                      "variable": [
                        {
                          "description": {
                            "content": "The ID of the file.",
                            "type": "text/plain"
                          },
                          "type": "any",
                          "value": "<string>",
                          "key": "file_id"
                        }
                      ]
                    },
                    "method": "GET",
                    "auth": {
                      "type": "oauth2"
                    }
                  },
                  "response": [
                    {
                      "id": "0dd95510-16be-4c4d-a1d6-ba52ebad730c",
                      "name": "Returns the file that was trashed,\nincluding information about when the it\nwas moved to the trash.",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "files",
                            "<string>",
                            "trash"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [
                            {
                              "key": "fields",
                              "value": "<string>,<string>"
                            }
                          ],
                          "variable": []
                        },
                        "method": "GET",
                        "body": {}
                      },
                      "status": "OK",
                      "code": 200,
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"sequence_id\": \"<string>\",\n \"etag\": \"<string>\",\n \"name\": \"<string>\",\n \"sha1\": \"<digest>\",\n \"description\": \"<string>\",\n \"size\": \"<integer>\",\n \"path_collection\": [\n  {\n   \"id\": \"<string>\",\n   \"type\": \"<string>\",\n   \"sequence_id\": \"<string>\",\n   \"etag\": \"<string>\",\n   \"name\": \"<string>\"\n  },\n  {\n   \"id\": \"<string>\",\n   \"type\": \"<string>\",\n   \"sequence_id\": \"<string>\",\n   \"etag\": \"<string>\",\n   \"name\": \"<string>\"\n  }\n ],\n \"created_at\": \"<dateTime>\",\n \"modified_at\": \"<dateTime>\",\n \"trashed_at\": \"<dateTime>\",\n \"purged_at\": \"<dateTime>\",\n \"content_created_at\": \"<dateTime>\",\n \"content_modified_at\": \"<dateTime>\",\n \"expires_at\": \"<dateTime>\",\n \"created_by\": {\n  \"id\": \"<string>\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"modified_by\": {\n  \"id\": \"<string>\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"owned_by\": {\n  \"id\": \"<string>\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"shared_link\": {\n  \"url\": \"<url>\",\n  \"download_url\": \"<url>\",\n  \"vanity_url\": \"<url>\",\n  \"access\": \"<string>\",\n  \"effective_access\": \"<string>\",\n  \"effective_permission\": \"<string>\",\n  \"unshared_at\": \"<dateTime>\",\n  \"is_password_enabled\": \"<boolean>\",\n  \"permissions\": {\n   \"can_download\": \"<boolean>\",\n   \"can_preview\": \"<boolean>\"\n  },\n  \"download_count\": \"<integer>\",\n  \"preview_count\": \"<integer>\"\n },\n \"parent\": {\n  \"id\": \"<string>\",\n  \"type\": \"<string>\",\n  \"sequence_id\": \"<string>\",\n  \"etag\": \"<string>\",\n  \"name\": \"<string>\"\n },\n \"item_status\": \"<string>\",\n \"version_number\": \"<string>\",\n \"comment_count\": \"<integer>\",\n \"permissions\": {\n  \"can_delete\": \"<boolean>\",\n  \"can_download\": \"<boolean>\",\n  \"can_invite_collaborator\": \"<boolean>\",\n  \"can_rename\": \"<boolean>\",\n  \"can_set_share_access\": \"<boolean>\",\n  \"can_share\": \"<boolean>\",\n  \"can_annotate\": \"<boolean>\",\n  \"can_comment\": \"<boolean>\",\n  \"can_preview\": \"<boolean>\",\n  \"can_upload\": \"<boolean>\",\n  \"can_view_annotations_all\": \"<boolean>\",\n  \"can_view_annotations_self\": \"<boolean>\"\n },\n \"tags\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"lock\": {\n  \"id\": \"<string>\",\n  \"type\": \"<string>\",\n  \"created_by\": {\n   \"id\": \"<string>\",\n   \"type\": \"<string>\",\n   \"name\": \"<string>\",\n   \"login\": \"<email>\"\n  },\n  \"created_at\": \"<dateTime>\",\n  \"expired_at\": \"<dateTime>\",\n  \"is_download_prevented\": \"<boolean>\"\n },\n \"extension\": \"<string>\",\n \"is_package\": \"<boolean>\",\n \"expiring_embed_link\": \"<string>\",\n \"watermark_info\": {\n  \"is_watermarked\": \"<boolean>\"\n },\n \"allowed_invitee_roles\": \"open\",\n \"is_externally_owned\": \"<boolean>\",\n \"has_collaborations\": \"<boolean>\",\n \"metadata\": \"<object>\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    },
                    {
                      "id": "d72f4321-dd1c-432a-a169-7771633bd874",
                      "name": "Returns an error if the file is not in the trash.",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "files",
                            "<string>",
                            "trash"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [
                            {
                              "key": "fields",
                              "value": "<string>,<string>"
                            }
                          ],
                          "variable": []
                        },
                        "method": "GET",
                        "body": {}
                      },
                      "status": "Not Found",
                      "code": 404,
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    }
                  ],
                  "event": []
                },
                {
                  "id": "6503bb00-8ba7-4230-a9bd-5d535c383072",
                  "name": "Permanently delete file",
                  "request": {
                    "name": "Permanently delete file",
                    "description": {
                      "content": "Permanently deletes a file that is in the trash.\nThis action cannot be undone.",
                      "type": "text/plain"
                    },
                    "url": {
                      "path": [
                        "files",
                        ":file_id",
                        "trash"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "description": {
                            "content": "The ID of the file.",
                            "type": "text/plain"
                          },
                          "type": "any",
                          "value": "<string>",
                          "key": "file_id"
                        }
                      ]
                    },
                    "method": "DELETE",
                    "auth": {
                      "type": "oauth2"
                    }
                  },
                  "response": [
                    {
                      "id": "27279b6b-0f7c-46d2-8da7-5a43baab706c",
                      "name": "Returns an empty response when the file was\npermanently deleted.",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "files",
                            "<string>",
                            "trash"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": []
                        },
                        "method": "DELETE",
                        "body": {}
                      },
                      "status": "No Content",
                      "code": 204,
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "text/plain"
                        }
                      ],
                      "body": "",
                      "cookie": [],
                      "_postman_previewlanguage": "text"
                    },
                    {
                      "id": "9ccd4560-8a5f-4daf-a457-81204a512856",
                      "name": "Returns an error if the file is not in the trash.",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "files",
                            "<string>",
                            "trash"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": []
                        },
                        "method": "DELETE",
                        "body": {}
                      },
                      "status": "Not Found",
                      "code": 404,
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    }
                  ],
                  "event": []
                }
              ],
              "event": []
            },
            {
              "id": "984a25b2-ed0b-4f06-838e-7df99f614712",
              "name": "versions",
              "item": [
                {
                  "id": "8d392ec6-209e-42c2-b257-7eecad053f15",
                  "name": "List all file versions",
                  "request": {
                    "name": "List all file versions",
                    "description": {
                      "content": "Retrieve information on all version of a file. This endpoint can be used to\nretrieve information about older versions of a file.\n\nVersions are only tracked for Box users with premium accounts.",
                      "type": "text/plain"
                    },
                    "url": {
                      "path": [
                        "files",
                        ":file_id",
                        "versions"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response, unless explicitly specified.",
                          "key": "fields",
                          "value": "<string>,<string>"
                        },
                        {
                          "description": "The maximum number of items to return per page.",
                          "key": "limit",
                          "value": "100"
                        },
                        {
                          "description": "The offset of the item at which to begin the response.",
                          "key": "offset",
                          "value": "<long>"
                        }
                      ],
                      "variable": [
                        {
                          "description": {
                            "content": "The ID of the file.",
                            "type": "text/plain"
                          },
                          "type": "any",
                          "value": "<string>",
                          "key": "file_id"
                        }
                      ]
                    },
                    "method": "GET",
                    "auth": {
                      "type": "oauth2"
                    }
                  },
                  "response": [
                    {
                      "id": "a592916d-cdc2-4a64-b5ea-05eb2842606b",
                      "name": "Returns an array of file versions.\n\nIf there are no previous versions of this file an empty\narray will be returned.",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "files",
                            "<string>",
                            "versions"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [
                            {
                              "key": "fields",
                              "value": "<string>,<string>"
                            },
                            {
                              "key": "limit",
                              "value": "100"
                            },
                            {
                              "key": "offset",
                              "value": "<long>"
                            }
                          ],
                          "variable": []
                        },
                        "method": "GET",
                        "body": {}
                      },
                      "status": "OK",
                      "code": 200,
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n \"total_count\": \"<long>\",\n \"limit\": \"<long>\",\n \"offset\": \"<long>\",\n \"order\": [\n  {\n   \"by\": \"<string>\",\n   \"direction\": \"<string>\"\n  },\n  {\n   \"by\": \"<string>\",\n   \"direction\": \"<string>\"\n  }\n ],\n \"entries\": [\n  {\n   \"id\": \"schema type not provided\",\n   \"type\": \"<string>\",\n   \"sha1\": \"<string>\",\n   \"name\": \"<string>\",\n   \"size\": \"<long>\",\n   \"created_at\": \"<dateTime>\",\n   \"modified_at\": \"<dateTime>\",\n   \"modified_by\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"trashed_at\": \"<dateTime>\",\n   \"purged_at\": \"<dateTime>\"\n  },\n  {\n   \"id\": \"schema type not provided\",\n   \"type\": \"<string>\",\n   \"sha1\": \"<string>\",\n   \"name\": \"<string>\",\n   \"size\": \"<long>\",\n   \"created_at\": \"<dateTime>\",\n   \"modified_at\": \"<dateTime>\",\n   \"modified_by\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"trashed_at\": \"<dateTime>\",\n   \"purged_at\": \"<dateTime>\"\n  }\n ]\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    }
                  ],
                  "event": []
                },
                {
                  "id": "746d83f4-0a2a-455d-b8f5-a1b243ce5714",
                  "name": "{file version id}",
                  "item": [
                    {
                      "id": "0e79ef70-2262-45d3-a519-bbc6eb829bed",
                      "name": "Get a file version",
                      "request": {
                        "name": "Get a file version",
                        "description": {
                          "content": "Retrieve a specific older version of a file.\n\nVersions are only tracked for Box users with premium accounts.",
                          "type": "text/plain"
                        },
                        "url": {
                          "path": [
                            "files",
                            ":file_id",
                            "versions",
                            ":file_version_id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [
                            {
                              "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response, unless explicitly specified.",
                              "key": "fields",
                              "value": "<string>,<string>"
                            }
                          ],
                          "variable": [
                            {
                              "description": {
                                "content": "The ID of the file.",
                                "type": "text/plain"
                              },
                              "type": "any",
                              "value": "<string>",
                              "key": "file_id"
                            },
                            {
                              "description": {
                                "content": "The ID of the file version",
                                "type": "text/plain"
                              },
                              "type": "any",
                              "value": "<string>",
                              "key": "file_version_id"
                            }
                          ]
                        },
                        "method": "GET",
                        "auth": {
                          "type": "oauth2"
                        }
                      },
                      "response": [
                        {
                          "id": "8dfdc5ea-f4be-47a7-85bf-8480f40a20a2",
                          "name": "Returns a file object.\n\n[Some fields are optional](#file) and need to be explicitly\nrequested using the [fields](#get-files-id-versions--request--fields)\nparameter.",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "files",
                                "<string>",
                                "versions",
                                "<string>"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [
                                {
                                  "key": "fields",
                                  "value": "<string>,<string>"
                                }
                              ],
                              "variable": []
                            },
                            "method": "GET",
                            "body": {}
                          },
                          "status": "OK",
                          "code": 200,
                          "header": [
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"sequence_id\": \"<string>\",\n \"etag\": \"<string>\",\n \"name\": \"<string>\",\n \"sha1\": \"<digest>\",\n \"description\": \"<string>\",\n \"size\": \"<integer>\",\n \"path_collection\": [\n  {\n   \"id\": \"<string>\",\n   \"type\": \"<string>\",\n   \"sequence_id\": \"<string>\",\n   \"etag\": \"<string>\",\n   \"name\": \"<string>\"\n  },\n  {\n   \"id\": \"<string>\",\n   \"type\": \"<string>\",\n   \"sequence_id\": \"<string>\",\n   \"etag\": \"<string>\",\n   \"name\": \"<string>\"\n  }\n ],\n \"created_at\": \"<dateTime>\",\n \"modified_at\": \"<dateTime>\",\n \"trashed_at\": \"<dateTime>\",\n \"purged_at\": \"<dateTime>\",\n \"content_created_at\": \"<dateTime>\",\n \"content_modified_at\": \"<dateTime>\",\n \"expires_at\": \"<dateTime>\",\n \"created_by\": {\n  \"id\": \"<string>\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"modified_by\": {\n  \"id\": \"<string>\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"owned_by\": {\n  \"id\": \"<string>\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"shared_link\": {\n  \"url\": \"<url>\",\n  \"download_url\": \"<url>\",\n  \"vanity_url\": \"<url>\",\n  \"access\": \"<string>\",\n  \"effective_access\": \"<string>\",\n  \"effective_permission\": \"<string>\",\n  \"unshared_at\": \"<dateTime>\",\n  \"is_password_enabled\": \"<boolean>\",\n  \"permissions\": {\n   \"can_download\": \"<boolean>\",\n   \"can_preview\": \"<boolean>\"\n  },\n  \"download_count\": \"<integer>\",\n  \"preview_count\": \"<integer>\"\n },\n \"parent\": {\n  \"id\": \"<string>\",\n  \"type\": \"<string>\",\n  \"sequence_id\": \"<string>\",\n  \"etag\": \"<string>\",\n  \"name\": \"<string>\"\n },\n \"item_status\": \"<string>\",\n \"version_number\": \"<string>\",\n \"comment_count\": \"<integer>\",\n \"permissions\": {\n  \"can_delete\": \"<boolean>\",\n  \"can_download\": \"<boolean>\",\n  \"can_invite_collaborator\": \"<boolean>\",\n  \"can_rename\": \"<boolean>\",\n  \"can_set_share_access\": \"<boolean>\",\n  \"can_share\": \"<boolean>\",\n  \"can_annotate\": \"<boolean>\",\n  \"can_comment\": \"<boolean>\",\n  \"can_preview\": \"<boolean>\",\n  \"can_upload\": \"<boolean>\",\n  \"can_view_annotations_all\": \"<boolean>\",\n  \"can_view_annotations_self\": \"<boolean>\"\n },\n \"tags\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"lock\": {\n  \"id\": \"<string>\",\n  \"type\": \"<string>\",\n  \"created_by\": {\n   \"id\": \"<string>\",\n   \"type\": \"<string>\",\n   \"name\": \"<string>\",\n   \"login\": \"<email>\"\n  },\n  \"created_at\": \"<dateTime>\",\n  \"expired_at\": \"<dateTime>\",\n  \"is_download_prevented\": \"<boolean>\"\n },\n \"extension\": \"<string>\",\n \"is_package\": \"<boolean>\",\n \"expiring_embed_link\": \"<string>\",\n \"watermark_info\": {\n  \"is_watermarked\": \"<boolean>\"\n },\n \"allowed_invitee_roles\": \"collaborators\",\n \"is_externally_owned\": \"<boolean>\",\n \"has_collaborations\": \"<boolean>\",\n \"metadata\": \"<object>\"\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        }
                      ],
                      "event": []
                    },
                    {
                      "id": "f3078106-2b8d-47fb-b57b-d9e319ff334a",
                      "name": "Delete file version",
                      "request": {
                        "name": "Delete file version",
                        "description": {
                          "content": "Move a file version to the trash.\n\nVersions are only tracked for Box users with premium accounts.",
                          "type": "text/plain"
                        },
                        "url": {
                          "path": [
                            "files",
                            ":file_id",
                            "versions",
                            ":file_version_id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "description": {
                                "content": "The ID of the file.",
                                "type": "text/plain"
                              },
                              "type": "any",
                              "value": "<string>",
                              "key": "file_id"
                            },
                            {
                              "description": {
                                "content": "The ID of the file version",
                                "type": "text/plain"
                              },
                              "type": "any",
                              "value": "<string>",
                              "key": "file_version_id"
                            }
                          ]
                        },
                        "header": [
                          {
                            "key": "If-Match",
                            "value": "<string>",
                            "description": "Ensure this item hasn't recently changed\nby ensuring the item's current `etag` matches the\n`etag` passed into this header."
                          }
                        ],
                        "method": "DELETE",
                        "auth": {
                          "type": "oauth2"
                        }
                      },
                      "response": [
                        {
                          "id": "437ff1c6-d8d9-47a5-83cc-92186fdac1d3",
                          "name": "Returns an empty response when the file has been successfully\ndeleted.",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "files",
                                "<string>",
                                "versions",
                                "<string>"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [],
                              "variable": []
                            },
                            "header": [
                              {
                                "description": {
                                  "content": "Ensure this item hasn't recently changed\nby ensuring the item's current `etag` matches the\n`etag` passed into this header.",
                                  "type": "text/plain"
                                },
                                "key": "If-Match",
                                "value": "<string>"
                              }
                            ],
                            "method": "DELETE",
                            "body": {}
                          },
                          "status": "No Content",
                          "code": 204,
                          "header": [
                            {
                              "key": "Content-Type",
                              "value": "text/plain"
                            }
                          ],
                          "body": "",
                          "cookie": [],
                          "_postman_previewlanguage": "text"
                        }
                      ],
                      "event": []
                    }
                  ],
                  "event": []
                },
                {
                  "id": "ca0efb2e-6c43-43b0-ac8e-f13a47de8ae2",
                  "name": "Revert file version",
                  "request": {
                    "name": "Revert file version",
                    "description": {
                      "content": "Revert to a previous version of a file.\n\n\nIf previous versions exist, this method can be used to\npromote one of the older versions to the top of the version history.\n\nThis actually creates a new copy of the old version and puts it at the\ntop of the versions history. The file will have the exact same contents\nas the older version, with the the same SHA1/etag, and the same name\nas the original.\n\nOther properties such as comments do not get updated to their\nformer values.",
                      "type": "text/plain"
                    },
                    "url": {
                      "path": [
                        "files",
                        ":file_id",
                        "versions",
                        "current"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response, unless explicitly specified.",
                          "key": "fields",
                          "value": "<string>,<string>"
                        }
                      ],
                      "variable": [
                        {
                          "description": {
                            "content": "The ID of the file.",
                            "type": "text/plain"
                          },
                          "type": "any",
                          "value": "<string>",
                          "key": "file_id"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "method": "POST",
                    "auth": {
                      "type": "oauth2"
                    },
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"id\": \"<string>\",\n    \"type\": \"<string>\"\n}"
                    }
                  },
                  "response": [
                    {
                      "id": "3e7d67ed-72f4-4ab6-83bb-5d60ffa34e22",
                      "name": "Returns a newly created file version object.",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "files",
                            "<string>",
                            "versions",
                            "current"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [
                            {
                              "key": "fields",
                              "value": "<string>,<string>"
                            }
                          ],
                          "variable": []
                        },
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "method": "POST",
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"id\": \"<string>\",\n    \"type\": \"<string>\"\n}"
                        }
                      },
                      "status": "Created",
                      "code": 201,
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"sha1\": \"<string>\",\n \"name\": \"<string>\",\n \"size\": \"<long>\",\n \"created_at\": \"<dateTime>\",\n \"modified_at\": \"<dateTime>\",\n \"modified_by\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"trashed_at\": \"<dateTime>\",\n \"purged_at\": \"<dateTime>\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    }
                  ],
                  "event": []
                }
              ],
              "event": []
            },
            {
              "id": "7c634a73-1ed4-46da-a788-779e3288e68b",
              "name": "metadata",
              "item": [
                {
                  "id": "ccb8a717-e4af-4164-9a62-04ebfe3b8ca6",
                  "name": "List file's metadata",
                  "request": {
                    "name": "List file's metadata",
                    "description": {
                      "content": "Retrieves all metadata for a given file.",
                      "type": "text/plain"
                    },
                    "url": {
                      "path": [
                        "files",
                        ":file_id",
                        "metadata"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "description": {
                            "content": "The ID of the file.",
                            "type": "text/plain"
                          },
                          "type": "any",
                          "value": "<string>",
                          "key": "file_id"
                        }
                      ]
                    },
                    "method": "GET",
                    "auth": {
                      "type": "oauth2"
                    }
                  },
                  "response": [
                    {
                      "id": "ee2094a4-1e69-4caf-bb6c-eff53d91ac49",
                      "name": "Returns all the metadata associated with a file.\n\nThis API does not support pagination and will therefore always return\nall of the metadata associated to the file.",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "files",
                            "<string>",
                            "metadata"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": []
                        },
                        "method": "GET",
                        "body": {}
                      },
                      "status": "OK",
                      "code": 200,
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n \"entries\": [\n  {\n   \"$canEdit\": \"<boolean>\",\n   \"$id\": \"<uuid>\",\n   \"$parent\": \"<string>\",\n   \"$scope\": \"<string>\",\n   \"$template\": \"<string>\",\n   \"$type\": \"<string>\",\n   \"$typeVersion\": \"<integer>\",\n   \"$version\": \"<integer>\"\n  },\n  {\n   \"$canEdit\": \"<boolean>\",\n   \"$id\": \"<uuid>\",\n   \"$parent\": \"<string>\",\n   \"$scope\": \"<string>\",\n   \"$template\": \"<string>\",\n   \"$type\": \"<string>\",\n   \"$typeVersion\": \"<integer>\",\n   \"$version\": \"<integer>\"\n  }\n ]\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    }
                  ],
                  "event": []
                },
                {
                  "id": "9b77cfe9-cbfb-4ec2-81d2-5bc0803a90b1",
                  "name": "{scope}",
                  "item": [
                    {
                      "id": "6595dba4-0579-4cfc-900f-928ca314e715",
                      "name": "{template key}",
                      "item": [
                        {
                          "id": "fccccd18-902d-4344-88a2-6ec24e0f560c",
                          "name": "Get specific file metadata",
                          "request": {
                            "name": "Get specific file metadata",
                            "description": {
                              "content": "Retrieve a specific metadata template instance for a file",
                              "type": "text/plain"
                            },
                            "url": {
                              "path": [
                                "files",
                                ":file_id",
                                "metadata",
                                ":scope",
                                ":template_key"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [],
                              "variable": [
                                {
                                  "description": {
                                    "content": "The ID of the file.",
                                    "type": "text/plain"
                                  },
                                  "type": "any",
                                  "value": "<string>",
                                  "key": "file_id"
                                },
                                {
                                  "description": {
                                    "content": "The scope of the metadata template",
                                    "type": "text/plain"
                                  },
                                  "type": "any",
                                  "value": "<string>",
                                  "key": "scope"
                                },
                                {
                                  "description": {
                                    "content": "The name of the metadata template",
                                    "type": "text/plain"
                                  },
                                  "type": "any",
                                  "value": "<string>",
                                  "key": "template_key"
                                }
                              ]
                            },
                            "method": "GET",
                            "auth": {
                              "type": "oauth2"
                            }
                          },
                          "response": [
                            {
                              "id": "f3b1db76-6e65-4291-922e-97156f2d026a",
                              "name": "An instance of the metadata template that includes\nadditional \"key:value\" pairs defined by the user or\nan application.",
                              "originalRequest": {
                                "url": {
                                  "path": [
                                    "files",
                                    "<string>",
                                    "metadata",
                                    "<string>",
                                    "<string>"
                                  ],
                                  "host": [
                                    "{{baseUrl}}"
                                  ],
                                  "query": [],
                                  "variable": []
                                },
                                "method": "GET",
                                "body": {}
                              },
                              "status": "Created",
                              "code": 201,
                              "header": [
                                {
                                  "key": "Content-Type",
                                  "value": "application/json"
                                }
                              ],
                              "body": "{\n \"$canEdit\": \"<boolean>\",\n \"$id\": \"<uuid>\",\n \"$parent\": \"<string>\",\n \"$scope\": \"<string>\",\n \"$template\": \"<string>\",\n \"$type\": \"<string>\",\n \"$typeVersion\": \"<integer>\",\n \"$version\": \"<integer>\"\n}",
                              "cookie": [],
                              "_postman_previewlanguage": "json"
                            },
                            {
                              "id": "d75ee410-b4ae-4e85-8e42-90529639bb0a",
                              "name": "Returned if the metadata template specified\nwas not applied to this file.",
                              "originalRequest": {
                                "url": {
                                  "path": [
                                    "files",
                                    "<string>",
                                    "metadata",
                                    "<string>",
                                    "<string>"
                                  ],
                                  "host": [
                                    "{{baseUrl}}"
                                  ],
                                  "query": [],
                                  "variable": []
                                },
                                "method": "GET",
                                "body": {}
                              },
                              "status": "Not Found",
                              "code": 404,
                              "header": [
                                {
                                  "key": "Content-Type",
                                  "value": "application/json"
                                }
                              ],
                              "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
                              "cookie": [],
                              "_postman_previewlanguage": "json"
                            }
                          ],
                          "event": []
                        },
                        {
                          "id": "28421c0f-5c4d-408f-bb8f-80c15c8aadc0",
                          "name": "Create metadata on file",
                          "request": {
                            "name": "Create metadata on file",
                            "description": {
                              "content": "Creates a piece of metadata on a file based on the specified template.\n\nOnly values that are present in the metadata template\nwill be accepted.",
                              "type": "text/plain"
                            },
                            "url": {
                              "path": [
                                "files",
                                ":file_id",
                                "metadata",
                                ":scope",
                                ":template_key"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [],
                              "variable": [
                                {
                                  "description": {
                                    "content": "The ID of the file.",
                                    "type": "text/plain"
                                  },
                                  "type": "any",
                                  "value": "<string>",
                                  "key": "file_id"
                                },
                                {
                                  "description": {
                                    "content": "The scope of the metadata template",
                                    "type": "text/plain"
                                  },
                                  "type": "any",
                                  "value": "<string>",
                                  "key": "scope"
                                },
                                {
                                  "description": {
                                    "content": "The name of the metadata template",
                                    "type": "text/plain"
                                  },
                                  "type": "any",
                                  "value": "<string>",
                                  "key": "template_key"
                                }
                              ]
                            },
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              }
                            ],
                            "method": "POST",
                            "auth": {
                              "type": "oauth2"
                            },
                            "body": {
                              "mode": "raw",
                              "raw": "\"<object>\""
                            }
                          },
                          "response": [
                            {
                              "id": "a23cd700-af61-4f31-a041-139e7a9c7c97",
                              "name": "Returns an instance of the template that was specified, with the\ncustom template data included.",
                              "originalRequest": {
                                "url": {
                                  "path": [
                                    "files",
                                    "<string>",
                                    "metadata",
                                    "<string>",
                                    "<string>"
                                  ],
                                  "host": [
                                    "{{baseUrl}}"
                                  ],
                                  "query": [],
                                  "variable": []
                                },
                                "header": [
                                  {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                  }
                                ],
                                "method": "POST",
                                "body": {
                                  "mode": "raw",
                                  "raw": "\"<object>\""
                                }
                              },
                              "status": "OK",
                              "code": 200,
                              "header": [
                                {
                                  "key": "Content-Type",
                                  "value": "application/json"
                                }
                              ],
                              "body": "{\n \"$canEdit\": \"<boolean>\",\n \"$id\": \"<uuid>\",\n \"$parent\": \"<string>\",\n \"$scope\": \"<string>\",\n \"$template\": \"<string>\",\n \"$type\": \"<string>\",\n \"$typeVersion\": \"<integer>\",\n \"$version\": \"<integer>\"\n}",
                              "cookie": [],
                              "_postman_previewlanguage": "json"
                            },
                            {
                              "id": "b0d4c123-1609-4390-bda2-1f6dd6d04ce2",
                              "name": "If the piece of metadata already exists, a conflict error\nwill be returned. The metadata can then instead be updated with the\n`PUT` method.",
                              "originalRequest": {
                                "url": {
                                  "path": [
                                    "files",
                                    "<string>",
                                    "metadata",
                                    "<string>",
                                    "<string>"
                                  ],
                                  "host": [
                                    "{{baseUrl}}"
                                  ],
                                  "query": [],
                                  "variable": []
                                },
                                "header": [
                                  {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                  }
                                ],
                                "method": "POST",
                                "body": {
                                  "mode": "raw",
                                  "raw": "\"<object>\""
                                }
                              },
                              "status": "Conflict",
                              "code": 409,
                              "header": [
                                {
                                  "key": "Content-Type",
                                  "value": "application/json"
                                }
                              ],
                              "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
                              "cookie": [],
                              "_postman_previewlanguage": "json"
                            }
                          ],
                          "event": []
                        },
                        {
                          "id": "2b35eddc-ed9d-47bd-b1bc-fffefac31717",
                          "name": "Update file metadata",
                          "request": {
                            "name": "Update file metadata",
                            "description": {
                              "content": "Updates a piece of metadata on a file.\n\nThe metadata instance can only be updated if the instance\nalready exists. When editing metadata, only values that adhere to the\nmetadata template schema will be accepted.\n\nThe update is applied atomically. If any errors occur during the\napplication of the operations, the metadata instance remains unchanged.",
                              "type": "text/plain"
                            },
                            "url": {
                              "path": [
                                "files",
                                ":file_id",
                                "metadata",
                                ":scope",
                                ":template_key"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [],
                              "variable": [
                                {
                                  "description": {
                                    "content": "The ID of the file.",
                                    "type": "text/plain"
                                  },
                                  "type": "any",
                                  "value": "<string>",
                                  "key": "file_id"
                                },
                                {
                                  "description": {
                                    "content": "The scope of the metadata template",
                                    "type": "text/plain"
                                  },
                                  "type": "any",
                                  "value": "<string>",
                                  "key": "scope"
                                },
                                {
                                  "description": {
                                    "content": "The name of the metadata template",
                                    "type": "text/plain"
                                  },
                                  "type": "any",
                                  "value": "<string>",
                                  "key": "template_key"
                                }
                              ]
                            },
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              }
                            ],
                            "method": "PUT",
                            "auth": {
                              "type": "oauth2"
                            },
                            "body": {
                              "mode": "raw",
                              "raw": "[\n    {\n        \"op\": \"<string>\",\n        \"path\": \"<string>\",\n        \"value\": \"<string>\",\n        \"from\": \"<string>\"\n    },\n    {\n        \"op\": \"<string>\",\n        \"path\": \"<string>\",\n        \"value\": \"<string>\",\n        \"from\": \"<string>\"\n    }\n]"
                            }
                          },
                          "response": [
                            {
                              "id": "10b77455-bc9a-4a1c-acb9-9453db0f62f2",
                              "name": "Returns the updated metadata template instance, with the\ncustom template data included.",
                              "originalRequest": {
                                "url": {
                                  "path": [
                                    "files",
                                    "<string>",
                                    "metadata",
                                    "<string>",
                                    "<string>"
                                  ],
                                  "host": [
                                    "{{baseUrl}}"
                                  ],
                                  "query": [],
                                  "variable": []
                                },
                                "header": [
                                  {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                  }
                                ],
                                "method": "PUT",
                                "body": {
                                  "mode": "raw",
                                  "raw": "[\n    {\n        \"op\": \"<string>\",\n        \"path\": \"<string>\",\n        \"value\": \"<string>\",\n        \"from\": \"<string>\"\n    },\n    {\n        \"op\": \"<string>\",\n        \"path\": \"<string>\",\n        \"value\": \"<string>\",\n        \"from\": \"<string>\"\n    }\n]"
                                }
                              },
                              "status": "OK",
                              "code": 200,
                              "header": [
                                {
                                  "key": "Content-Type",
                                  "value": "application/json"
                                }
                              ],
                              "body": "{\n \"$canEdit\": \"<boolean>\",\n \"$id\": \"<uuid>\",\n \"$parent\": \"<string>\",\n \"$scope\": \"<string>\",\n \"$template\": \"<string>\",\n \"$type\": \"<string>\",\n \"$typeVersion\": \"<integer>\",\n \"$version\": \"<integer>\"\n}",
                              "cookie": [],
                              "_postman_previewlanguage": "json"
                            },
                            {
                              "id": "33477ff5-4140-4308-be15-15171c1217fb",
                              "name": "If the piece of metadata already exists, a conflict error\nwill be returned. The metadata can then instead be updated with the\n`PUT` method.",
                              "originalRequest": {
                                "url": {
                                  "path": [
                                    "files",
                                    "<string>",
                                    "metadata",
                                    "<string>",
                                    "<string>"
                                  ],
                                  "host": [
                                    "{{baseUrl}}"
                                  ],
                                  "query": [],
                                  "variable": []
                                },
                                "header": [
                                  {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                  }
                                ],
                                "method": "PUT",
                                "body": {
                                  "mode": "raw",
                                  "raw": "[\n    {\n        \"op\": \"<string>\",\n        \"path\": \"<string>\",\n        \"value\": \"<string>\",\n        \"from\": \"<string>\"\n    },\n    {\n        \"op\": \"<string>\",\n        \"path\": \"<string>\",\n        \"value\": \"<string>\",\n        \"from\": \"<string>\"\n    }\n]"
                                }
                              },
                              "status": "Conflict",
                              "code": 409,
                              "header": [
                                {
                                  "key": "Content-Type",
                                  "value": "application/json"
                                }
                              ],
                              "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
                              "cookie": [],
                              "_postman_previewlanguage": "json"
                            }
                          ],
                          "event": []
                        },
                        {
                          "id": "ded07e05-7de6-499d-9e52-b11f163d55db",
                          "name": "Delete file metadata",
                          "request": {
                            "name": "Delete file metadata",
                            "description": {
                              "content": "Deletes a piece of file metadata.",
                              "type": "text/plain"
                            },
                            "url": {
                              "path": [
                                "files",
                                ":file_id",
                                "metadata",
                                ":scope",
                                ":template_key"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [],
                              "variable": [
                                {
                                  "description": {
                                    "content": "The ID of the file.",
                                    "type": "text/plain"
                                  },
                                  "type": "any",
                                  "value": "<string>",
                                  "key": "file_id"
                                },
                                {
                                  "description": {
                                    "content": "The scope of the metadata template",
                                    "type": "text/plain"
                                  },
                                  "type": "any",
                                  "value": "<string>",
                                  "key": "scope"
                                },
                                {
                                  "description": {
                                    "content": "The name of the metadata template",
                                    "type": "text/plain"
                                  },
                                  "type": "any",
                                  "value": "<string>",
                                  "key": "template_key"
                                }
                              ]
                            },
                            "method": "DELETE",
                            "auth": {
                              "type": "oauth2"
                            }
                          },
                          "response": [
                            {
                              "id": "aeb06307-d99c-4675-92eb-1d06b0cbd3a9",
                              "name": "Returns an empty response when the metadata is\nsuccessfully deleted.",
                              "originalRequest": {
                                "url": {
                                  "path": [
                                    "files",
                                    "<string>",
                                    "metadata",
                                    "<string>",
                                    "<string>"
                                  ],
                                  "host": [
                                    "{{baseUrl}}"
                                  ],
                                  "query": [],
                                  "variable": []
                                },
                                "method": "DELETE",
                                "body": {}
                              },
                              "status": "No Content",
                              "code": 204,
                              "header": [
                                {
                                  "key": "Content-Type",
                                  "value": "text/plain"
                                }
                              ],
                              "body": "",
                              "cookie": [],
                              "_postman_previewlanguage": "text"
                            }
                          ],
                          "event": []
                        }
                      ],
                      "event": []
                    }
                  ],
                  "event": []
                }
              ],
              "event": []
            },
            {
              "id": "d66853ce-a9fc-45e0-90d6-4619b8b51b0e",
              "name": "watermark",
              "item": [
                {
                  "id": "4fd5c9d2-867f-4347-9682-60bb26d391b0",
                  "name": "Get file watermark",
                  "request": {
                    "name": "Get file watermark",
                    "description": {
                      "content": "Retrieve the watermark for a file.",
                      "type": "text/plain"
                    },
                    "url": {
                      "path": [
                        "files",
                        ":file_id",
                        "watermark"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "description": {
                            "content": "The ID of the file.",
                            "type": "text/plain"
                          },
                          "type": "any",
                          "value": "<string>",
                          "key": "file_id"
                        }
                      ]
                    },
                    "method": "GET",
                    "auth": {
                      "type": "oauth2"
                    }
                  },
                  "response": [
                    {
                      "id": "8e9acafb-b80a-4008-8c25-1ff60a42740e",
                      "name": "Returns an object containing information about the\nwatermark associated for to this file.",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "files",
                            "<string>",
                            "watermark"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": []
                        },
                        "method": "GET",
                        "body": {}
                      },
                      "status": "OK",
                      "code": 200,
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n \"watermark\": {\n  \"created_at\": \"<dateTime>\",\n  \"modified_at\": \"<dateTime>\"\n }\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    },
                    {
                      "id": "36c4906a-4644-45f8-8d26-bfb05711116c",
                      "name": "Returns an error if the file does not have a watermark applied.",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "files",
                            "<string>",
                            "watermark"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": []
                        },
                        "method": "GET",
                        "body": {}
                      },
                      "status": "Not Found",
                      "code": 404,
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    }
                  ],
                  "event": []
                },
                {
                  "id": "c535d264-938a-4abb-8e12-31eaab531f2f",
                  "name": "Apply watermark to file",
                  "request": {
                    "name": "Apply watermark to file",
                    "description": {
                      "content": "Applies or update a watermark on a file.",
                      "type": "text/plain"
                    },
                    "url": {
                      "path": [
                        "files",
                        ":file_id",
                        "watermark"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "description": {
                            "content": "The ID of the file.",
                            "type": "text/plain"
                          },
                          "type": "any",
                          "value": "<string>",
                          "key": "file_id"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "method": "PUT",
                    "auth": {
                      "type": "oauth2"
                    },
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"watermark\": {\n        \"imprint\": \"<string>\"\n    }\n}"
                    }
                  },
                  "response": [
                    {
                      "id": "16dce9ca-25d9-42e1-ae84-1d28decd255f",
                      "name": "Returns an updated watermark if a watermark already\nexisted on this file.",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "files",
                            "<string>",
                            "watermark"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": []
                        },
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "method": "PUT",
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"watermark\": {\n        \"imprint\": \"<string>\"\n    }\n}"
                        }
                      },
                      "status": "OK",
                      "code": 200,
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n \"watermark\": {\n  \"created_at\": \"<dateTime>\",\n  \"modified_at\": \"<dateTime>\"\n }\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    },
                    {
                      "id": "f30e2905-164b-4f27-890d-d2f285f4ab28",
                      "name": "Returns a new watermark if no watermark existed on\nthis file yet.",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "files",
                            "<string>",
                            "watermark"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": []
                        },
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "method": "PUT",
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"watermark\": {\n        \"imprint\": \"<string>\"\n    }\n}"
                        }
                      },
                      "status": "Created",
                      "code": 201,
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n \"watermark\": {\n  \"created_at\": \"<dateTime>\",\n  \"modified_at\": \"<dateTime>\"\n }\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    }
                  ],
                  "event": []
                },
                {
                  "id": "37a8420c-9ef9-47f8-8a55-a29d6b3bc4a3",
                  "name": "Remove file watermark",
                  "request": {
                    "name": "Remove file watermark",
                    "description": {
                      "content": "Removes the watermark from a file.",
                      "type": "text/plain"
                    },
                    "url": {
                      "path": [
                        "files",
                        ":file_id",
                        "watermark"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "description": {
                            "content": "The ID of the file.",
                            "type": "text/plain"
                          },
                          "type": "any",
                          "value": "<string>",
                          "key": "file_id"
                        }
                      ]
                    },
                    "method": "DELETE",
                    "auth": {
                      "type": "oauth2"
                    }
                  },
                  "response": [
                    {
                      "id": "02532c6d-2105-4fc8-bcb8-3a80dc157760",
                      "name": "An empty response will be returned when the watermark\nwas successfully deleted.",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "files",
                            "<string>",
                            "watermark"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": []
                        },
                        "method": "DELETE",
                        "body": {}
                      },
                      "status": "No Content",
                      "code": 204,
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "text/plain"
                        }
                      ],
                      "body": "",
                      "cookie": [],
                      "_postman_previewlanguage": "text"
                    },
                    {
                      "id": "80d8436d-137f-4296-8dfa-f151f56e4181",
                      "name": "Returns an error if the file did not have\na watermark applied to it",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "files",
                            "<string>",
                            "watermark"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": []
                        },
                        "method": "DELETE",
                        "body": {}
                      },
                      "status": "Not Found",
                      "code": 404,
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    }
                  ],
                  "event": []
                }
              ],
              "event": []
            }
          ],
          "event": []
        },
        {
          "id": "b1db727a-9be4-4752-8082-4a9949ba1bfd",
          "name": "content",
          "item": [
            {
              "id": "b02826c4-57e9-4dd9-9037-45ef5dba8fc9",
              "name": "Preflight check",
              "request": {
                "name": "Preflight check",
                "description": {
                  "content": "Performs a check to verify that a file will be accepted by Box\nbefore you upload the entire file.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "files",
                    "content"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "OPTIONS",
                "auth": {
                  "type": "oauth2"
                },
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"<string>\",\n    \"size\": \"<integer>\",\n    \"parent\": {\n        \"id\": \"<string>\"\n    }\n}"
                }
              },
              "response": [
                {
                  "id": "dcb089df-d14b-41b1-b8c1-dd36b849c005",
                  "name": "If the check passed, the response will include a session URL that\ncan be used to upload the file to.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "files",
                        "content"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "method": "OPTIONS",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"name\": \"<string>\",\n    \"size\": \"<integer>\",\n    \"parent\": {\n        \"id\": \"<string>\"\n    }\n}"
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n \"upload_url\": \"<string>\",\n \"upload_token\": \"<string>\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "e9589a6c-89a2-43ef-8acf-d1ea4a080b1a",
                  "name": "If the check did not pass, the response will include some details on\nwhy it did not pass.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "files",
                        "content"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "method": "OPTIONS",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"name\": \"<string>\",\n    \"size\": \"<integer>\",\n    \"parent\": {\n        \"id\": \"<string>\"\n    }\n}"
                    }
                  },
                  "status": "Conflict",
                  "code": 409,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\",\n \"context_info\": {\n  \"conflicts\": {\n   \"id\": \"schema type not provided\",\n   \"type\": \"<string>\",\n   \"sequence_id\": \"<string>\",\n   \"etag\": \"<string>\",\n   \"name\": \"<string>\",\n   \"sha1\": \"<string>\",\n   \"file_version\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"sha1\": \"<string>\"\n   }\n  }\n }\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": []
            },
            {
              "id": "da4ede30-4cef-4714-a9cc-3395db23223d",
              "name": "Upload a file",
              "request": {
                "name": "Upload a file",
                "description": {
                  "content": "Uploads a small file to Box. For file sizes over 50MB we recommend\nusing the Chunk Upload APIs.",
                  "type": "text/plain"
                },
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "2.0",
                    "files",
                    "content"
                  ],
                  "host": [
                    "upload",
                    "box",
                    "com"
                  ],
                  "query": [
                    {
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response, unless explicitly specified.",
                      "key": "fields",
                      "value": "<string>,<string>"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-MD5",
                    "value": "<string>",
                    "description": "An optional header containing the SHA-1 hash of the file to\nensure that the file was not corrupted in transit."
                  },
                  {
                    "key": "Content-Type",
                    "value": "multipart/form-data"
                  }
                ],
                "method": "POST",
                "auth": {
                  "type": "oauth2"
                },
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "attributes",
                      "value": "{\"name\":\"<string>\",\"parent\":{\"id\":\"<string>\"},\"content_created_at\":\"<dateTime>\",\"content_modified_at\":\"<dateTime>\"}"
                    },
                    {
                      "key": "file",
                      "value": "<binary>"
                    }
                  ]
                }
              },
              "response": [
                {
                  "id": "6b654dda-c57e-436d-88b7-c52c1c4d6a04",
                  "name": "Returns the new file object in a list.",
                  "originalRequest": {
                    "url": {
                      "protocol": "https",
                      "path": [
                        "api",
                        "2.0",
                        "files",
                        "content"
                      ],
                      "host": [
                        "upload",
                        "box",
                        "com"
                      ],
                      "query": [
                        {
                          "key": "fields",
                          "value": "<string>,<string>"
                        }
                      ],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "An optional header containing the SHA-1 hash of the file to\nensure that the file was not corrupted in transit.",
                          "type": "text/plain"
                        },
                        "key": "Content-MD5",
                        "value": "<string>"
                      },
                      {
                        "key": "Content-Type",
                        "value": "multipart/form-data"
                      }
                    ],
                    "method": "POST",
                    "body": {
                      "mode": "formdata",
                      "formdata": [
                        {
                          "key": "attributes",
                          "value": "{\"name\":\"<string>\",\"parent\":{\"id\":\"<string>\"},\"content_created_at\":\"<dateTime>\",\"content_modified_at\":\"<dateTime>\"}"
                        },
                        {
                          "key": "file",
                          "value": "<binary>"
                        }
                      ]
                    }
                  },
                  "status": "Created",
                  "code": 201,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n \"total_count\": \"<long>\",\n \"entries\": [\n  {\n   \"id\": \"<string>\",\n   \"type\": \"<string>\",\n   \"sequence_id\": \"<string>\",\n   \"etag\": \"<string>\",\n   \"name\": \"<string>\",\n   \"sha1\": \"<digest>\",\n   \"description\": \"<string>\",\n   \"size\": \"<integer>\",\n   \"path_collection\": [\n    {\n     \"id\": \"<string>\",\n     \"type\": \"<string>\",\n     \"sequence_id\": \"<string>\",\n     \"etag\": \"<string>\",\n     \"name\": \"<string>\"\n    },\n    {\n     \"id\": \"<string>\",\n     \"type\": \"<string>\",\n     \"sequence_id\": \"<string>\",\n     \"etag\": \"<string>\",\n     \"name\": \"<string>\"\n    }\n   ],\n   \"created_at\": \"<dateTime>\",\n   \"modified_at\": \"<dateTime>\",\n   \"trashed_at\": \"<dateTime>\",\n   \"purged_at\": \"<dateTime>\",\n   \"content_created_at\": \"<dateTime>\",\n   \"content_modified_at\": \"<dateTime>\",\n   \"expires_at\": \"<dateTime>\",\n   \"created_by\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"modified_by\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"owned_by\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"shared_link\": {\n    \"url\": \"<url>\",\n    \"download_url\": \"<url>\",\n    \"vanity_url\": \"<url>\",\n    \"access\": \"<string>\",\n    \"effective_access\": \"<string>\",\n    \"effective_permission\": \"<string>\",\n    \"unshared_at\": \"<dateTime>\",\n    \"is_password_enabled\": \"<boolean>\",\n    \"permissions\": {\n     \"can_download\": \"<boolean>\",\n     \"can_preview\": \"<boolean>\"\n    },\n    \"download_count\": \"<integer>\",\n    \"preview_count\": \"<integer>\"\n   },\n   \"parent\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\"\n   },\n   \"item_status\": \"<string>\",\n   \"version_number\": \"<string>\",\n   \"comment_count\": \"<integer>\",\n   \"permissions\": {\n    \"can_delete\": \"<boolean>\",\n    \"can_download\": \"<boolean>\",\n    \"can_invite_collaborator\": \"<boolean>\",\n    \"can_rename\": \"<boolean>\",\n    \"can_set_share_access\": \"<boolean>\",\n    \"can_share\": \"<boolean>\",\n    \"can_annotate\": \"<boolean>\",\n    \"can_comment\": \"<boolean>\",\n    \"can_preview\": \"<boolean>\",\n    \"can_upload\": \"<boolean>\",\n    \"can_view_annotations_all\": \"<boolean>\",\n    \"can_view_annotations_self\": \"<boolean>\"\n   },\n   \"tags\": [\n    \"<string>\",\n    \"<string>\"\n   ],\n   \"lock\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\",\n    \"created_by\": {\n     \"id\": \"<string>\",\n     \"type\": \"<string>\",\n     \"name\": \"<string>\",\n     \"login\": \"<email>\"\n    },\n    \"created_at\": \"<dateTime>\",\n    \"expired_at\": \"<dateTime>\",\n    \"is_download_prevented\": \"<boolean>\"\n   },\n   \"extension\": \"<string>\",\n   \"is_package\": \"<boolean>\",\n   \"expiring_embed_link\": \"<string>\",\n   \"watermark_info\": {\n    \"is_watermarked\": \"<boolean>\"\n   },\n   \"allowed_invitee_roles\": \"company\",\n   \"is_externally_owned\": \"<boolean>\",\n   \"has_collaborations\": \"<boolean>\",\n   \"metadata\": \"<object>\"\n  },\n  {\n   \"id\": \"<string>\",\n   \"type\": \"<string>\",\n   \"sequence_id\": \"<string>\",\n   \"etag\": \"<string>\",\n   \"name\": \"<string>\",\n   \"sha1\": \"<digest>\",\n   \"description\": \"<string>\",\n   \"size\": \"<integer>\",\n   \"path_collection\": [\n    {\n     \"id\": \"<string>\",\n     \"type\": \"<string>\",\n     \"sequence_id\": \"<string>\",\n     \"etag\": \"<string>\",\n     \"name\": \"<string>\"\n    },\n    {\n     \"id\": \"<string>\",\n     \"type\": \"<string>\",\n     \"sequence_id\": \"<string>\",\n     \"etag\": \"<string>\",\n     \"name\": \"<string>\"\n    }\n   ],\n   \"created_at\": \"<dateTime>\",\n   \"modified_at\": \"<dateTime>\",\n   \"trashed_at\": \"<dateTime>\",\n   \"purged_at\": \"<dateTime>\",\n   \"content_created_at\": \"<dateTime>\",\n   \"content_modified_at\": \"<dateTime>\",\n   \"expires_at\": \"<dateTime>\",\n   \"created_by\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"modified_by\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"owned_by\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"shared_link\": {\n    \"url\": \"<url>\",\n    \"download_url\": \"<url>\",\n    \"vanity_url\": \"<url>\",\n    \"access\": \"<string>\",\n    \"effective_access\": \"<string>\",\n    \"effective_permission\": \"<string>\",\n    \"unshared_at\": \"<dateTime>\",\n    \"is_password_enabled\": \"<boolean>\",\n    \"permissions\": {\n     \"can_download\": \"<boolean>\",\n     \"can_preview\": \"<boolean>\"\n    },\n    \"download_count\": \"<integer>\",\n    \"preview_count\": \"<integer>\"\n   },\n   \"parent\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\"\n   },\n   \"item_status\": \"<string>\",\n   \"version_number\": \"<string>\",\n   \"comment_count\": \"<integer>\",\n   \"permissions\": {\n    \"can_delete\": \"<boolean>\",\n    \"can_download\": \"<boolean>\",\n    \"can_invite_collaborator\": \"<boolean>\",\n    \"can_rename\": \"<boolean>\",\n    \"can_set_share_access\": \"<boolean>\",\n    \"can_share\": \"<boolean>\",\n    \"can_annotate\": \"<boolean>\",\n    \"can_comment\": \"<boolean>\",\n    \"can_preview\": \"<boolean>\",\n    \"can_upload\": \"<boolean>\",\n    \"can_view_annotations_all\": \"<boolean>\",\n    \"can_view_annotations_self\": \"<boolean>\"\n   },\n   \"tags\": [\n    \"<string>\",\n    \"<string>\"\n   ],\n   \"lock\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\",\n    \"created_by\": {\n     \"id\": \"<string>\",\n     \"type\": \"<string>\",\n     \"name\": \"<string>\",\n     \"login\": \"<email>\"\n    },\n    \"created_at\": \"<dateTime>\",\n    \"expired_at\": \"<dateTime>\",\n    \"is_download_prevented\": \"<boolean>\"\n   },\n   \"extension\": \"<string>\",\n   \"is_package\": \"<boolean>\",\n   \"expiring_embed_link\": \"<string>\",\n   \"watermark_info\": {\n    \"is_watermarked\": \"<boolean>\"\n   },\n   \"allowed_invitee_roles\": \"collaborators\",\n   \"is_externally_owned\": \"<boolean>\",\n   \"has_collaborations\": \"<boolean>\",\n   \"metadata\": \"<object>\"\n  }\n ]\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "e4dc4766-9e77-4b00-b046-897c66627d07",
                  "name": "Returns an error if the file already exists,\nor the account has run out of disk space.",
                  "originalRequest": {
                    "url": {
                      "protocol": "https",
                      "path": [
                        "api",
                        "2.0",
                        "files",
                        "content"
                      ],
                      "host": [
                        "upload",
                        "box",
                        "com"
                      ],
                      "query": [
                        {
                          "key": "fields",
                          "value": "<string>,<string>"
                        }
                      ],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "An optional header containing the SHA-1 hash of the file to\nensure that the file was not corrupted in transit.",
                          "type": "text/plain"
                        },
                        "key": "Content-MD5",
                        "value": "<string>"
                      },
                      {
                        "key": "Content-Type",
                        "value": "multipart/form-data"
                      }
                    ],
                    "method": "POST",
                    "body": {
                      "mode": "formdata",
                      "formdata": [
                        {
                          "key": "attributes",
                          "value": "{\"name\":\"<string>\",\"parent\":{\"id\":\"<string>\"},\"content_created_at\":\"<dateTime>\",\"content_modified_at\":\"<dateTime>\"}"
                        },
                        {
                          "key": "file",
                          "value": "<binary>"
                        }
                      ]
                    }
                  },
                  "status": "Conflict",
                  "code": 409,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": []
            }
          ],
          "event": []
        },
        {
          "id": "de9d5ab3-742c-4537-a907-728b86e2f83b",
          "name": "upload sessions",
          "item": [
            {
              "id": "961c5682-9735-4648-9783-6086f95439bb",
              "name": "Create upload session",
              "request": {
                "name": "Create upload session",
                "description": {
                  "content": "Creates an upload session for a new file.",
                  "type": "text/plain"
                },
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "2.0",
                    "files",
                    "upload_sessions"
                  ],
                  "host": [
                    "upload",
                    "box",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "auth": {
                  "type": "oauth2"
                },
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"folder_id\": \"<string>\",\n    \"file_size\": \"<long>\",\n    \"file_name\": \"<string>\"\n}"
                }
              },
              "response": [
                {
                  "id": "2cd50f36-2763-4aab-8746-450e7ec33ab5",
                  "name": "Returns a new upload session.",
                  "originalRequest": {
                    "url": {
                      "protocol": "https",
                      "path": [
                        "api",
                        "2.0",
                        "files",
                        "upload_sessions"
                      ],
                      "host": [
                        "upload",
                        "box",
                        "com"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "method": "POST",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"folder_id\": \"<string>\",\n    \"file_size\": \"<long>\",\n    \"file_name\": \"<string>\"\n}"
                    }
                  },
                  "status": "Created",
                  "code": 201,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"session_expires_at\": \"<dateTime>\",\n \"part_size\": \"<long>\",\n \"total_parts\": \"<integer>\",\n \"num_parts_processed\": \"<integer>\",\n \"session_endpoints\": {\n  \"upload_part\": \"<string>\",\n  \"commit\": \"<string>\",\n  \"abort\": \"<string>\",\n  \"list_parts\": \"<string>\",\n  \"status\": \"<string>\",\n  \"log_event\": \"<string>\"\n }\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "819b4692-ba02-40d1-ad90-fe616fa60104",
                  "name": "Returns an error if the file already exists,\nor the account has run out of disk space.",
                  "originalRequest": {
                    "url": {
                      "protocol": "https",
                      "path": [
                        "api",
                        "2.0",
                        "files",
                        "upload_sessions"
                      ],
                      "host": [
                        "upload",
                        "box",
                        "com"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "method": "POST",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"folder_id\": \"<string>\",\n    \"file_size\": \"<long>\",\n    \"file_name\": \"<string>\"\n}"
                    }
                  },
                  "status": "Conflict",
                  "code": 409,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": []
            },
            {
              "id": "c62bffab-6416-4ae5-8cf4-9a46212200c3",
              "name": "{upload session id}",
              "item": [
                {
                  "id": "47d44031-83b9-4b60-a841-0447a51b3e30",
                  "name": "Get upload session",
                  "request": {
                    "name": "Get upload session",
                    "description": {
                      "content": "Return information about an upload session.",
                      "type": "text/plain"
                    },
                    "url": {
                      "protocol": "https",
                      "path": [
                        "api",
                        "2.0",
                        "files",
                        "upload_sessions",
                        ":upload_session_id"
                      ],
                      "host": [
                        "upload",
                        "box",
                        "com"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "description": {
                            "content": "The ID of the upload session.",
                            "type": "text/plain"
                          },
                          "type": "any",
                          "value": "<string>",
                          "key": "upload_session_id"
                        }
                      ]
                    },
                    "method": "GET",
                    "auth": {
                      "type": "oauth2"
                    }
                  },
                  "response": [
                    {
                      "id": "633df077-6de9-449c-a411-7690c1f1feb9",
                      "name": "Returns an upload session object.",
                      "originalRequest": {
                        "url": {
                          "protocol": "https",
                          "path": [
                            "api",
                            "2.0",
                            "files",
                            "upload_sessions",
                            "<string>"
                          ],
                          "host": [
                            "upload",
                            "box",
                            "com"
                          ],
                          "query": [],
                          "variable": []
                        },
                        "method": "GET",
                        "body": {}
                      },
                      "status": "OK",
                      "code": 200,
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"session_expires_at\": \"<dateTime>\",\n \"part_size\": \"<long>\",\n \"total_parts\": \"<integer>\",\n \"num_parts_processed\": \"<integer>\",\n \"session_endpoints\": {\n  \"upload_part\": \"<string>\",\n  \"commit\": \"<string>\",\n  \"abort\": \"<string>\",\n  \"list_parts\": \"<string>\",\n  \"status\": \"<string>\",\n  \"log_event\": \"<string>\"\n }\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    }
                  ],
                  "event": []
                },
                {
                  "id": "cd8d3b99-5ecf-4697-b397-ed2c81649a77",
                  "name": "Upload a part",
                  "request": {
                    "name": "Upload a part",
                    "description": {
                      "content": "Updates a chunk of an upload session for a file.",
                      "type": "text/plain"
                    },
                    "url": {
                      "protocol": "https",
                      "path": [
                        "api",
                        "2.0",
                        "files",
                        "upload_sessions",
                        ":upload_session_id"
                      ],
                      "host": [
                        "upload",
                        "box",
                        "com"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "description": {
                            "content": "The ID of the upload session.",
                            "type": "text/plain"
                          },
                          "type": "any",
                          "value": "<string>",
                          "key": "upload_session_id"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Digest",
                        "value": "<string>",
                        "description": "The [RFC3230][1] message digest of the chunk uploaded.\n\nOnly SHA-1 is supported. The SHA-1 digest must be Base64\nencoded. The format of this header is as\n`sha=BASE64_ENCODED_DIGEST`.\n\n[1]: https://tools.ietf.org/html/rfc3230"
                      },
                      {
                        "key": "Content-Range",
                        "value": "<string>",
                        "description": "The byte range of the chunk.\n\nMust not overlap with the range of a part already\nuploaded this session."
                      },
                      {
                        "key": "Content-Type",
                        "value": "application/octet-stream"
                      }
                    ],
                    "method": "PUT",
                    "auth": {
                      "type": "oauth2"
                    },
                    "body": {
                      "mode": "raw",
                      "raw": "\"<binary>\""
                    }
                  },
                  "response": [
                    {
                      "id": "b7a11a2e-02b1-4575-b979-7bdf848ea74c",
                      "name": "Chunk has been uploaded successfully.",
                      "originalRequest": {
                        "url": {
                          "protocol": "https",
                          "path": [
                            "api",
                            "2.0",
                            "files",
                            "upload_sessions",
                            "<string>"
                          ],
                          "host": [
                            "upload",
                            "box",
                            "com"
                          ],
                          "query": [],
                          "variable": []
                        },
                        "header": [
                          {
                            "description": {
                              "content": "The [RFC3230][1] message digest of the chunk uploaded.\n\nOnly SHA-1 is supported. The SHA-1 digest must be Base64\nencoded. The format of this header is as\n`sha=BASE64_ENCODED_DIGEST`.\n\n[1]: https://tools.ietf.org/html/rfc3230",
                              "type": "text/plain"
                            },
                            "key": "Digest",
                            "value": "<string>"
                          },
                          {
                            "description": {
                              "content": "The byte range of the chunk.\n\nMust not overlap with the range of a part already\nuploaded this session.",
                              "type": "text/plain"
                            },
                            "key": "Content-Range",
                            "value": "<string>"
                          },
                          {
                            "key": "Content-Type",
                            "value": "application/octet-stream"
                          }
                        ],
                        "method": "PUT",
                        "body": {
                          "mode": "raw",
                          "raw": "\"<binary>\""
                        }
                      },
                      "status": "OK",
                      "code": 200,
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n \"part_id\": \"<string>\",\n \"offset\": \"<long>\",\n \"size\": \"<long>\",\n \"sha1\": \"<string>\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    },
                    {
                      "id": "c6831d5c-01e2-482d-aa6e-5c89ac9f6835",
                      "name": "Returns an error if the chunk conflicts with another\nchunk previously uploaded.",
                      "originalRequest": {
                        "url": {
                          "protocol": "https",
                          "path": [
                            "api",
                            "2.0",
                            "files",
                            "upload_sessions",
                            "<string>"
                          ],
                          "host": [
                            "upload",
                            "box",
                            "com"
                          ],
                          "query": [],
                          "variable": []
                        },
                        "header": [
                          {
                            "description": {
                              "content": "The [RFC3230][1] message digest of the chunk uploaded.\n\nOnly SHA-1 is supported. The SHA-1 digest must be Base64\nencoded. The format of this header is as\n`sha=BASE64_ENCODED_DIGEST`.\n\n[1]: https://tools.ietf.org/html/rfc3230",
                              "type": "text/plain"
                            },
                            "key": "Digest",
                            "value": "<string>"
                          },
                          {
                            "description": {
                              "content": "The byte range of the chunk.\n\nMust not overlap with the range of a part already\nuploaded this session.",
                              "type": "text/plain"
                            },
                            "key": "Content-Range",
                            "value": "<string>"
                          },
                          {
                            "key": "Content-Type",
                            "value": "application/octet-stream"
                          }
                        ],
                        "method": "PUT",
                        "body": {
                          "mode": "raw",
                          "raw": "\"<binary>\""
                        }
                      },
                      "status": "Conflict",
                      "code": 409,
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    },
                    {
                      "id": "22946849-2071-4a33-a275-ae7f569cabf3",
                      "name": "Returns an error if a precondition failed.",
                      "originalRequest": {
                        "url": {
                          "protocol": "https",
                          "path": [
                            "api",
                            "2.0",
                            "files",
                            "upload_sessions",
                            "<string>"
                          ],
                          "host": [
                            "upload",
                            "box",
                            "com"
                          ],
                          "query": [],
                          "variable": []
                        },
                        "header": [
                          {
                            "description": {
                              "content": "The [RFC3230][1] message digest of the chunk uploaded.\n\nOnly SHA-1 is supported. The SHA-1 digest must be Base64\nencoded. The format of this header is as\n`sha=BASE64_ENCODED_DIGEST`.\n\n[1]: https://tools.ietf.org/html/rfc3230",
                              "type": "text/plain"
                            },
                            "key": "Digest",
                            "value": "<string>"
                          },
                          {
                            "description": {
                              "content": "The byte range of the chunk.\n\nMust not overlap with the range of a part already\nuploaded this session.",
                              "type": "text/plain"
                            },
                            "key": "Content-Range",
                            "value": "<string>"
                          },
                          {
                            "key": "Content-Type",
                            "value": "application/octet-stream"
                          }
                        ],
                        "method": "PUT",
                        "body": {
                          "mode": "raw",
                          "raw": "\"<binary>\""
                        }
                      },
                      "status": "Precondition Failed",
                      "code": 412,
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    },
                    {
                      "id": "a11fdd5e-2897-4b79-ab1a-2bd1cc4904dd",
                      "name": "Returns an error if the content range does not match a specified range\nfor the session.",
                      "originalRequest": {
                        "url": {
                          "protocol": "https",
                          "path": [
                            "api",
                            "2.0",
                            "files",
                            "upload_sessions",
                            "<string>"
                          ],
                          "host": [
                            "upload",
                            "box",
                            "com"
                          ],
                          "query": [],
                          "variable": []
                        },
                        "header": [
                          {
                            "description": {
                              "content": "The [RFC3230][1] message digest of the chunk uploaded.\n\nOnly SHA-1 is supported. The SHA-1 digest must be Base64\nencoded. The format of this header is as\n`sha=BASE64_ENCODED_DIGEST`.\n\n[1]: https://tools.ietf.org/html/rfc3230",
                              "type": "text/plain"
                            },
                            "key": "Digest",
                            "value": "<string>"
                          },
                          {
                            "description": {
                              "content": "The byte range of the chunk.\n\nMust not overlap with the range of a part already\nuploaded this session.",
                              "type": "text/plain"
                            },
                            "key": "Content-Range",
                            "value": "<string>"
                          },
                          {
                            "key": "Content-Type",
                            "value": "application/octet-stream"
                          }
                        ],
                        "method": "PUT",
                        "body": {
                          "mode": "raw",
                          "raw": "\"<binary>\""
                        }
                      },
                      "status": "Requested Range Not Satisfiable",
                      "code": 416,
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    }
                  ],
                  "event": []
                },
                {
                  "id": "9b1d515e-7c53-4662-9560-cba1013416a8",
                  "name": "Abort upload session",
                  "request": {
                    "name": "Abort upload session",
                    "description": {
                      "content": "Abort an upload session and discard all data uploaded.\n\nThis cannot be reversed.",
                      "type": "text/plain"
                    },
                    "url": {
                      "protocol": "https",
                      "path": [
                        "api",
                        "2.0",
                        "files",
                        "upload_sessions",
                        ":upload_session_id"
                      ],
                      "host": [
                        "upload",
                        "box",
                        "com"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "description": {
                            "content": "The ID of the upload session.",
                            "type": "text/plain"
                          },
                          "type": "any",
                          "value": "<string>",
                          "key": "upload_session_id"
                        }
                      ]
                    },
                    "method": "DELETE",
                    "auth": {
                      "type": "oauth2"
                    }
                  },
                  "response": [
                    {
                      "id": "d1ac5774-e97b-4dbf-a29e-0829d29769e2",
                      "name": "A blank response is returned if the session was\nsuccessfully aborted.",
                      "originalRequest": {
                        "url": {
                          "protocol": "https",
                          "path": [
                            "api",
                            "2.0",
                            "files",
                            "upload_sessions",
                            "<string>"
                          ],
                          "host": [
                            "upload",
                            "box",
                            "com"
                          ],
                          "query": [],
                          "variable": []
                        },
                        "method": "DELETE",
                        "body": {}
                      },
                      "status": "No Content",
                      "code": 204,
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "text/plain"
                        }
                      ],
                      "body": "",
                      "cookie": [],
                      "_postman_previewlanguage": "text"
                    }
                  ],
                  "event": []
                },
                {
                  "id": "35f964a7-1872-4c3f-a94f-00bcc5c03302",
                  "name": "List parts",
                  "request": {
                    "name": "List parts",
                    "description": {
                      "content": "Return a list of the chunks uploaded to the upload\nsession so far.",
                      "type": "text/plain"
                    },
                    "url": {
                      "protocol": "https",
                      "path": [
                        "api",
                        "2.0",
                        "files",
                        "upload_sessions",
                        ":upload_session_id",
                        "parts"
                      ],
                      "host": [
                        "upload",
                        "box",
                        "com"
                      ],
                      "query": [
                        {
                          "description": "The offset of the item at which to begin the response.",
                          "key": "offset",
                          "value": "<long>"
                        },
                        {
                          "description": "The maximum number of items to return per page.",
                          "key": "limit",
                          "value": "100"
                        }
                      ],
                      "variable": [
                        {
                          "description": {
                            "content": "The ID of the upload session.",
                            "type": "text/plain"
                          },
                          "type": "any",
                          "value": "<string>",
                          "key": "upload_session_id"
                        }
                      ]
                    },
                    "method": "GET",
                    "auth": {
                      "type": "oauth2"
                    }
                  },
                  "response": [
                    {
                      "id": "a618443b-243d-4a5d-bcde-d3e33a5f0edc",
                      "name": "Returns a list of parts that have been uploaded.",
                      "originalRequest": {
                        "url": {
                          "protocol": "https",
                          "path": [
                            "api",
                            "2.0",
                            "files",
                            "upload_sessions",
                            "<string>",
                            "parts"
                          ],
                          "host": [
                            "upload",
                            "box",
                            "com"
                          ],
                          "query": [
                            {
                              "key": "offset",
                              "value": "<long>"
                            },
                            {
                              "key": "limit",
                              "value": "100"
                            }
                          ],
                          "variable": []
                        },
                        "method": "GET",
                        "body": {}
                      },
                      "status": "OK",
                      "code": 200,
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n \"total_count\": \"<long>\",\n \"limit\": \"<long>\",\n \"offset\": \"<long>\",\n \"order\": [\n  {\n   \"by\": \"<string>\",\n   \"direction\": \"<string>\"\n  },\n  {\n   \"by\": \"<string>\",\n   \"direction\": \"<string>\"\n  }\n ],\n \"entries\": [\n  {\n   \"part_id\": \"<string>\",\n   \"offset\": \"<long>\",\n   \"size\": \"<long>\",\n   \"sha1\": \"<string>\"\n  },\n  {\n   \"part_id\": \"<string>\",\n   \"offset\": \"<long>\",\n   \"size\": \"<long>\",\n   \"sha1\": \"<string>\"\n  }\n ]\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    }
                  ],
                  "event": []
                },
                {
                  "id": "dd23caee-1038-40b8-b4aa-6408fc64cb85",
                  "name": "Commit upload session",
                  "request": {
                    "name": "Commit upload session",
                    "description": {
                      "content": "Close an upload session and create a file from the\nuploaded chunks.",
                      "type": "text/plain"
                    },
                    "url": {
                      "protocol": "https",
                      "path": [
                        "api",
                        "2.0",
                        "files",
                        "upload_sessions",
                        ":upload_session_id",
                        "commit"
                      ],
                      "host": [
                        "upload",
                        "box",
                        "com"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "description": {
                            "content": "The ID of the upload session.",
                            "type": "text/plain"
                          },
                          "type": "any",
                          "value": "<string>",
                          "key": "upload_session_id"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Digest",
                        "value": "<string>",
                        "description": "The [RFC3230][1] message digest of the whole file.\n\nOnly SHA-1 is supported. The SHA-1 digest must be Base64\nencoded. The format of this header is as\n`sha=BASE64_ENCODED_DIGEST`.\n\n[1]: https://tools.ietf.org/html/rfc3230"
                      },
                      {
                        "key": "If-Match",
                        "value": "<string>",
                        "description": "Ensure this item hasn't recently changed\nby ensuring the item's current `etag` matches the\n`etag` passed into this header."
                      },
                      {
                        "key": "If-None-Match",
                        "value": "<string>",
                        "description": "Ensures the changes are only applied if the\nitem's `etag` does not match the provided\n`etag`, ensuring that the item is only updated\nif the content has changed."
                      },
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "method": "POST",
                    "auth": {
                      "type": "oauth2"
                    },
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"parts\": [\n        {\n            \"part_id\": \"<string>\",\n            \"offset\": \"<long>\",\n            \"size\": \"<long>\"\n        },\n        {\n            \"part_id\": \"<string>\",\n            \"offset\": \"<long>\",\n            \"size\": \"<long>\"\n        }\n    ]\n}"
                    }
                  },
                  "response": [
                    {
                      "id": "46337ad2-9b8c-417f-9d02-5f1bd9e81e84",
                      "name": "Returns the file object in a list.",
                      "originalRequest": {
                        "url": {
                          "protocol": "https",
                          "path": [
                            "api",
                            "2.0",
                            "files",
                            "upload_sessions",
                            "<string>",
                            "commit"
                          ],
                          "host": [
                            "upload",
                            "box",
                            "com"
                          ],
                          "query": [],
                          "variable": []
                        },
                        "header": [
                          {
                            "description": {
                              "content": "The [RFC3230][1] message digest of the whole file.\n\nOnly SHA-1 is supported. The SHA-1 digest must be Base64\nencoded. The format of this header is as\n`sha=BASE64_ENCODED_DIGEST`.\n\n[1]: https://tools.ietf.org/html/rfc3230",
                              "type": "text/plain"
                            },
                            "key": "Digest",
                            "value": "<string>"
                          },
                          {
                            "description": {
                              "content": "Ensure this item hasn't recently changed\nby ensuring the item's current `etag` matches the\n`etag` passed into this header.",
                              "type": "text/plain"
                            },
                            "key": "If-Match",
                            "value": "<string>"
                          },
                          {
                            "description": {
                              "content": "Ensures the changes are only applied if the\nitem's `etag` does not match the provided\n`etag`, ensuring that the item is only updated\nif the content has changed.",
                              "type": "text/plain"
                            },
                            "key": "If-None-Match",
                            "value": "<string>"
                          },
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "method": "POST",
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"parts\": [\n        {\n            \"part_id\": \"<string>\",\n            \"offset\": \"<long>\",\n            \"size\": \"<long>\"\n        },\n        {\n            \"part_id\": \"<string>\",\n            \"offset\": \"<long>\",\n            \"size\": \"<long>\"\n        }\n    ]\n}"
                        }
                      },
                      "status": "Created",
                      "code": 201,
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n \"total_count\": \"<long>\",\n \"entries\": [\n  {\n   \"id\": \"<string>\",\n   \"type\": \"<string>\",\n   \"sequence_id\": \"<string>\",\n   \"etag\": \"<string>\",\n   \"name\": \"<string>\",\n   \"sha1\": \"<digest>\",\n   \"description\": \"<string>\",\n   \"size\": \"<integer>\",\n   \"path_collection\": [\n    {\n     \"id\": \"<string>\",\n     \"type\": \"<string>\",\n     \"sequence_id\": \"<string>\",\n     \"etag\": \"<string>\",\n     \"name\": \"<string>\"\n    },\n    {\n     \"id\": \"<string>\",\n     \"type\": \"<string>\",\n     \"sequence_id\": \"<string>\",\n     \"etag\": \"<string>\",\n     \"name\": \"<string>\"\n    }\n   ],\n   \"created_at\": \"<dateTime>\",\n   \"modified_at\": \"<dateTime>\",\n   \"trashed_at\": \"<dateTime>\",\n   \"purged_at\": \"<dateTime>\",\n   \"content_created_at\": \"<dateTime>\",\n   \"content_modified_at\": \"<dateTime>\",\n   \"expires_at\": \"<dateTime>\",\n   \"created_by\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"modified_by\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"owned_by\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"shared_link\": {\n    \"url\": \"<url>\",\n    \"download_url\": \"<url>\",\n    \"vanity_url\": \"<url>\",\n    \"access\": \"<string>\",\n    \"effective_access\": \"<string>\",\n    \"effective_permission\": \"<string>\",\n    \"unshared_at\": \"<dateTime>\",\n    \"is_password_enabled\": \"<boolean>\",\n    \"permissions\": {\n     \"can_download\": \"<boolean>\",\n     \"can_preview\": \"<boolean>\"\n    },\n    \"download_count\": \"<integer>\",\n    \"preview_count\": \"<integer>\"\n   },\n   \"parent\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\"\n   },\n   \"item_status\": \"<string>\",\n   \"version_number\": \"<string>\",\n   \"comment_count\": \"<integer>\",\n   \"permissions\": {\n    \"can_delete\": \"<boolean>\",\n    \"can_download\": \"<boolean>\",\n    \"can_invite_collaborator\": \"<boolean>\",\n    \"can_rename\": \"<boolean>\",\n    \"can_set_share_access\": \"<boolean>\",\n    \"can_share\": \"<boolean>\",\n    \"can_annotate\": \"<boolean>\",\n    \"can_comment\": \"<boolean>\",\n    \"can_preview\": \"<boolean>\",\n    \"can_upload\": \"<boolean>\",\n    \"can_view_annotations_all\": \"<boolean>\",\n    \"can_view_annotations_self\": \"<boolean>\"\n   },\n   \"tags\": [\n    \"<string>\",\n    \"<string>\"\n   ],\n   \"lock\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\",\n    \"created_by\": {\n     \"id\": \"<string>\",\n     \"type\": \"<string>\",\n     \"name\": \"<string>\",\n     \"login\": \"<email>\"\n    },\n    \"created_at\": \"<dateTime>\",\n    \"expired_at\": \"<dateTime>\",\n    \"is_download_prevented\": \"<boolean>\"\n   },\n   \"extension\": \"<string>\",\n   \"is_package\": \"<boolean>\",\n   \"expiring_embed_link\": \"<string>\",\n   \"watermark_info\": {\n    \"is_watermarked\": \"<boolean>\"\n   },\n   \"allowed_invitee_roles\": \"company\",\n   \"is_externally_owned\": \"<boolean>\",\n   \"has_collaborations\": \"<boolean>\",\n   \"metadata\": \"<object>\"\n  },\n  {\n   \"id\": \"<string>\",\n   \"type\": \"<string>\",\n   \"sequence_id\": \"<string>\",\n   \"etag\": \"<string>\",\n   \"name\": \"<string>\",\n   \"sha1\": \"<digest>\",\n   \"description\": \"<string>\",\n   \"size\": \"<integer>\",\n   \"path_collection\": [\n    {\n     \"id\": \"<string>\",\n     \"type\": \"<string>\",\n     \"sequence_id\": \"<string>\",\n     \"etag\": \"<string>\",\n     \"name\": \"<string>\"\n    },\n    {\n     \"id\": \"<string>\",\n     \"type\": \"<string>\",\n     \"sequence_id\": \"<string>\",\n     \"etag\": \"<string>\",\n     \"name\": \"<string>\"\n    }\n   ],\n   \"created_at\": \"<dateTime>\",\n   \"modified_at\": \"<dateTime>\",\n   \"trashed_at\": \"<dateTime>\",\n   \"purged_at\": \"<dateTime>\",\n   \"content_created_at\": \"<dateTime>\",\n   \"content_modified_at\": \"<dateTime>\",\n   \"expires_at\": \"<dateTime>\",\n   \"created_by\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"modified_by\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"owned_by\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"shared_link\": {\n    \"url\": \"<url>\",\n    \"download_url\": \"<url>\",\n    \"vanity_url\": \"<url>\",\n    \"access\": \"<string>\",\n    \"effective_access\": \"<string>\",\n    \"effective_permission\": \"<string>\",\n    \"unshared_at\": \"<dateTime>\",\n    \"is_password_enabled\": \"<boolean>\",\n    \"permissions\": {\n     \"can_download\": \"<boolean>\",\n     \"can_preview\": \"<boolean>\"\n    },\n    \"download_count\": \"<integer>\",\n    \"preview_count\": \"<integer>\"\n   },\n   \"parent\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\"\n   },\n   \"item_status\": \"<string>\",\n   \"version_number\": \"<string>\",\n   \"comment_count\": \"<integer>\",\n   \"permissions\": {\n    \"can_delete\": \"<boolean>\",\n    \"can_download\": \"<boolean>\",\n    \"can_invite_collaborator\": \"<boolean>\",\n    \"can_rename\": \"<boolean>\",\n    \"can_set_share_access\": \"<boolean>\",\n    \"can_share\": \"<boolean>\",\n    \"can_annotate\": \"<boolean>\",\n    \"can_comment\": \"<boolean>\",\n    \"can_preview\": \"<boolean>\",\n    \"can_upload\": \"<boolean>\",\n    \"can_view_annotations_all\": \"<boolean>\",\n    \"can_view_annotations_self\": \"<boolean>\"\n   },\n   \"tags\": [\n    \"<string>\",\n    \"<string>\"\n   ],\n   \"lock\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\",\n    \"created_by\": {\n     \"id\": \"<string>\",\n     \"type\": \"<string>\",\n     \"name\": \"<string>\",\n     \"login\": \"<email>\"\n    },\n    \"created_at\": \"<dateTime>\",\n    \"expired_at\": \"<dateTime>\",\n    \"is_download_prevented\": \"<boolean>\"\n   },\n   \"extension\": \"<string>\",\n   \"is_package\": \"<boolean>\",\n   \"expiring_embed_link\": \"<string>\",\n   \"watermark_info\": {\n    \"is_watermarked\": \"<boolean>\"\n   },\n   \"allowed_invitee_roles\": \"collaborators\",\n   \"is_externally_owned\": \"<boolean>\",\n   \"has_collaborations\": \"<boolean>\",\n   \"metadata\": \"<object>\"\n  }\n ]\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    },
                    {
                      "id": "86f45ffc-5dc5-449b-9949-cb620b419c14",
                      "name": "Returns when all chunks have been uploaded but not yet processed.\n\nInspect the upload session to get more information about the\nprogress of processing the chunks, then retry committing the file\nwhen all chunks have processed.",
                      "originalRequest": {
                        "url": {
                          "protocol": "https",
                          "path": [
                            "api",
                            "2.0",
                            "files",
                            "upload_sessions",
                            "<string>",
                            "commit"
                          ],
                          "host": [
                            "upload",
                            "box",
                            "com"
                          ],
                          "query": [],
                          "variable": []
                        },
                        "header": [
                          {
                            "description": {
                              "content": "The [RFC3230][1] message digest of the whole file.\n\nOnly SHA-1 is supported. The SHA-1 digest must be Base64\nencoded. The format of this header is as\n`sha=BASE64_ENCODED_DIGEST`.\n\n[1]: https://tools.ietf.org/html/rfc3230",
                              "type": "text/plain"
                            },
                            "key": "Digest",
                            "value": "<string>"
                          },
                          {
                            "description": {
                              "content": "Ensure this item hasn't recently changed\nby ensuring the item's current `etag` matches the\n`etag` passed into this header.",
                              "type": "text/plain"
                            },
                            "key": "If-Match",
                            "value": "<string>"
                          },
                          {
                            "description": {
                              "content": "Ensures the changes are only applied if the\nitem's `etag` does not match the provided\n`etag`, ensuring that the item is only updated\nif the content has changed.",
                              "type": "text/plain"
                            },
                            "key": "If-None-Match",
                            "value": "<string>"
                          },
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "method": "POST",
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"parts\": [\n        {\n            \"part_id\": \"<string>\",\n            \"offset\": \"<long>\",\n            \"size\": \"<long>\"\n        },\n        {\n            \"part_id\": \"<string>\",\n            \"offset\": \"<long>\",\n            \"size\": \"<long>\"\n        }\n    ]\n}"
                        }
                      },
                      "status": "Accepted",
                      "code": 202,
                      "header": [
                        {
                          "key": "Retry-After",
                          "value": "<integer>",
                          "description": "Indicates the number of seconds the client should wait before\nattempting their commit request again."
                        },
                        {
                          "key": "Content-Type",
                          "value": "text/plain"
                        }
                      ],
                      "body": "",
                      "cookie": [],
                      "_postman_previewlanguage": "text"
                    },
                    {
                      "id": "ac7aff49-5000-4faf-b410-1b9e35bea428",
                      "name": "Returns an error if there is already a file with the same name\nin the target folder.",
                      "originalRequest": {
                        "url": {
                          "protocol": "https",
                          "path": [
                            "api",
                            "2.0",
                            "files",
                            "upload_sessions",
                            "<string>",
                            "commit"
                          ],
                          "host": [
                            "upload",
                            "box",
                            "com"
                          ],
                          "query": [],
                          "variable": []
                        },
                        "header": [
                          {
                            "description": {
                              "content": "The [RFC3230][1] message digest of the whole file.\n\nOnly SHA-1 is supported. The SHA-1 digest must be Base64\nencoded. The format of this header is as\n`sha=BASE64_ENCODED_DIGEST`.\n\n[1]: https://tools.ietf.org/html/rfc3230",
                              "type": "text/plain"
                            },
                            "key": "Digest",
                            "value": "<string>"
                          },
                          {
                            "description": {
                              "content": "Ensure this item hasn't recently changed\nby ensuring the item's current `etag` matches the\n`etag` passed into this header.",
                              "type": "text/plain"
                            },
                            "key": "If-Match",
                            "value": "<string>"
                          },
                          {
                            "description": {
                              "content": "Ensures the changes are only applied if the\nitem's `etag` does not match the provided\n`etag`, ensuring that the item is only updated\nif the content has changed.",
                              "type": "text/plain"
                            },
                            "key": "If-None-Match",
                            "value": "<string>"
                          },
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "method": "POST",
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"parts\": [\n        {\n            \"part_id\": \"<string>\",\n            \"offset\": \"<long>\",\n            \"size\": \"<long>\"\n        },\n        {\n            \"part_id\": \"<string>\",\n            \"offset\": \"<long>\",\n            \"size\": \"<long>\"\n        }\n    ]\n}"
                        }
                      },
                      "status": "Conflict",
                      "code": 409,
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    },
                    {
                      "id": "7a273e46-b2e2-4dbf-bff9-1b82689f8637",
                      "name": "Returns an error if the `If-Match` or `If-None-Match` conditions fail.",
                      "originalRequest": {
                        "url": {
                          "protocol": "https",
                          "path": [
                            "api",
                            "2.0",
                            "files",
                            "upload_sessions",
                            "<string>",
                            "commit"
                          ],
                          "host": [
                            "upload",
                            "box",
                            "com"
                          ],
                          "query": [],
                          "variable": []
                        },
                        "header": [
                          {
                            "description": {
                              "content": "The [RFC3230][1] message digest of the whole file.\n\nOnly SHA-1 is supported. The SHA-1 digest must be Base64\nencoded. The format of this header is as\n`sha=BASE64_ENCODED_DIGEST`.\n\n[1]: https://tools.ietf.org/html/rfc3230",
                              "type": "text/plain"
                            },
                            "key": "Digest",
                            "value": "<string>"
                          },
                          {
                            "description": {
                              "content": "Ensure this item hasn't recently changed\nby ensuring the item's current `etag` matches the\n`etag` passed into this header.",
                              "type": "text/plain"
                            },
                            "key": "If-Match",
                            "value": "<string>"
                          },
                          {
                            "description": {
                              "content": "Ensures the changes are only applied if the\nitem's `etag` does not match the provided\n`etag`, ensuring that the item is only updated\nif the content has changed.",
                              "type": "text/plain"
                            },
                            "key": "If-None-Match",
                            "value": "<string>"
                          },
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "method": "POST",
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"parts\": [\n        {\n            \"part_id\": \"<string>\",\n            \"offset\": \"<long>\",\n            \"size\": \"<long>\"\n        },\n        {\n            \"part_id\": \"<string>\",\n            \"offset\": \"<long>\",\n            \"size\": \"<long>\"\n        }\n    ]\n}"
                        }
                      },
                      "status": "Precondition Failed",
                      "code": 412,
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    }
                  ],
                  "event": []
                }
              ],
              "event": []
            }
          ],
          "event": []
        }
      ],
      "event": []
    },
    {
      "id": "c22a4a84-af67-463c-98bd-cd6b059aba8e",
      "name": "folders",
      "item": [
        {
          "id": "23a01167-c2eb-4ccd-8e4c-cf939961fca1",
          "name": "Create a folder",
          "request": {
            "name": "Create a folder",
            "description": {
              "content": "Creates a new empty folder within the specified parent folder.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "folders"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response, unless explicitly specified.",
                  "key": "fields",
                  "value": "<string>,<string>"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": {
              "type": "oauth2"
            },
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"<string>\",\n    \"parent\": {\n        \"id\": \"<string>\"\n    }\n}"
            }
          },
          "response": [
            {
              "id": "61d8af3d-d4e7-4954-8c7f-7e50388d1f87",
              "name": "Returns a folder object.\n\n[Some fields are optional](#folder) and need to be explicitly\nrequested using the [fields](##post_folders-fields) parameter.",
              "originalRequest": {
                "url": {
                  "path": [
                    "folders"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "<string>,<string>"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"<string>\",\n    \"parent\": {\n        \"id\": \"<string>\"\n    }\n}"
                }
              },
              "status": "Created",
              "code": 201,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"sequence_id\": \"<string>\",\n \"etag\": \"<string>\",\n \"name\": \"<string>\",\n \"created_at\": \"<dateTime>\",\n \"modified_at\": \"<dateTime>\",\n \"description\": {},\n \"size\": \"<long>\",\n \"path_collection\": {\n  \"total_count\": \"<long>\",\n  \"entries\": [\n   {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\"\n   },\n   {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\"\n   }\n  ]\n },\n \"created_by\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"modified_by\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"trashed_at\": \"<dateTime>\",\n \"purged_at\": \"<dateTime>\",\n \"content_created_at\": \"<dateTime>\",\n \"content_modified_at\": \"<dateTime>\",\n \"expires_at\": \"<dateTime>\",\n \"owned_by\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"shared_link\": {\n  \"url\": \"<url>\",\n  \"download_url\": \"<url>\",\n  \"vanity_url\": \"<url>\",\n  \"access\": \"<string>\",\n  \"effective_access\": \"<string>\",\n  \"effective_permission\": \"<string>\",\n  \"unshared_at\": \"<dateTime>\",\n  \"is_password_enabled\": \"<boolean>\",\n  \"permissions\": {\n   \"can_download\": \"<boolean>\",\n   \"can_preview\": \"<boolean>\"\n  },\n  \"download_count\": \"<integer>\",\n  \"preview_count\": \"<integer>\"\n },\n \"folder_upload_email\": {\n  \"access\": \"<string>\",\n  \"email\": \"<email>\"\n },\n \"parent\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"sequence_id\": \"<string>\",\n  \"etag\": \"<string>\",\n  \"name\": \"<string>\"\n },\n \"item_status\": \"<string>\",\n \"item_collection\": {\n  \"total_count\": \"<long>\",\n  \"limit\": \"<long>\",\n  \"offset\": \"<long>\",\n  \"order\": [\n   {\n    \"by\": \"<string>\",\n    \"direction\": \"<string>\"\n   },\n   {\n    \"by\": \"<string>\",\n    \"direction\": \"<string>\"\n   }\n  ],\n  \"entries\": [\n   {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\"\n   },\n   {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\"\n   }\n  ]\n },\n \"sync_state\": {},\n \"has_collaborations\": \"<boolean>\",\n \"permissions\": {\n  \"can_delete\": \"<boolean>\",\n  \"can_download\": \"<boolean>\",\n  \"can_invite_collaborator\": \"<boolean>\",\n  \"can_rename\": \"<boolean>\",\n  \"can_set_share_access\": \"<boolean>\",\n  \"can_share\": \"<boolean>\",\n  \"can_upload\": \"<boolean>\"\n },\n \"tags\": {},\n \"can_non_owners_invite\": {},\n \"is_externally_owned\": \"<boolean>\",\n \"is_collaboration_restricted_to_enterprise\": {},\n \"allowed_shared_link_access_levels\": \"open\",\n \"allowed_invitee_roles\": \"previewer uploader\",\n \"watermark_info\": {\n  \"is_watermarked\": \"<boolean>\"\n }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "a2d6a6e8-d2f4-450f-868c-2acf1f69560c",
              "name": "Returns an error if some of the parameters are missing or\ninvalid.\n\n* `bad_request` when a parameter is missing.\n* `item_name_too_long` when the folder name is too long.",
              "originalRequest": {
                "url": {
                  "path": [
                    "folders"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "<string>,<string>"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"<string>\",\n    \"parent\": {\n        \"id\": \"<string>\"\n    }\n}"
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "596f551a-9e7f-47a1-bd1e-218c88359856",
              "name": "Returns an error if the parent folder could not be found,\nor the authenticated user does not have access to the parent\nfolder.\n\n* `not_found` when the authenticated user does not have access\n  to the parent folder",
              "originalRequest": {
                "url": {
                  "path": [
                    "folders"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "<string>,<string>"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"<string>\",\n    \"parent\": {\n        \"id\": \"<string>\"\n    }\n}"
                }
              },
              "status": "Not Found",
              "code": 404,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "3344d5d1-1d13-4aef-97fd-e452a692dd73",
              "name": "Returns an error if a folder by this name already exists,\nor if the parent folder is locked.\n\n* `item_name_in_use` when a folder with the same name already\n  exists.",
              "originalRequest": {
                "url": {
                  "path": [
                    "folders"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "<string>,<string>"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"<string>\",\n    \"parent\": {\n        \"id\": \"<string>\"\n    }\n}"
                }
              },
              "status": "Conflict",
              "code": 409,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "22cbb790-2ce8-41bf-a6a9-2d3cdb8f0110",
          "name": "{folder id}",
          "item": [
            {
              "id": "d2132454-b4d0-40d7-a9ad-7464ef850b99",
              "name": "Get a folder",
              "request": {
                "name": "Get a folder",
                "description": {
                  "content": "Retrieves details for a folder, including the first 100 entries\nin the folder.\n\nTo fetch more items within the folder, please use the\n[Get items in a folder](#get-folders-id-items) endpoint.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "folders",
                    ":folder_id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response, unless explicitly specified.",
                      "key": "fields",
                      "value": "<string>,<string>"
                    }
                  ],
                  "variable": [
                    {
                      "description": {
                        "content": "The unique identifier that represent a folder.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the url `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder of a Box account is\nalways represented by the ID `0`.",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "<string>",
                      "key": "folder_id"
                    }
                  ]
                },
                "method": "GET",
                "auth": {
                  "type": "oauth2"
                }
              },
              "response": [
                {
                  "id": "6a148841-39ab-479b-bf43-17cd7128c5b5",
                  "name": "Returns a folder, including the first 100 entries in the folder.\n\nTo fetch more items within the folder, please use the\n[Get items in a folder](#get-folders-id-items) endpoint.\n\n[Some fields are optional](#folder) and need to be explicitly\nrequested using the [fields](#get_folders_id-fields)\nparameter.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "folders",
                        "<string>"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "fields",
                          "value": "<string>,<string>"
                        }
                      ],
                      "variable": []
                    },
                    "method": "GET",
                    "body": {}
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"sequence_id\": \"<string>\",\n \"etag\": \"<string>\",\n \"name\": \"<string>\",\n \"created_at\": \"<dateTime>\",\n \"modified_at\": \"<dateTime>\",\n \"description\": {},\n \"size\": \"<long>\",\n \"path_collection\": {\n  \"total_count\": \"<long>\",\n  \"entries\": [\n   {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\"\n   },\n   {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\"\n   }\n  ]\n },\n \"created_by\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"modified_by\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"trashed_at\": \"<dateTime>\",\n \"purged_at\": \"<dateTime>\",\n \"content_created_at\": \"<dateTime>\",\n \"content_modified_at\": \"<dateTime>\",\n \"expires_at\": \"<dateTime>\",\n \"owned_by\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"shared_link\": {\n  \"url\": \"<url>\",\n  \"download_url\": \"<url>\",\n  \"vanity_url\": \"<url>\",\n  \"access\": \"<string>\",\n  \"effective_access\": \"<string>\",\n  \"effective_permission\": \"<string>\",\n  \"unshared_at\": \"<dateTime>\",\n  \"is_password_enabled\": \"<boolean>\",\n  \"permissions\": {\n   \"can_download\": \"<boolean>\",\n   \"can_preview\": \"<boolean>\"\n  },\n  \"download_count\": \"<integer>\",\n  \"preview_count\": \"<integer>\"\n },\n \"folder_upload_email\": {\n  \"access\": \"<string>\",\n  \"email\": \"<email>\"\n },\n \"parent\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"sequence_id\": \"<string>\",\n  \"etag\": \"<string>\",\n  \"name\": \"<string>\"\n },\n \"item_status\": \"<string>\",\n \"item_collection\": {\n  \"total_count\": \"<long>\",\n  \"limit\": \"<long>\",\n  \"offset\": \"<long>\",\n  \"order\": [\n   {\n    \"by\": \"<string>\",\n    \"direction\": \"<string>\"\n   },\n   {\n    \"by\": \"<string>\",\n    \"direction\": \"<string>\"\n   }\n  ],\n  \"entries\": [\n   {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\"\n   },\n   {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\"\n   }\n  ]\n },\n \"sync_state\": {},\n \"has_collaborations\": \"<boolean>\",\n \"permissions\": {\n  \"can_delete\": \"<boolean>\",\n  \"can_download\": \"<boolean>\",\n  \"can_invite_collaborator\": \"<boolean>\",\n  \"can_rename\": \"<boolean>\",\n  \"can_set_share_access\": \"<boolean>\",\n  \"can_share\": \"<boolean>\",\n  \"can_upload\": \"<boolean>\"\n },\n \"tags\": {},\n \"can_non_owners_invite\": {},\n \"is_externally_owned\": \"<boolean>\",\n \"is_collaboration_restricted_to_enterprise\": {},\n \"allowed_shared_link_access_levels\": \"collaborators\",\n \"allowed_invitee_roles\": \"co-owner\",\n \"watermark_info\": {\n  \"is_watermarked\": \"<boolean>\"\n }\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "32b3ef94-5c11-4cb9-9fac-dfcf28060324",
                  "name": "Returned when the access token provided in the `Authorization` header\nis not recognized or not provided.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "folders",
                        "<string>"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "fields",
                          "value": "<string>,<string>"
                        }
                      ],
                      "variable": []
                    },
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Forbidden",
                  "code": 403,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "c962bdbe-ee88-4e96-9cb4-24bf78fd535a",
                  "name": "Returned if the folder is not found, or the user does not\nhave access to the folder.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "folders",
                        "<string>"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "fields",
                          "value": "<string>,<string>"
                        }
                      ],
                      "variable": []
                    },
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Not Found",
                  "code": 404,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "24749be0-8419-418e-9cac-4c8bf77485bb",
                  "name": "Returned if the `folder_id` is not in a recognized format.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "folders",
                        "<string>"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "fields",
                          "value": "<string>,<string>"
                        }
                      ],
                      "variable": []
                    },
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Method Not Allowed",
                  "code": 405,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": []
            },
            {
              "id": "cf4eae7e-a5f3-4674-a603-7cb3bcdc7671",
              "name": "Restore folder",
              "request": {
                "name": "Restore folder",
                "description": {
                  "content": "Restores a folder that has been moved to the trash.\n\n# Folder locking\n\nDuring this operation, part of the file tree will be locked, mainly\nthe source folder and all of its descendants, as well as the destination\nfolder.\n\nFor the duration of the operation, no other move, copy, delete, or restore\noperation can performed on any of the locked folders.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "folders",
                    ":folder_id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response, unless explicitly specified.",
                      "key": "fields",
                      "value": "<string>,<string>"
                    }
                  ],
                  "variable": [
                    {
                      "description": {
                        "content": "The unique identifier that represent a folder.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the url `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder of a Box account is\nalways represented by the ID `0`.",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "<string>",
                      "key": "folder_id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "auth": {
                  "type": "oauth2"
                },
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"<string>\",\n    \"parent\": {\n        \"id\": \"<string>\"\n    }\n}"
                }
              },
              "response": [
                {
                  "id": "15f35755-5de9-420d-b10d-08f275146f4c",
                  "name": "Returns a folder object when the folder has been restored.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "folders",
                        "<string>"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "fields",
                          "value": "<string>,<string>"
                        }
                      ],
                      "variable": []
                    },
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "method": "POST",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"name\": \"<string>\",\n    \"parent\": {\n        \"id\": \"<string>\"\n    }\n}"
                    }
                  },
                  "status": "Created",
                  "code": 201,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"sequence_id\": \"<string>\",\n \"etag\": \"<string>\",\n \"name\": \"<string>\",\n \"created_at\": \"<dateTime>\",\n \"modified_at\": \"<dateTime>\",\n \"description\": {},\n \"size\": \"<long>\",\n \"path_collection\": {\n  \"total_count\": \"<long>\",\n  \"entries\": [\n   {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\"\n   },\n   {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\"\n   }\n  ]\n },\n \"created_by\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"modified_by\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"trashed_at\": \"<dateTime>\",\n \"purged_at\": \"<dateTime>\",\n \"content_created_at\": \"<dateTime>\",\n \"content_modified_at\": \"<dateTime>\",\n \"expires_at\": \"<dateTime>\",\n \"owned_by\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"shared_link\": {\n  \"url\": \"<url>\",\n  \"download_url\": \"<url>\",\n  \"vanity_url\": \"<url>\",\n  \"access\": \"<string>\",\n  \"effective_access\": \"<string>\",\n  \"effective_permission\": \"<string>\",\n  \"unshared_at\": \"<dateTime>\",\n  \"is_password_enabled\": \"<boolean>\",\n  \"permissions\": {\n   \"can_download\": \"<boolean>\",\n   \"can_preview\": \"<boolean>\"\n  },\n  \"download_count\": \"<integer>\",\n  \"preview_count\": \"<integer>\"\n },\n \"folder_upload_email\": {\n  \"access\": \"<string>\",\n  \"email\": \"<email>\"\n },\n \"parent\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"sequence_id\": \"<string>\",\n  \"etag\": \"<string>\",\n  \"name\": \"<string>\"\n },\n \"item_status\": \"<string>\",\n \"item_collection\": {\n  \"total_count\": \"<long>\",\n  \"limit\": \"<long>\",\n  \"offset\": \"<long>\",\n  \"order\": [\n   {\n    \"by\": \"<string>\",\n    \"direction\": \"<string>\"\n   },\n   {\n    \"by\": \"<string>\",\n    \"direction\": \"<string>\"\n   }\n  ],\n  \"entries\": [\n   {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\"\n   },\n   {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\"\n   }\n  ]\n },\n \"sync_state\": {},\n \"has_collaborations\": \"<boolean>\",\n \"permissions\": {\n  \"can_delete\": \"<boolean>\",\n  \"can_download\": \"<boolean>\",\n  \"can_invite_collaborator\": \"<boolean>\",\n  \"can_rename\": \"<boolean>\",\n  \"can_set_share_access\": \"<boolean>\",\n  \"can_share\": \"<boolean>\",\n  \"can_upload\": \"<boolean>\"\n },\n \"tags\": {},\n \"can_non_owners_invite\": {},\n \"is_externally_owned\": \"<boolean>\",\n \"is_collaboration_restricted_to_enterprise\": {},\n \"allowed_shared_link_access_levels\": \"company\",\n \"allowed_invitee_roles\": \"co-owner\",\n \"watermark_info\": {\n  \"is_watermarked\": \"<boolean>\"\n }\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "86328a01-b8ee-42d2-bd96-3c871c6489f2",
                  "name": "Returns an error if the user does not have access to the folder\nthe folder is being restored to, or the user does not have permission\nto restore folders from the trash.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "folders",
                        "<string>"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "fields",
                          "value": "<string>,<string>"
                        }
                      ],
                      "variable": []
                    },
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "method": "POST",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"name\": \"<string>\",\n    \"parent\": {\n        \"id\": \"<string>\"\n    }\n}"
                    }
                  },
                  "status": "Forbidden",
                  "code": 403,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "d01c8504-f509-442e-813f-43ed89de927c",
                  "name": "Returns an error if the folder is not in the trash.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "folders",
                        "<string>"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "fields",
                          "value": "<string>,<string>"
                        }
                      ],
                      "variable": []
                    },
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "method": "POST",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"name\": \"<string>\",\n    \"parent\": {\n        \"id\": \"<string>\"\n    }\n}"
                    }
                  },
                  "status": "Not Found",
                  "code": 404,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "44c3b070-e8e8-4d72-9904-fa7d3b01ee58",
                  "name": "* Returned an error if there is a folder with the same name\n  in the destination folder.\n\n* `operation_blocked_temporary`: Returned if either of the destination\n  or source folders is locked due to another move, copy, delete or\n  restore operation in process.\n\n  The operation can be retried at a later point.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "folders",
                        "<string>"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "fields",
                          "value": "<string>,<string>"
                        }
                      ],
                      "variable": []
                    },
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "method": "POST",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"name\": \"<string>\",\n    \"parent\": {\n        \"id\": \"<string>\"\n    }\n}"
                    }
                  },
                  "status": "Conflict",
                  "code": 409,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": []
            },
            {
              "id": "634a819f-cae3-4230-a062-d461627d0c5e",
              "name": "Update a folder",
              "request": {
                "name": "Update a folder",
                "description": {
                  "content": "Updates a folder. This can be also be used to move the folder,\ncreate shared links, update collaborations, and more.\n\n# Folder locking\n\nWhen moving a folder, part of the file tree will be locked, mainly\nthe source folder and all of its descendants, as well as the destination\nfolder.\n\nFor the duration of the move, no other move, copy, delete, or restore\noperation can performed on any of the locked folders.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "folders",
                    ":folder_id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response, unless explicitly specified.",
                      "key": "fields",
                      "value": "<string>,<string>"
                    }
                  ],
                  "variable": [
                    {
                      "description": {
                        "content": "The unique identifier that represent a folder.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the url `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder of a Box account is\nalways represented by the ID `0`.",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "<string>",
                      "key": "folder_id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "If-Match",
                    "value": "<string>",
                    "description": "Ensure this item hasn't recently changed\nby ensuring the item's current `etag` matches the\n`etag` passed into this header."
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "auth": {
                  "type": "oauth2"
                },
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"sync_state\": \"<string>\",\n    \"can_non_owners_invite\": \"<boolean>\",\n    \"is_collaboration_restricted_to_enterprise\": \"<boolean>\",\n    \"parent\": {\n        \"id\": \"<string>\"\n    },\n    \"shared_link\": {\n        \"access\": \"<string>\",\n        \"password\": \"<string>\",\n        \"unshared_at\": \"<dateTime>\",\n        \"permissions\": {\n            \"can_download\": \"<boolean>\"\n        }\n    },\n    \"folder_upload_email\": {\n        \"access\": \"<string>\"\n    },\n    \"owned_by\": {\n        \"id\": \"<string>\"\n    },\n    \"tags\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"collections\": [\n        {\n            \"id\": \"<string>\"\n        },\n        {\n            \"id\": \"<string>\"\n        }\n    ]\n}"
                }
              },
              "response": [
                {
                  "id": "5950101e-9ab9-4747-be98-4a86f71fa669",
                  "name": "Returns a folder object for the updated folder\n\n[Some fields are optional](#folder) and need to be explicitly\nrequested using the [fields](#put-folders-id--request--fields)\nparameter.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "folders",
                        "<string>"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "fields",
                          "value": "<string>,<string>"
                        }
                      ],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Ensure this item hasn't recently changed\nby ensuring the item's current `etag` matches the\n`etag` passed into this header.",
                          "type": "text/plain"
                        },
                        "key": "If-Match",
                        "value": "<string>"
                      },
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "method": "PUT",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"sync_state\": \"<string>\",\n    \"can_non_owners_invite\": \"<boolean>\",\n    \"is_collaboration_restricted_to_enterprise\": \"<boolean>\",\n    \"parent\": {\n        \"id\": \"<string>\"\n    },\n    \"shared_link\": {\n        \"access\": \"<string>\",\n        \"password\": \"<string>\",\n        \"unshared_at\": \"<dateTime>\",\n        \"permissions\": {\n            \"can_download\": \"<boolean>\"\n        }\n    },\n    \"folder_upload_email\": {\n        \"access\": \"<string>\"\n    },\n    \"owned_by\": {\n        \"id\": \"<string>\"\n    },\n    \"tags\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"collections\": [\n        {\n            \"id\": \"<string>\"\n        },\n        {\n            \"id\": \"<string>\"\n        }\n    ]\n}"
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"sequence_id\": \"<string>\",\n \"etag\": \"<string>\",\n \"name\": \"<string>\",\n \"created_at\": \"<dateTime>\",\n \"modified_at\": \"<dateTime>\",\n \"description\": {},\n \"size\": \"<long>\",\n \"path_collection\": {\n  \"total_count\": \"<long>\",\n  \"entries\": [\n   {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\"\n   },\n   {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\"\n   }\n  ]\n },\n \"created_by\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"modified_by\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"trashed_at\": \"<dateTime>\",\n \"purged_at\": \"<dateTime>\",\n \"content_created_at\": \"<dateTime>\",\n \"content_modified_at\": \"<dateTime>\",\n \"expires_at\": \"<dateTime>\",\n \"owned_by\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"shared_link\": {\n  \"url\": \"<url>\",\n  \"download_url\": \"<url>\",\n  \"vanity_url\": \"<url>\",\n  \"access\": \"<string>\",\n  \"effective_access\": \"<string>\",\n  \"effective_permission\": \"<string>\",\n  \"unshared_at\": \"<dateTime>\",\n  \"is_password_enabled\": \"<boolean>\",\n  \"permissions\": {\n   \"can_download\": \"<boolean>\",\n   \"can_preview\": \"<boolean>\"\n  },\n  \"download_count\": \"<integer>\",\n  \"preview_count\": \"<integer>\"\n },\n \"folder_upload_email\": {\n  \"access\": \"<string>\",\n  \"email\": \"<email>\"\n },\n \"parent\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"sequence_id\": \"<string>\",\n  \"etag\": \"<string>\",\n  \"name\": \"<string>\"\n },\n \"item_status\": \"<string>\",\n \"item_collection\": {\n  \"total_count\": \"<long>\",\n  \"limit\": \"<long>\",\n  \"offset\": \"<long>\",\n  \"order\": [\n   {\n    \"by\": \"<string>\",\n    \"direction\": \"<string>\"\n   },\n   {\n    \"by\": \"<string>\",\n    \"direction\": \"<string>\"\n   }\n  ],\n  \"entries\": [\n   {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\"\n   },\n   {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\"\n   }\n  ]\n },\n \"sync_state\": {},\n \"has_collaborations\": \"<boolean>\",\n \"permissions\": {\n  \"can_delete\": \"<boolean>\",\n  \"can_download\": \"<boolean>\",\n  \"can_invite_collaborator\": \"<boolean>\",\n  \"can_rename\": \"<boolean>\",\n  \"can_set_share_access\": \"<boolean>\",\n  \"can_share\": \"<boolean>\",\n  \"can_upload\": \"<boolean>\"\n },\n \"tags\": {},\n \"can_non_owners_invite\": {},\n \"is_externally_owned\": \"<boolean>\",\n \"is_collaboration_restricted_to_enterprise\": {},\n \"allowed_shared_link_access_levels\": \"open\",\n \"allowed_invitee_roles\": \"viewer uploader\",\n \"watermark_info\": {\n  \"is_watermarked\": \"<boolean>\"\n }\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "c1d1a0b1-4017-44c6-b803-3aec9dcee5c5",
                  "name": "* `operation_blocked_temporary`: Returned if either of the destination\n  or source folders is locked due to another move, copy, delete or\n  restore operation in process.\n\n  The operation can be retried at a later point.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "folders",
                        "<string>"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "fields",
                          "value": "<string>,<string>"
                        }
                      ],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Ensure this item hasn't recently changed\nby ensuring the item's current `etag` matches the\n`etag` passed into this header.",
                          "type": "text/plain"
                        },
                        "key": "If-Match",
                        "value": "<string>"
                      },
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "method": "PUT",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"sync_state\": \"<string>\",\n    \"can_non_owners_invite\": \"<boolean>\",\n    \"is_collaboration_restricted_to_enterprise\": \"<boolean>\",\n    \"parent\": {\n        \"id\": \"<string>\"\n    },\n    \"shared_link\": {\n        \"access\": \"<string>\",\n        \"password\": \"<string>\",\n        \"unshared_at\": \"<dateTime>\",\n        \"permissions\": {\n            \"can_download\": \"<boolean>\"\n        }\n    },\n    \"folder_upload_email\": {\n        \"access\": \"<string>\"\n    },\n    \"owned_by\": {\n        \"id\": \"<string>\"\n    },\n    \"tags\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"collections\": [\n        {\n            \"id\": \"<string>\"\n        },\n        {\n            \"id\": \"<string>\"\n        }\n    ]\n}"
                    }
                  },
                  "status": "Conflict",
                  "code": 409,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": []
            },
            {
              "id": "9869933d-7432-4c6f-9c0b-7f18ffb8357f",
              "name": "Delete a folder",
              "request": {
                "name": "Delete a folder",
                "description": {
                  "content": "Deletes a folder, either permanently or by moving it to\nthe trash.\n\n# Folder locking\n\nThe the enterprise settings determine whether the item will\nbe permanently deleted from Box or moved to the trash.\n\nDuring this operation, part of the file tree will be locked, mainly\nthe source folder and all of its descendants.\n\nFor the duration of the operation, no other move, copy, delete, or restore\noperation can performed on any of the locked folders.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "folders",
                    ":folder_id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "description": "Delete a folder that is not empty by recursively deleting the\nfolder and all of its content.",
                      "key": "recursive",
                      "value": "<boolean>"
                    }
                  ],
                  "variable": [
                    {
                      "description": {
                        "content": "The unique identifier that represent a folder.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the url `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder of a Box account is\nalways represented by the ID `0`.",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "<string>",
                      "key": "folder_id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "If-Match",
                    "value": "<string>",
                    "description": "Ensure this item hasn't recently changed\nby ensuring the item's current `etag` matches the\n`etag` passed into this header."
                  }
                ],
                "method": "DELETE",
                "auth": {
                  "type": "oauth2"
                }
              },
              "response": [
                {
                  "id": "3f1b0f3b-cc1e-4d40-b65c-e18a7593cc04",
                  "name": "Returns an empty response when the folder is successfully deleted\nor moved to the trash.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "folders",
                        "<string>"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "recursive",
                          "value": "<boolean>"
                        }
                      ],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Ensure this item hasn't recently changed\nby ensuring the item's current `etag` matches the\n`etag` passed into this header.",
                          "type": "text/plain"
                        },
                        "key": "If-Match",
                        "value": "<string>"
                      }
                    ],
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "No Content",
                  "code": 204,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "_postman_previewlanguage": "text"
                },
                {
                  "id": "01aaa6b8-0b30-491c-95e2-952b9faa7721",
                  "name": "* `operation_blocked_temporary`: Returned if either of the destination\n  or source folders is locked due to another move, copy, delete or\n  restore operation in process.\n\n  The operation can be retried at a later point.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "folders",
                        "<string>"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "recursive",
                          "value": "<boolean>"
                        }
                      ],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Ensure this item hasn't recently changed\nby ensuring the item's current `etag` matches the\n`etag` passed into this header.",
                          "type": "text/plain"
                        },
                        "key": "If-Match",
                        "value": "<string>"
                      }
                    ],
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "Conflict",
                  "code": 409,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": []
            },
            {
              "id": "57e1c7ad-2bbd-41da-bfd1-5d811d3be737",
              "name": "Get items in folder",
              "request": {
                "name": "Get items in folder",
                "description": {
                  "content": "Retrieves a page of items in a folder. These items can be files,\nfolders, and web links.\n\nTo request more information about the folder itself, like its size,\nplease use the [Get a folder](#get-folders-id) endpoint instead.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "folders",
                    ":folder_id",
                    "items"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response, unless explicitly specified.",
                      "key": "fields",
                      "value": "<string>,<string>"
                    },
                    {
                      "description": "Specifies whether to use marker-based pagination instead of\noffset-based pagination. Only one pagination method can\nbe used at a time.\n\nBy setting this value to true, the API will return a `marker` field\nthat can be passed as a parameter to this endpoint to get the next\npage of the response.",
                      "key": "usemarker",
                      "value": "<boolean>"
                    },
                    {
                      "description": "The offset of the item at which to begin the response.",
                      "key": "offset",
                      "value": "<long>"
                    },
                    {
                      "description": "The position marker at which to begin the response.\n\nThis requires `usemarker` to be set to true.",
                      "key": "marker",
                      "value": "<string>"
                    },
                    {
                      "description": "The maximum number of items to return per page.",
                      "key": "limit",
                      "value": "100"
                    },
                    {
                      "description": "Defines the **second** attribute by which items\nare sorted.\n\nItems are always sorted by their `type` first, with\nfolders listed before files, and files listed\nbefore web links.\n\nThis parameter is not supported for marker-based pagination\non the root folder (the folder with an ID of `0`).",
                      "key": "sort",
                      "value": "<string>"
                    },
                    {
                      "description": "The direction to sort items in.",
                      "key": "direction",
                      "value": "<string>"
                    }
                  ],
                  "variable": [
                    {
                      "description": {
                        "content": "The unique identifier that represent a folder.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the url `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder of a Box account is\nalways represented by the ID `0`.",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "<string>",
                      "key": "folder_id"
                    }
                  ]
                },
                "method": "GET",
                "auth": {
                  "type": "oauth2"
                }
              },
              "response": [
                {
                  "id": "a1011fbd-aa5e-4ea0-905b-4c6eb95da43e",
                  "name": "Returns a collection of files, folders, and web links contained in a folder.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "folders",
                        "<string>",
                        "items"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "fields",
                          "value": "<string>,<string>"
                        },
                        {
                          "key": "usemarker",
                          "value": "<boolean>"
                        },
                        {
                          "key": "offset",
                          "value": "<long>"
                        },
                        {
                          "key": "marker",
                          "value": "<string>"
                        },
                        {
                          "key": "limit",
                          "value": "100"
                        },
                        {
                          "key": "sort",
                          "value": "<string>"
                        },
                        {
                          "key": "direction",
                          "value": "<string>"
                        }
                      ],
                      "variable": []
                    },
                    "method": "GET",
                    "body": {}
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n \"total_count\": \"<long>\",\n \"limit\": \"<long>\",\n \"offset\": \"<long>\",\n \"order\": [\n  {\n   \"by\": \"<string>\",\n   \"direction\": \"<string>\"\n  },\n  {\n   \"by\": \"<string>\",\n   \"direction\": \"<string>\"\n  }\n ],\n \"entries\": [\n  {\n   \"id\": \"schema type not provided\",\n   \"type\": \"<string>\",\n   \"sequence_id\": \"<string>\",\n   \"etag\": \"<string>\",\n   \"name\": \"<string>\"\n  },\n  {\n   \"id\": \"schema type not provided\",\n   \"type\": \"<string>\",\n   \"sequence_id\": \"<string>\",\n   \"etag\": \"<string>\",\n   \"name\": \"<string>\"\n  }\n ]\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "35ffc2db-74c5-4a6e-b1e4-ac10a8e36241",
                  "name": "Returned when the access token provided in the `Authorization` header\nis not recognized or not provided.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "folders",
                        "<string>",
                        "items"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "fields",
                          "value": "<string>,<string>"
                        },
                        {
                          "key": "usemarker",
                          "value": "<boolean>"
                        },
                        {
                          "key": "offset",
                          "value": "<long>"
                        },
                        {
                          "key": "marker",
                          "value": "<string>"
                        },
                        {
                          "key": "limit",
                          "value": "100"
                        },
                        {
                          "key": "sort",
                          "value": "<string>"
                        },
                        {
                          "key": "direction",
                          "value": "<string>"
                        }
                      ],
                      "variable": []
                    },
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Forbidden",
                  "code": 403,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "681f2f63-555f-4f94-9c83-95761b8264dc",
                  "name": "Returned if the folder is not found, or the user does not\nhave access to the folder.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "folders",
                        "<string>",
                        "items"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "fields",
                          "value": "<string>,<string>"
                        },
                        {
                          "key": "usemarker",
                          "value": "<boolean>"
                        },
                        {
                          "key": "offset",
                          "value": "<long>"
                        },
                        {
                          "key": "marker",
                          "value": "<string>"
                        },
                        {
                          "key": "limit",
                          "value": "100"
                        },
                        {
                          "key": "sort",
                          "value": "<string>"
                        },
                        {
                          "key": "direction",
                          "value": "<string>"
                        }
                      ],
                      "variable": []
                    },
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Not Found",
                  "code": 404,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "4ee4f445-fe77-42e6-96b5-71f5bb9db29e",
                  "name": "Returned if the `folder_id` is not in a recognized format.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "folders",
                        "<string>",
                        "items"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "fields",
                          "value": "<string>,<string>"
                        },
                        {
                          "key": "usemarker",
                          "value": "<boolean>"
                        },
                        {
                          "key": "offset",
                          "value": "<long>"
                        },
                        {
                          "key": "marker",
                          "value": "<string>"
                        },
                        {
                          "key": "limit",
                          "value": "100"
                        },
                        {
                          "key": "sort",
                          "value": "<string>"
                        },
                        {
                          "key": "direction",
                          "value": "<string>"
                        }
                      ],
                      "variable": []
                    },
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Method Not Allowed",
                  "code": 405,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": []
            },
            {
              "id": "a7044a48-9b35-4c16-805e-c8e176a37415",
              "name": "Copy a folder",
              "request": {
                "name": "Copy a folder",
                "description": {
                  "content": "Creates a copy of a folder within a destination folder.\n\nThe original folder will not be changed.\n\n# Asynchronous copying\n\nIf the folder being copied contains up to 500 items the copy will\nhappen synchronously with the API call. The call will not return until\nthe copy operation has completed.\n\nIf the folder contains more than 500 items the copy operation will be\nexecuted asynchronously and the API call will return directly yet before\nthe copy operation has completed. We currently have no API to check when\na copy operation has finished.\n\n# Folder locking\n\nDuring this operation, part of the file tree will be locked, mainly\nthe source folder and all of its descendants, as well as the destination\nfolder.\n\nFor the duration of the operation, no other move, copy, delete, or restore\noperation can performed on any of the locked folders. Most importantly, this\nmeans that the same folder can not be copied to two different parts of the\nfolder tree at the same time.\n\n# Metadata\n\nIf the destination folder has a metadata cascade policy attached to any of the\nparent folders a metadata cascade operation will be kicked off asynchronously.\n\nWe currently have no API to check when this operation has finished.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "folders",
                    ":folder_id",
                    "copy"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response, unless explicitly specified.",
                      "key": "fields",
                      "value": "<string>,<string>"
                    }
                  ],
                  "variable": [
                    {
                      "description": {
                        "content": "The unique identifier of the folder to copy.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the url `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder with the ID `0` can not be copied.",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "<string>",
                      "key": "folder_id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "auth": {
                  "type": "oauth2"
                },
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"parent\": {\n        \"id\": \"<string>\"\n    },\n    \"name\": \"<string>\"\n}"
                }
              },
              "response": [
                {
                  "id": "39fb0476-7e85-479f-81e0-de63e14777d1",
                  "name": "Returns a new folder object representing the copied folder.\n\n[Some fields are optional](#folder) and need to be explicitly\nrequested using the [fields](#post-folders-id-copy--request--fields)\nparameter.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "folders",
                        "<string>",
                        "copy"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "fields",
                          "value": "<string>,<string>"
                        }
                      ],
                      "variable": []
                    },
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "method": "POST",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"parent\": {\n        \"id\": \"<string>\"\n    },\n    \"name\": \"<string>\"\n}"
                    }
                  },
                  "status": "Created",
                  "code": 201,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"sequence_id\": \"<string>\",\n \"etag\": \"<string>\",\n \"name\": \"<string>\",\n \"created_at\": \"<dateTime>\",\n \"modified_at\": \"<dateTime>\",\n \"description\": {},\n \"size\": \"<long>\",\n \"path_collection\": {\n  \"total_count\": \"<long>\",\n  \"entries\": [\n   {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\"\n   },\n   {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\"\n   }\n  ]\n },\n \"created_by\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"modified_by\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"trashed_at\": \"<dateTime>\",\n \"purged_at\": \"<dateTime>\",\n \"content_created_at\": \"<dateTime>\",\n \"content_modified_at\": \"<dateTime>\",\n \"expires_at\": \"<dateTime>\",\n \"owned_by\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"shared_link\": {\n  \"url\": \"<url>\",\n  \"download_url\": \"<url>\",\n  \"vanity_url\": \"<url>\",\n  \"access\": \"<string>\",\n  \"effective_access\": \"<string>\",\n  \"effective_permission\": \"<string>\",\n  \"unshared_at\": \"<dateTime>\",\n  \"is_password_enabled\": \"<boolean>\",\n  \"permissions\": {\n   \"can_download\": \"<boolean>\",\n   \"can_preview\": \"<boolean>\"\n  },\n  \"download_count\": \"<integer>\",\n  \"preview_count\": \"<integer>\"\n },\n \"folder_upload_email\": {\n  \"access\": \"<string>\",\n  \"email\": \"<email>\"\n },\n \"parent\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"sequence_id\": \"<string>\",\n  \"etag\": \"<string>\",\n  \"name\": \"<string>\"\n },\n \"item_status\": \"<string>\",\n \"item_collection\": {\n  \"total_count\": \"<long>\",\n  \"limit\": \"<long>\",\n  \"offset\": \"<long>\",\n  \"order\": [\n   {\n    \"by\": \"<string>\",\n    \"direction\": \"<string>\"\n   },\n   {\n    \"by\": \"<string>\",\n    \"direction\": \"<string>\"\n   }\n  ],\n  \"entries\": [\n   {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\"\n   },\n   {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\"\n   }\n  ]\n },\n \"sync_state\": {},\n \"has_collaborations\": \"<boolean>\",\n \"permissions\": {\n  \"can_delete\": \"<boolean>\",\n  \"can_download\": \"<boolean>\",\n  \"can_invite_collaborator\": \"<boolean>\",\n  \"can_rename\": \"<boolean>\",\n  \"can_set_share_access\": \"<boolean>\",\n  \"can_share\": \"<boolean>\",\n  \"can_upload\": \"<boolean>\"\n },\n \"tags\": {},\n \"can_non_owners_invite\": {},\n \"is_externally_owned\": \"<boolean>\",\n \"is_collaboration_restricted_to_enterprise\": {},\n \"allowed_shared_link_access_levels\": \"open\",\n \"allowed_invitee_roles\": \"previewer uploader\",\n \"watermark_info\": {\n  \"is_watermarked\": \"<boolean>\"\n }\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "dfaa05c0-68e1-49db-83ea-7c8452693f3e",
                  "name": "Returns an error if some of the parameters are missing or\ninvalid.\n\n* `bad_request` when a parameter is missing.\n* `item_name_too_long` when the new folder name is too long.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "folders",
                        "<string>",
                        "copy"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "fields",
                          "value": "<string>,<string>"
                        }
                      ],
                      "variable": []
                    },
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "method": "POST",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"parent\": {\n        \"id\": \"<string>\"\n    },\n    \"name\": \"<string>\"\n}"
                    }
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "c6d6d4d1-8dd4-4203-a32f-e4b3321e5b5a",
                  "name": "Returns an error if either the source or destination folder\ncould not be found, or the authenticated user does not\nhave access to either folders.\n\n* `not_found` when the authenticated user does not have access\n  to the parent folder",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "folders",
                        "<string>",
                        "copy"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "fields",
                          "value": "<string>,<string>"
                        }
                      ],
                      "variable": []
                    },
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "method": "POST",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"parent\": {\n        \"id\": \"<string>\"\n    },\n    \"name\": \"<string>\"\n}"
                    }
                  },
                  "status": "Not Found",
                  "code": 404,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "b5b0a3ce-a382-4490-8bcb-ac668552c033",
                  "name": "Returns an error if a folder by this name already exists\nin the destination folder, or if the destination folder\nis locked.\n\n* `item_name_in_use` when a folder with the same name already\n  exists.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "folders",
                        "<string>",
                        "copy"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "fields",
                          "value": "<string>,<string>"
                        }
                      ],
                      "variable": []
                    },
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "method": "POST",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"parent\": {\n        \"id\": \"<string>\"\n    },\n    \"name\": \"<string>\"\n}"
                    }
                  },
                  "status": "Conflict",
                  "code": 409,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "dbff6cbb-05f7-43b2-9dce-44086ef30444",
                  "name": "Returns an error when trying to copy the root folder.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "folders",
                        "<string>",
                        "copy"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "fields",
                          "value": "<string>,<string>"
                        }
                      ],
                      "variable": []
                    },
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "method": "POST",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"parent\": {\n        \"id\": \"<string>\"\n    },\n    \"name\": \"<string>\"\n}"
                    }
                  },
                  "status": "Internal Server Error",
                  "code": 500,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": []
            },
            {
              "id": "6c58f6e0-9242-4922-9b89-62d52dba01a8",
              "name": "Get folder collaborations",
              "request": {
                "name": "Get folder collaborations",
                "description": {
                  "content": "Retrieves a list of collaborations for a folder. This\nreturns all the users that have access to the folder.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "folders",
                    ":folder_id",
                    "collaborations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response, unless explicitly specified.",
                      "key": "fields",
                      "value": "<string>,<string>"
                    },
                    {
                      "description": "The maximum number of items to return per page.",
                      "key": "limit",
                      "value": "100"
                    },
                    {
                      "description": "The offset of the item at which to begin the response.",
                      "key": "offset",
                      "value": "<long>"
                    }
                  ],
                  "variable": [
                    {
                      "description": {
                        "content": "The unique identifier that represent a folder.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the url `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder of a Box account is\nalways represented by the ID `0`.",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "<string>",
                      "key": "folder_id"
                    }
                  ]
                },
                "method": "GET",
                "auth": {
                  "type": "oauth2"
                }
              },
              "response": [
                {
                  "id": "55e64fbf-5e1b-479b-811e-2b437da3d95e",
                  "name": "Returns a collection of collaboration objects. If there are no\ncollaborations on this folder an empty collection will be returned.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "folders",
                        "<string>",
                        "collaborations"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "fields",
                          "value": "<string>,<string>"
                        },
                        {
                          "key": "limit",
                          "value": "100"
                        },
                        {
                          "key": "offset",
                          "value": "<long>"
                        }
                      ],
                      "variable": []
                    },
                    "method": "GET",
                    "body": {}
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n \"total_count\": \"<long>\",\n \"limit\": \"<long>\",\n \"offset\": \"<long>\",\n \"order\": [\n  {\n   \"by\": \"<string>\",\n   \"direction\": \"<string>\"\n  },\n  {\n   \"by\": \"<string>\",\n   \"direction\": \"<string>\"\n  }\n ],\n \"entries\": [\n  {\n   \"id\": \"<string>\",\n   \"type\": \"<string>\",\n   \"item\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\"\n   },\n   \"accessible_by\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"invite_email\": \"<string>\",\n   \"role\": \"<string>\",\n   \"expires_at\": \"<dateTime>\",\n   \"can_view_path\": \"<boolean>\",\n   \"status\": \"<string>\",\n   \"acknowledged_at\": \"<dateTime>\",\n   \"created_by\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"created_at\": \"<dateTime>\",\n   \"modified_at\": \"<dateTime>\",\n   \"acceptance_requirements_status\": {\n    \"terms_of_service_requirement\": {\n     \"is_accepted\": \"<boolean>\",\n     \"terms_of_service\": {\n      \"id\": \"<string>\",\n      \"type\": \"<string>\"\n     }\n    },\n    \"strong_password_requirement\": {\n     \"enterprise_has_strong_password_required_for_external_users\": \"<boolean>\",\n     \"user_has_strong_password\": \"<boolean>\"\n    },\n    \"two_factor_authentication_requirement\": {\n     \"enterprise_has_two_factor_auth_enabled\": \"<boolean>\",\n     \"user_has_two_factor_authentication_enabled\": \"<boolean>\"\n    }\n   }\n  },\n  {\n   \"id\": \"<string>\",\n   \"type\": \"<string>\",\n   \"item\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\"\n   },\n   \"accessible_by\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"invite_email\": \"<string>\",\n   \"role\": \"<string>\",\n   \"expires_at\": \"<dateTime>\",\n   \"can_view_path\": \"<boolean>\",\n   \"status\": \"<string>\",\n   \"acknowledged_at\": \"<dateTime>\",\n   \"created_by\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"created_at\": \"<dateTime>\",\n   \"modified_at\": \"<dateTime>\",\n   \"acceptance_requirements_status\": {\n    \"terms_of_service_requirement\": {\n     \"is_accepted\": \"<boolean>\",\n     \"terms_of_service\": {\n      \"id\": \"<string>\",\n      \"type\": \"<string>\"\n     }\n    },\n    \"strong_password_requirement\": {\n     \"enterprise_has_strong_password_required_for_external_users\": \"<boolean>\",\n     \"user_has_strong_password\": \"<boolean>\"\n    },\n    \"two_factor_authentication_requirement\": {\n     \"enterprise_has_two_factor_auth_enabled\": \"<boolean>\",\n     \"user_has_two_factor_authentication_enabled\": \"<boolean>\"\n    }\n   }\n  }\n ]\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": []
            },
            {
              "id": "4e9023c8-ae6a-44d9-a125-7fc4223cb744",
              "name": "trash",
              "item": [
                {
                  "id": "a7b6c40e-e8b2-419a-9eb8-b482deca41a7",
                  "name": "Get trashed folder",
                  "request": {
                    "name": "Get trashed folder",
                    "description": {
                      "content": "Retrieves a folder that has been moved to the trash.",
                      "type": "text/plain"
                    },
                    "url": {
                      "path": [
                        "folders",
                        ":folder_id",
                        "trash"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response, unless explicitly specified.",
                          "key": "fields",
                          "value": "<string>,<string>"
                        }
                      ],
                      "variable": [
                        {
                          "description": {
                            "content": "The unique identifier that represent a folder.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the url `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder of a Box account is\nalways represented by the ID `0`.",
                            "type": "text/plain"
                          },
                          "type": "any",
                          "value": "<string>",
                          "key": "folder_id"
                        }
                      ]
                    },
                    "method": "GET",
                    "auth": {
                      "type": "oauth2"
                    }
                  },
                  "response": [
                    {
                      "id": "b45ec5fe-feaa-4bd0-b5f8-e3321add116c",
                      "name": "Returns the folder that was trashed,\nincluding information about when the it\nwas moved to the trash.",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "folders",
                            "<string>",
                            "trash"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [
                            {
                              "key": "fields",
                              "value": "<string>,<string>"
                            }
                          ],
                          "variable": []
                        },
                        "method": "GET",
                        "body": {}
                      },
                      "status": "OK",
                      "code": 200,
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"sequence_id\": \"<string>\",\n \"etag\": \"<string>\",\n \"name\": \"<string>\",\n \"created_at\": \"<dateTime>\",\n \"modified_at\": \"<dateTime>\",\n \"description\": {},\n \"size\": \"<long>\",\n \"path_collection\": {\n  \"total_count\": \"<long>\",\n  \"entries\": [\n   {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\"\n   },\n   {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\"\n   }\n  ]\n },\n \"created_by\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"modified_by\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"trashed_at\": \"<dateTime>\",\n \"purged_at\": \"<dateTime>\",\n \"content_created_at\": \"<dateTime>\",\n \"content_modified_at\": \"<dateTime>\",\n \"expires_at\": \"<dateTime>\",\n \"owned_by\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"shared_link\": {\n  \"url\": \"<url>\",\n  \"download_url\": \"<url>\",\n  \"vanity_url\": \"<url>\",\n  \"access\": \"<string>\",\n  \"effective_access\": \"<string>\",\n  \"effective_permission\": \"<string>\",\n  \"unshared_at\": \"<dateTime>\",\n  \"is_password_enabled\": \"<boolean>\",\n  \"permissions\": {\n   \"can_download\": \"<boolean>\",\n   \"can_preview\": \"<boolean>\"\n  },\n  \"download_count\": \"<integer>\",\n  \"preview_count\": \"<integer>\"\n },\n \"folder_upload_email\": {\n  \"access\": \"<string>\",\n  \"email\": \"<email>\"\n },\n \"parent\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"sequence_id\": \"<string>\",\n  \"etag\": \"<string>\",\n  \"name\": \"<string>\"\n },\n \"item_status\": \"<string>\",\n \"item_collection\": {\n  \"total_count\": \"<long>\",\n  \"limit\": \"<long>\",\n  \"offset\": \"<long>\",\n  \"order\": [\n   {\n    \"by\": \"<string>\",\n    \"direction\": \"<string>\"\n   },\n   {\n    \"by\": \"<string>\",\n    \"direction\": \"<string>\"\n   }\n  ],\n  \"entries\": [\n   {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\"\n   },\n   {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\"\n   }\n  ]\n },\n \"sync_state\": {},\n \"has_collaborations\": \"<boolean>\",\n \"permissions\": {\n  \"can_delete\": \"<boolean>\",\n  \"can_download\": \"<boolean>\",\n  \"can_invite_collaborator\": \"<boolean>\",\n  \"can_rename\": \"<boolean>\",\n  \"can_set_share_access\": \"<boolean>\",\n  \"can_share\": \"<boolean>\",\n  \"can_upload\": \"<boolean>\"\n },\n \"tags\": {},\n \"can_non_owners_invite\": {},\n \"is_externally_owned\": \"<boolean>\",\n \"is_collaboration_restricted_to_enterprise\": {},\n \"allowed_shared_link_access_levels\": \"collaborators\",\n \"allowed_invitee_roles\": \"co-owner\",\n \"watermark_info\": {\n  \"is_watermarked\": \"<boolean>\"\n }\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    },
                    {
                      "id": "a82a0e04-4682-418f-8df9-db75280fc28f",
                      "name": "Returns an error if the folder is not in the trash.",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "folders",
                            "<string>",
                            "trash"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [
                            {
                              "key": "fields",
                              "value": "<string>,<string>"
                            }
                          ],
                          "variable": []
                        },
                        "method": "GET",
                        "body": {}
                      },
                      "status": "Not Found",
                      "code": 404,
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    }
                  ],
                  "event": []
                },
                {
                  "id": "eb590e79-40d5-46e9-8615-2b81930db084",
                  "name": "Permanently delete folder",
                  "request": {
                    "name": "Permanently delete folder",
                    "description": {
                      "content": "Permanently deletes a folder that is in the trash.\nThis action cannot be undone.",
                      "type": "text/plain"
                    },
                    "url": {
                      "path": [
                        "folders",
                        ":folder_id",
                        "trash"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "description": {
                            "content": "The unique identifier that represent a folder.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the url `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder of a Box account is\nalways represented by the ID `0`.",
                            "type": "text/plain"
                          },
                          "type": "any",
                          "value": "<string>",
                          "key": "folder_id"
                        }
                      ]
                    },
                    "method": "DELETE",
                    "auth": {
                      "type": "oauth2"
                    }
                  },
                  "response": [
                    {
                      "id": "8dae0de3-05f6-4a75-82c6-5cbfdc6123ac",
                      "name": "Returns an empty response when the folder was\npermanently deleted.",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "folders",
                            "<string>",
                            "trash"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": []
                        },
                        "method": "DELETE",
                        "body": {}
                      },
                      "status": "No Content",
                      "code": 204,
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "text/plain"
                        }
                      ],
                      "body": "",
                      "cookie": [],
                      "_postman_previewlanguage": "text"
                    },
                    {
                      "id": "8a9f290c-b5d6-41cf-a17d-9893bfb4ea00",
                      "name": "Returns an error if the folder is not in the trash.",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "folders",
                            "<string>",
                            "trash"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": []
                        },
                        "method": "DELETE",
                        "body": {}
                      },
                      "status": "Not Found",
                      "code": 404,
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    }
                  ],
                  "event": []
                }
              ],
              "event": []
            },
            {
              "id": "aacf9dd5-f37e-4adb-be4d-ea60ae397626",
              "name": "metadata",
              "item": [
                {
                  "id": "7aa738fc-627e-4487-91b8-723d48c91544",
                  "name": "List folder's metadata",
                  "request": {
                    "name": "List folder's metadata",
                    "description": {
                      "content": "Retrieves all metadata for a given folder.",
                      "type": "text/plain"
                    },
                    "url": {
                      "path": [
                        "folders",
                        ":folder_id",
                        "metadata"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "description": {
                            "content": "The unique identifier that represent a folder.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the url `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder of a Box account is\nalways represented by the ID `0`.",
                            "type": "text/plain"
                          },
                          "type": "any",
                          "value": "<string>",
                          "key": "folder_id"
                        }
                      ]
                    },
                    "method": "GET",
                    "auth": {
                      "type": "oauth2"
                    }
                  },
                  "response": [
                    {
                      "id": "e8a37b8b-e7b4-4f21-9d6f-4b0ee164425c",
                      "name": "Returns all the metadata associated with a folder.\n\nThis API does not support pagination and will therefore always return\nall of the metadata associated to the folder.",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "folders",
                            "<string>",
                            "metadata"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": []
                        },
                        "method": "GET",
                        "body": {}
                      },
                      "status": "OK",
                      "code": 200,
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n \"entries\": [\n  {\n   \"$canEdit\": \"<boolean>\",\n   \"$id\": \"<uuid>\",\n   \"$parent\": \"<string>\",\n   \"$scope\": \"<string>\",\n   \"$template\": \"<string>\",\n   \"$type\": \"<string>\",\n   \"$typeVersion\": \"<integer>\",\n   \"$version\": \"<integer>\"\n  },\n  {\n   \"$canEdit\": \"<boolean>\",\n   \"$id\": \"<uuid>\",\n   \"$parent\": \"<string>\",\n   \"$scope\": \"<string>\",\n   \"$template\": \"<string>\",\n   \"$type\": \"<string>\",\n   \"$typeVersion\": \"<integer>\",\n   \"$version\": \"<integer>\"\n  }\n ]\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    }
                  ],
                  "event": []
                },
                {
                  "id": "9c7e5482-67d3-4b30-97f7-b26bfb637e6a",
                  "name": "{scope}",
                  "item": [
                    {
                      "id": "fa3d2ec8-86e3-4e51-811d-86fbdac3f835",
                      "name": "{template key}",
                      "item": [
                        {
                          "id": "42d9882b-7421-4cec-8997-5b19cb90b2b8",
                          "name": "Get specific folder metadata",
                          "request": {
                            "name": "Get specific folder metadata",
                            "description": {
                              "content": "Retrieve a specific metadata template instance for a folder",
                              "type": "text/plain"
                            },
                            "url": {
                              "path": [
                                "folders",
                                ":folder_id",
                                "metadata",
                                ":scope",
                                ":template_key"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [],
                              "variable": [
                                {
                                  "description": {
                                    "content": "The unique identifier that represent a folder.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the url `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder of a Box account is\nalways represented by the ID `0`.",
                                    "type": "text/plain"
                                  },
                                  "type": "any",
                                  "value": "<string>",
                                  "key": "folder_id"
                                },
                                {
                                  "description": {
                                    "content": "The scope of the metadata template",
                                    "type": "text/plain"
                                  },
                                  "type": "any",
                                  "value": "<string>",
                                  "key": "scope"
                                },
                                {
                                  "description": {
                                    "content": "The name of the metadata template",
                                    "type": "text/plain"
                                  },
                                  "type": "any",
                                  "value": "<string>",
                                  "key": "template_key"
                                }
                              ]
                            },
                            "method": "GET",
                            "auth": {
                              "type": "oauth2"
                            }
                          },
                          "response": [
                            {
                              "id": "3536da75-a2fc-4057-8d3b-ace252b6bf8e",
                              "name": "An instance of the metadata template that includes\nadditional \"key:value\" pairs defined by the user or\nan application.",
                              "originalRequest": {
                                "url": {
                                  "path": [
                                    "folders",
                                    "<string>",
                                    "metadata",
                                    "<string>",
                                    "<string>"
                                  ],
                                  "host": [
                                    "{{baseUrl}}"
                                  ],
                                  "query": [],
                                  "variable": []
                                },
                                "method": "GET",
                                "body": {}
                              },
                              "status": "Created",
                              "code": 201,
                              "header": [
                                {
                                  "key": "Content-Type",
                                  "value": "application/json"
                                }
                              ],
                              "body": "{\n \"$canEdit\": \"<boolean>\",\n \"$id\": \"<uuid>\",\n \"$parent\": \"<string>\",\n \"$scope\": \"<string>\",\n \"$template\": \"<string>\",\n \"$type\": \"<string>\",\n \"$typeVersion\": \"<integer>\",\n \"$version\": \"<integer>\"\n}",
                              "cookie": [],
                              "_postman_previewlanguage": "json"
                            },
                            {
                              "id": "035356e6-5881-4e29-a335-f128f43461f4",
                              "name": "Returned if the metadata template specified\nwas not applied to this folder.",
                              "originalRequest": {
                                "url": {
                                  "path": [
                                    "folders",
                                    "<string>",
                                    "metadata",
                                    "<string>",
                                    "<string>"
                                  ],
                                  "host": [
                                    "{{baseUrl}}"
                                  ],
                                  "query": [],
                                  "variable": []
                                },
                                "method": "GET",
                                "body": {}
                              },
                              "status": "Not Found",
                              "code": 404,
                              "header": [
                                {
                                  "key": "Content-Type",
                                  "value": "application/json"
                                }
                              ],
                              "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
                              "cookie": [],
                              "_postman_previewlanguage": "json"
                            }
                          ],
                          "event": []
                        },
                        {
                          "id": "7f3f4fc6-d66d-4579-b49b-4b2c5f48f388",
                          "name": "Create metadata on folder",
                          "request": {
                            "name": "Create metadata on folder",
                            "description": {
                              "content": "Creates a piece of metadata on a folder based on the specified template.\n\nOnly values that are present in the metadata template\nwill be accepted.",
                              "type": "text/plain"
                            },
                            "url": {
                              "path": [
                                "folders",
                                ":folder_id",
                                "metadata",
                                ":scope",
                                ":template_key"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [],
                              "variable": [
                                {
                                  "description": {
                                    "content": "The unique identifier that represent a folder.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the url `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder of a Box account is\nalways represented by the ID `0`.",
                                    "type": "text/plain"
                                  },
                                  "type": "any",
                                  "value": "<string>",
                                  "key": "folder_id"
                                },
                                {
                                  "description": {
                                    "content": "The scope of the metadata template",
                                    "type": "text/plain"
                                  },
                                  "type": "any",
                                  "value": "<string>",
                                  "key": "scope"
                                },
                                {
                                  "description": {
                                    "content": "The name of the metadata template",
                                    "type": "text/plain"
                                  },
                                  "type": "any",
                                  "value": "<string>",
                                  "key": "template_key"
                                }
                              ]
                            },
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              }
                            ],
                            "method": "POST",
                            "auth": {
                              "type": "oauth2"
                            },
                            "body": {
                              "mode": "raw",
                              "raw": "\"<object>\""
                            }
                          },
                          "response": [
                            {
                              "id": "11c16792-0779-4305-a5fa-96338739fd47",
                              "name": "Returns an instance of the template that was specified, with the\ncustom template data included.",
                              "originalRequest": {
                                "url": {
                                  "path": [
                                    "folders",
                                    "<string>",
                                    "metadata",
                                    "<string>",
                                    "<string>"
                                  ],
                                  "host": [
                                    "{{baseUrl}}"
                                  ],
                                  "query": [],
                                  "variable": []
                                },
                                "header": [
                                  {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                  }
                                ],
                                "method": "POST",
                                "body": {
                                  "mode": "raw",
                                  "raw": "\"<object>\""
                                }
                              },
                              "status": "OK",
                              "code": 200,
                              "header": [
                                {
                                  "key": "Content-Type",
                                  "value": "application/json"
                                }
                              ],
                              "body": "{\n \"$canEdit\": \"<boolean>\",\n \"$id\": \"<uuid>\",\n \"$parent\": \"<string>\",\n \"$scope\": \"<string>\",\n \"$template\": \"<string>\",\n \"$type\": \"<string>\",\n \"$typeVersion\": \"<integer>\",\n \"$version\": \"<integer>\"\n}",
                              "cookie": [],
                              "_postman_previewlanguage": "json"
                            },
                            {
                              "id": "68314c15-e6ad-4e59-9728-dbb7168eeacc",
                              "name": "If the piece of metadata already exists, a conflict error\nwill be returned. The metadata can then instead be updated with the\n`PUT` method.",
                              "originalRequest": {
                                "url": {
                                  "path": [
                                    "folders",
                                    "<string>",
                                    "metadata",
                                    "<string>",
                                    "<string>"
                                  ],
                                  "host": [
                                    "{{baseUrl}}"
                                  ],
                                  "query": [],
                                  "variable": []
                                },
                                "header": [
                                  {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                  }
                                ],
                                "method": "POST",
                                "body": {
                                  "mode": "raw",
                                  "raw": "\"<object>\""
                                }
                              },
                              "status": "Conflict",
                              "code": 409,
                              "header": [
                                {
                                  "key": "Content-Type",
                                  "value": "application/json"
                                }
                              ],
                              "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
                              "cookie": [],
                              "_postman_previewlanguage": "json"
                            }
                          ],
                          "event": []
                        },
                        {
                          "id": "753ff442-3792-4f1d-ac22-43f068ee546a",
                          "name": "Update folder metadata",
                          "request": {
                            "name": "Update folder metadata",
                            "description": {
                              "content": "Updates a piece of metadata on a folder based.\n\nThe metadata instance can only be updated if the instance\nalready exists. When editing metadata, only values that adhere to the\nmetadata template schema will be accepted.\n\nThe update is applied atomically. If any errors occur during the\napplication of the operations, the metadata instance remains unchanged.",
                              "type": "text/plain"
                            },
                            "url": {
                              "path": [
                                "folders",
                                ":folder_id",
                                "metadata",
                                ":scope",
                                ":template_key"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [],
                              "variable": [
                                {
                                  "description": {
                                    "content": "The unique identifier that represent a folder.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the url `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder of a Box account is\nalways represented by the ID `0`.",
                                    "type": "text/plain"
                                  },
                                  "type": "any",
                                  "value": "<string>",
                                  "key": "folder_id"
                                },
                                {
                                  "description": {
                                    "content": "The scope of the metadata template",
                                    "type": "text/plain"
                                  },
                                  "type": "any",
                                  "value": "<string>",
                                  "key": "scope"
                                },
                                {
                                  "description": {
                                    "content": "The name of the metadata template",
                                    "type": "text/plain"
                                  },
                                  "type": "any",
                                  "value": "<string>",
                                  "key": "template_key"
                                }
                              ]
                            },
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              }
                            ],
                            "method": "PUT",
                            "auth": {
                              "type": "oauth2"
                            },
                            "body": {
                              "mode": "raw",
                              "raw": "[\n    {\n        \"op\": \"<string>\",\n        \"path\": \"<string>\",\n        \"value\": \"<string>\",\n        \"from\": \"<string>\"\n    },\n    {\n        \"op\": \"<string>\",\n        \"path\": \"<string>\",\n        \"value\": \"<string>\",\n        \"from\": \"<string>\"\n    }\n]"
                            }
                          },
                          "response": [
                            {
                              "id": "bd3cb5ca-e86d-48d5-8396-1766eca796b4",
                              "name": "Returns the updated metadata template instance, with the\ncustom template data included.",
                              "originalRequest": {
                                "url": {
                                  "path": [
                                    "folders",
                                    "<string>",
                                    "metadata",
                                    "<string>",
                                    "<string>"
                                  ],
                                  "host": [
                                    "{{baseUrl}}"
                                  ],
                                  "query": [],
                                  "variable": []
                                },
                                "header": [
                                  {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                  }
                                ],
                                "method": "PUT",
                                "body": {
                                  "mode": "raw",
                                  "raw": "[\n    {\n        \"op\": \"<string>\",\n        \"path\": \"<string>\",\n        \"value\": \"<string>\",\n        \"from\": \"<string>\"\n    },\n    {\n        \"op\": \"<string>\",\n        \"path\": \"<string>\",\n        \"value\": \"<string>\",\n        \"from\": \"<string>\"\n    }\n]"
                                }
                              },
                              "status": "OK",
                              "code": 200,
                              "header": [
                                {
                                  "key": "Content-Type",
                                  "value": "application/json"
                                }
                              ],
                              "body": "{\n \"$canEdit\": \"<boolean>\",\n \"$id\": \"<uuid>\",\n \"$parent\": \"<string>\",\n \"$scope\": \"<string>\",\n \"$template\": \"<string>\",\n \"$type\": \"<string>\",\n \"$typeVersion\": \"<integer>\",\n \"$version\": \"<integer>\"\n}",
                              "cookie": [],
                              "_postman_previewlanguage": "json"
                            },
                            {
                              "id": "a2236414-8164-4e0a-ac11-1a59a0eec017",
                              "name": "If the piece of metadata already exists, a conflict error\nwill be returned. The metadata can then instead be updated with the\n`PUT` method.",
                              "originalRequest": {
                                "url": {
                                  "path": [
                                    "folders",
                                    "<string>",
                                    "metadata",
                                    "<string>",
                                    "<string>"
                                  ],
                                  "host": [
                                    "{{baseUrl}}"
                                  ],
                                  "query": [],
                                  "variable": []
                                },
                                "header": [
                                  {
                                    "key": "Content-Type",
                                    "value": "application/json"
                                  }
                                ],
                                "method": "PUT",
                                "body": {
                                  "mode": "raw",
                                  "raw": "[\n    {\n        \"op\": \"<string>\",\n        \"path\": \"<string>\",\n        \"value\": \"<string>\",\n        \"from\": \"<string>\"\n    },\n    {\n        \"op\": \"<string>\",\n        \"path\": \"<string>\",\n        \"value\": \"<string>\",\n        \"from\": \"<string>\"\n    }\n]"
                                }
                              },
                              "status": "Conflict",
                              "code": 409,
                              "header": [
                                {
                                  "key": "Content-Type",
                                  "value": "application/json"
                                }
                              ],
                              "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
                              "cookie": [],
                              "_postman_previewlanguage": "json"
                            }
                          ],
                          "event": []
                        },
                        {
                          "id": "7fc984f7-9b7f-40ab-9c22-e57dda8cf514",
                          "name": "Delete folder metadata",
                          "request": {
                            "name": "Delete folder metadata",
                            "description": {
                              "content": "Deletes a piece of folder metadata.",
                              "type": "text/plain"
                            },
                            "url": {
                              "path": [
                                "folders",
                                ":folder_id",
                                "metadata",
                                ":scope",
                                ":template_key"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [],
                              "variable": [
                                {
                                  "description": {
                                    "content": "The unique identifier that represent a folder.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the url `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder of a Box account is\nalways represented by the ID `0`.",
                                    "type": "text/plain"
                                  },
                                  "type": "any",
                                  "value": "<string>",
                                  "key": "folder_id"
                                },
                                {
                                  "description": {
                                    "content": "The scope of the metadata template",
                                    "type": "text/plain"
                                  },
                                  "type": "any",
                                  "value": "<string>",
                                  "key": "scope"
                                },
                                {
                                  "description": {
                                    "content": "The name of the metadata template",
                                    "type": "text/plain"
                                  },
                                  "type": "any",
                                  "value": "<string>",
                                  "key": "template_key"
                                }
                              ]
                            },
                            "method": "DELETE",
                            "auth": {
                              "type": "oauth2"
                            }
                          },
                          "response": [
                            {
                              "id": "6f7244c8-6a7d-4854-8604-ffa5826cde21",
                              "name": "Returns an empty response when the metadata is\nsuccessfully deleted.",
                              "originalRequest": {
                                "url": {
                                  "path": [
                                    "folders",
                                    "<string>",
                                    "metadata",
                                    "<string>",
                                    "<string>"
                                  ],
                                  "host": [
                                    "{{baseUrl}}"
                                  ],
                                  "query": [],
                                  "variable": []
                                },
                                "method": "DELETE",
                                "body": {}
                              },
                              "status": "No Content",
                              "code": 204,
                              "header": [
                                {
                                  "key": "Content-Type",
                                  "value": "text/plain"
                                }
                              ],
                              "body": "",
                              "cookie": [],
                              "_postman_previewlanguage": "text"
                            }
                          ],
                          "event": []
                        }
                      ],
                      "event": []
                    }
                  ],
                  "event": []
                }
              ],
              "event": []
            },
            {
              "id": "3d418c2f-2e39-4d81-95a1-eb81bd3b7849",
              "name": "watermark",
              "item": [
                {
                  "id": "b8000caa-aaad-4db7-9751-6dce2bad9030",
                  "name": "Get folder watermark",
                  "request": {
                    "name": "Get folder watermark",
                    "description": {
                      "content": "Retrieve the watermark for a folder.",
                      "type": "text/plain"
                    },
                    "url": {
                      "path": [
                        "folders",
                        ":folder_id",
                        "watermark"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "description": {
                            "content": "The unique identifier that represent a folder.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the url `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder of a Box account is\nalways represented by the ID `0`.",
                            "type": "text/plain"
                          },
                          "type": "any",
                          "value": "<string>",
                          "key": "folder_id"
                        }
                      ]
                    },
                    "method": "GET",
                    "auth": {
                      "type": "oauth2"
                    }
                  },
                  "response": [
                    {
                      "id": "19c7ab1a-1479-45ad-8b43-b6c1ddf6e034",
                      "name": "Returns an object containing information about the\nwatermark associated for to this folder.",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "folders",
                            "<string>",
                            "watermark"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": []
                        },
                        "method": "GET",
                        "body": {}
                      },
                      "status": "OK",
                      "code": 200,
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n \"watermark\": {\n  \"created_at\": \"<dateTime>\",\n  \"modified_at\": \"<dateTime>\"\n }\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    },
                    {
                      "id": "a6de685a-a798-4274-a3be-6209f561d6bc",
                      "name": "Returns an error if the folder does not have a watermark applied.",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "folders",
                            "<string>",
                            "watermark"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": []
                        },
                        "method": "GET",
                        "body": {}
                      },
                      "status": "Not Found",
                      "code": 404,
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    }
                  ],
                  "event": []
                },
                {
                  "id": "2b335d0e-36e5-4bb9-8f56-3386b7e08b45",
                  "name": "Apply watermark to folder",
                  "request": {
                    "name": "Apply watermark to folder",
                    "description": {
                      "content": "Applies or update a watermark on a folder.",
                      "type": "text/plain"
                    },
                    "url": {
                      "path": [
                        "folders",
                        ":folder_id",
                        "watermark"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "description": {
                            "content": "The unique identifier that represent a folder.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the url `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder of a Box account is\nalways represented by the ID `0`.",
                            "type": "text/plain"
                          },
                          "type": "any",
                          "value": "<string>",
                          "key": "folder_id"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "method": "PUT",
                    "auth": {
                      "type": "oauth2"
                    },
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"watermark\": {\n        \"imprint\": \"<string>\"\n    }\n}"
                    }
                  },
                  "response": [
                    {
                      "id": "c527bf39-ec69-4aca-bed8-81934306be74",
                      "name": "Returns an updated watermark if a watermark already\nexisted on this folder.",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "folders",
                            "<string>",
                            "watermark"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": []
                        },
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "method": "PUT",
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"watermark\": {\n        \"imprint\": \"<string>\"\n    }\n}"
                        }
                      },
                      "status": "OK",
                      "code": 200,
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n \"watermark\": {\n  \"created_at\": \"<dateTime>\",\n  \"modified_at\": \"<dateTime>\"\n }\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    },
                    {
                      "id": "0130fae0-a133-4ad3-a10a-0b16c5d9943b",
                      "name": "Returns a new watermark if no watermark existed on\nthis folder yet.",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "folders",
                            "<string>",
                            "watermark"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": []
                        },
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "method": "PUT",
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"watermark\": {\n        \"imprint\": \"<string>\"\n    }\n}"
                        }
                      },
                      "status": "Created",
                      "code": 201,
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n \"watermark\": {\n  \"created_at\": \"<dateTime>\",\n  \"modified_at\": \"<dateTime>\"\n }\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    }
                  ],
                  "event": []
                },
                {
                  "id": "ad2e83cc-9a75-4e85-88eb-6abb1201e001",
                  "name": "Remove folder watermark",
                  "request": {
                    "name": "Remove folder watermark",
                    "description": {
                      "content": "Removes the watermark from a folder.",
                      "type": "text/plain"
                    },
                    "url": {
                      "path": [
                        "folders",
                        ":folder_id",
                        "watermark"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "description": {
                            "content": "The unique identifier that represent a folder.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the url `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder of a Box account is\nalways represented by the ID `0`.",
                            "type": "text/plain"
                          },
                          "type": "any",
                          "value": "<string>",
                          "key": "folder_id"
                        }
                      ]
                    },
                    "method": "DELETE",
                    "auth": {
                      "type": "oauth2"
                    }
                  },
                  "response": [
                    {
                      "id": "f08a4a6e-197c-410d-8ec4-07f61b416521",
                      "name": "An empty response will be returned when the watermark\nwas successfully deleted.",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "folders",
                            "<string>",
                            "watermark"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": []
                        },
                        "method": "DELETE",
                        "body": {}
                      },
                      "status": "No Content",
                      "code": 204,
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "text/plain"
                        }
                      ],
                      "body": "",
                      "cookie": [],
                      "_postman_previewlanguage": "text"
                    },
                    {
                      "id": "162c1cd9-0399-4bcd-bccd-ae0aef9adcc9",
                      "name": "Returns an error if the folder did not have\na watermark applied to it",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "folders",
                            "<string>",
                            "watermark"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": []
                        },
                        "method": "DELETE",
                        "body": {}
                      },
                      "status": "Not Found",
                      "code": 404,
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    }
                  ],
                  "event": []
                }
              ],
              "event": []
            }
          ],
          "event": []
        },
        {
          "id": "4f071f0f-e82c-46ec-8042-622c6c512798",
          "name": "List trashed items",
          "request": {
            "name": "List trashed items",
            "description": {
              "content": "Retrieves the files and folders that have been moved\nto the trash.\n\nAny attribute in the full files or folders objects can be passed\nin with the `fields` parameter to retrieve those specific\nattributes that are not returned by default.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "folders",
                "trash",
                "items"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response, unless explicitly specified.",
                  "key": "fields",
                  "value": "<string>,<string>"
                },
                {
                  "description": "The maximum number of items to return per page.",
                  "key": "limit",
                  "value": "100"
                },
                {
                  "description": "The offset of the item at which to begin the response.",
                  "key": "offset",
                  "value": "<long>"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "29ff1b25-a896-4e86-b40d-4b71916715d9",
              "name": "Returns a list of items that have been deleted",
              "originalRequest": {
                "url": {
                  "path": [
                    "folders",
                    "trash",
                    "items"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "<string>,<string>"
                    },
                    {
                      "key": "limit",
                      "value": "100"
                    },
                    {
                      "key": "offset",
                      "value": "<long>"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"total_count\": \"<long>\",\n \"limit\": \"<long>\",\n \"offset\": \"<long>\",\n \"order\": [\n  {\n   \"by\": \"<string>\",\n   \"direction\": \"<string>\"\n  },\n  {\n   \"by\": \"<string>\",\n   \"direction\": \"<string>\"\n  }\n ],\n \"entries\": [\n  {\n   \"id\": \"schema type not provided\",\n   \"type\": \"<string>\",\n   \"sequence_id\": \"<string>\",\n   \"etag\": \"<string>\",\n   \"name\": \"<string>\"\n  },\n  {\n   \"id\": \"schema type not provided\",\n   \"type\": \"<string>\",\n   \"sequence_id\": \"<string>\",\n   \"etag\": \"<string>\",\n   \"name\": \"<string>\"\n  }\n ]\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        }
      ],
      "event": []
    },
    {
      "id": "8ddbc968-2efe-46ca-bfd6-21d8d240409a",
      "name": "metadata templates",
      "item": [
        {
          "id": "bac28250-0e76-45b7-b6c1-ed670027856c",
          "name": "{scope}",
          "item": [
            {
              "id": "c8fcad6b-f233-4af6-818e-5f357ba49d9e",
              "name": "{template key}",
              "item": [
                {
                  "id": "bb7a0c01-2d63-4dda-850e-c1ce9f4019d9",
                  "name": "schema",
                  "item": [
                    {
                      "id": "ac827f61-4a66-4f90-a45c-0d3b48b5ddc3",
                      "name": "Get template by name",
                      "request": {
                        "name": "Get template by name",
                        "description": {
                          "content": "Retrieves a metadata template by its scope and template name.",
                          "type": "text/plain"
                        },
                        "url": {
                          "path": [
                            "metadata_templates",
                            ":scope",
                            ":template_key",
                            "schema"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "description": {
                                "content": "The scope of the metadata template",
                                "type": "text/plain"
                              },
                              "type": "any",
                              "value": "<string>",
                              "key": "scope"
                            },
                            {
                              "description": {
                                "content": "The name of the metadata template",
                                "type": "text/plain"
                              },
                              "type": "any",
                              "value": "<string>",
                              "key": "template_key"
                            }
                          ]
                        },
                        "method": "GET",
                        "auth": {
                          "type": "oauth2"
                        }
                      },
                      "response": [
                        {
                          "id": "3a46c0f0-08b4-4b0f-affa-c90b0bce0c53",
                          "name": "Returns the metadata template matching the `scope`\nand `template` name.",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "metadata_templates",
                                "<string>",
                                "<string>",
                                "schema"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [],
                              "variable": []
                            },
                            "method": "GET",
                            "body": {}
                          },
                          "status": "OK",
                          "code": 200,
                          "header": [
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n \"scope\": \"<string>\",\n \"templateKey\": \"<string>\",\n \"displayName\": \"<string>\",\n \"hidden\": \"<boolean>\",\n \"fields\": [\n  {\n   \"type\": \"<string>\",\n   \"key\": \"<string>\",\n   \"displayName\": \"<string>\",\n   \"description\": \"<string>\",\n   \"hidden\": \"<boolean>\",\n   \"options\": [\n    {\n     \"id\": \"<string>\",\n     \"key\": \"<string>\"\n    },\n    {\n     \"id\": \"<string>\",\n     \"key\": \"<string>\"\n    }\n   ]\n  },\n  {\n   \"type\": \"<string>\",\n   \"key\": \"<string>\",\n   \"displayName\": \"<string>\",\n   \"description\": \"<string>\",\n   \"hidden\": \"<boolean>\",\n   \"options\": [\n    {\n     \"id\": \"<string>\",\n     \"key\": \"<string>\"\n    },\n    {\n     \"id\": \"<string>\",\n     \"key\": \"<string>\"\n    }\n   ]\n  }\n ],\n \"id\": \"<string>\"\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        }
                      ],
                      "event": []
                    },
                    {
                      "id": "632ee7f5-730a-4562-906b-ca0ae45f3b29",
                      "name": "Update metadata template",
                      "request": {
                        "name": "Update metadata template",
                        "description": {
                          "content": "Updates a metadata template.\n\nThe metadata template can only be updated if the template\nalready exists.\n\nThe update is applied atomically. If any errors occur during the\napplication of the operations, the metadata template remains unchanged.",
                          "type": "text/plain"
                        },
                        "url": {
                          "path": [
                            "metadata_templates",
                            ":scope",
                            ":template_key",
                            "schema"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "description": {
                                "content": "The scope of the metadata template",
                                "type": "text/plain"
                              },
                              "type": "any",
                              "value": "<string>",
                              "key": "scope"
                            },
                            {
                              "description": {
                                "content": "The name of the metadata template",
                                "type": "text/plain"
                              },
                              "type": "any",
                              "value": "<string>",
                              "key": "template_key"
                            }
                          ]
                        },
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "method": "PUT",
                        "auth": {
                          "type": "oauth2"
                        },
                        "body": {
                          "mode": "raw",
                          "raw": "[\n    {\n        \"op\": \"<string>\",\n        \"data\": \"schema type not provided\",\n        \"fieldKeys\": [\n            \"<string>\",\n            \"<string>\"\n        ],\n        \"enumOptionKeys\": [\n            \"<string>\",\n            \"<string>\"\n        ]\n    },\n    {\n        \"op\": \"<string>\",\n        \"data\": \"schema type not provided\",\n        \"fieldKeys\": [\n            \"<string>\",\n            \"<string>\"\n        ],\n        \"enumOptionKeys\": [\n            \"<string>\",\n            \"<string>\"\n        ]\n    }\n]"
                        }
                      },
                      "response": [
                        {
                          "id": "79e62ef8-a52b-431e-9e90-e6281c7dba7e",
                          "name": "Returns the updated metadata template, with the\ncustom template data included.",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "metadata_templates",
                                "<string>",
                                "<string>",
                                "schema"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [],
                              "variable": []
                            },
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              }
                            ],
                            "method": "PUT",
                            "body": {
                              "mode": "raw",
                              "raw": "[\n    {\n        \"op\": \"<string>\",\n        \"data\": \"schema type not provided\",\n        \"fieldKeys\": [\n            \"<string>\",\n            \"<string>\"\n        ],\n        \"enumOptionKeys\": [\n            \"<string>\",\n            \"<string>\"\n        ]\n    },\n    {\n        \"op\": \"<string>\",\n        \"data\": \"schema type not provided\",\n        \"fieldKeys\": [\n            \"<string>\",\n            \"<string>\"\n        ],\n        \"enumOptionKeys\": [\n            \"<string>\",\n            \"<string>\"\n        ]\n    }\n]"
                            }
                          },
                          "status": "OK",
                          "code": 200,
                          "header": [
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n \"scope\": \"<string>\",\n \"templateKey\": \"<string>\",\n \"displayName\": \"<string>\",\n \"hidden\": \"<boolean>\",\n \"fields\": [\n  {\n   \"type\": \"<string>\",\n   \"key\": \"<string>\",\n   \"displayName\": \"<string>\",\n   \"description\": \"<string>\",\n   \"hidden\": \"<boolean>\",\n   \"options\": [\n    {\n     \"id\": \"<string>\",\n     \"key\": \"<string>\"\n    },\n    {\n     \"id\": \"<string>\",\n     \"key\": \"<string>\"\n    }\n   ]\n  },\n  {\n   \"type\": \"<string>\",\n   \"key\": \"<string>\",\n   \"displayName\": \"<string>\",\n   \"description\": \"<string>\",\n   \"hidden\": \"<boolean>\",\n   \"options\": [\n    {\n     \"id\": \"<string>\",\n     \"key\": \"<string>\"\n    },\n    {\n     \"id\": \"<string>\",\n     \"key\": \"<string>\"\n    }\n   ]\n  }\n ],\n \"id\": \"<string>\"\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        },
                        {
                          "id": "0746f66f-07a5-4011-9f0d-754479d413ca",
                          "name": "The request body contains an invalid metadata schema.",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "metadata_templates",
                                "<string>",
                                "<string>",
                                "schema"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [],
                              "variable": []
                            },
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              }
                            ],
                            "method": "PUT",
                            "body": {
                              "mode": "raw",
                              "raw": "[\n    {\n        \"op\": \"<string>\",\n        \"data\": \"schema type not provided\",\n        \"fieldKeys\": [\n            \"<string>\",\n            \"<string>\"\n        ],\n        \"enumOptionKeys\": [\n            \"<string>\",\n            \"<string>\"\n        ]\n    },\n    {\n        \"op\": \"<string>\",\n        \"data\": \"schema type not provided\",\n        \"fieldKeys\": [\n            \"<string>\",\n            \"<string>\"\n        ],\n        \"enumOptionKeys\": [\n            \"<string>\",\n            \"<string>\"\n        ]\n    }\n]"
                            }
                          },
                          "status": "Bad Request",
                          "code": 400,
                          "header": [
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        },
                        {
                          "id": "965b283f-e7ce-49a9-9eef-4725aae9b400",
                          "name": "The request body contains a scope that the user is not\nallowed to create templates for.",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "metadata_templates",
                                "<string>",
                                "<string>",
                                "schema"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [],
                              "variable": []
                            },
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              }
                            ],
                            "method": "PUT",
                            "body": {
                              "mode": "raw",
                              "raw": "[\n    {\n        \"op\": \"<string>\",\n        \"data\": \"schema type not provided\",\n        \"fieldKeys\": [\n            \"<string>\",\n            \"<string>\"\n        ],\n        \"enumOptionKeys\": [\n            \"<string>\",\n            \"<string>\"\n        ]\n    },\n    {\n        \"op\": \"<string>\",\n        \"data\": \"schema type not provided\",\n        \"fieldKeys\": [\n            \"<string>\",\n            \"<string>\"\n        ],\n        \"enumOptionKeys\": [\n            \"<string>\",\n            \"<string>\"\n        ]\n    }\n]"
                            }
                          },
                          "status": "Forbidden",
                          "code": 403,
                          "header": [
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        },
                        {
                          "id": "59a2c0e3-1543-4da0-b366-30d7192417ab",
                          "name": "The requested template could not be found",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "metadata_templates",
                                "<string>",
                                "<string>",
                                "schema"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [],
                              "variable": []
                            },
                            "header": [
                              {
                                "key": "Content-Type",
                                "value": "application/json"
                              }
                            ],
                            "method": "PUT",
                            "body": {
                              "mode": "raw",
                              "raw": "[\n    {\n        \"op\": \"<string>\",\n        \"data\": \"schema type not provided\",\n        \"fieldKeys\": [\n            \"<string>\",\n            \"<string>\"\n        ],\n        \"enumOptionKeys\": [\n            \"<string>\",\n            \"<string>\"\n        ]\n    },\n    {\n        \"op\": \"<string>\",\n        \"data\": \"schema type not provided\",\n        \"fieldKeys\": [\n            \"<string>\",\n            \"<string>\"\n        ],\n        \"enumOptionKeys\": [\n            \"<string>\",\n            \"<string>\"\n        ]\n    }\n]"
                            }
                          },
                          "status": "Not Found",
                          "code": 404,
                          "header": [
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        }
                      ],
                      "event": []
                    },
                    {
                      "id": "c2a4dfa8-fc2a-454f-869c-75d823ab8b27",
                      "name": "Delete metadata template",
                      "request": {
                        "name": "Delete metadata template",
                        "description": {
                          "content": "Delete a metadata template and its instances.\nThis deletion is permanent and can not be reversed.",
                          "type": "text/plain"
                        },
                        "url": {
                          "path": [
                            "metadata_templates",
                            ":scope",
                            ":template_key",
                            "schema"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "description": {
                                "content": "The scope of the metadata template",
                                "type": "text/plain"
                              },
                              "type": "any",
                              "value": "<string>",
                              "key": "scope"
                            },
                            {
                              "description": {
                                "content": "The name of the metadata template",
                                "type": "text/plain"
                              },
                              "type": "any",
                              "value": "<string>",
                              "key": "template_key"
                            }
                          ]
                        },
                        "method": "DELETE",
                        "auth": {
                          "type": "oauth2"
                        }
                      },
                      "response": [
                        {
                          "id": "8b1ec191-ed54-40d6-ad26-880eb460340b",
                          "name": "Returns an empty response when the metadata\ntemplate is successfully deleted.",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "metadata_templates",
                                "<string>",
                                "<string>",
                                "schema"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [],
                              "variable": []
                            },
                            "method": "DELETE",
                            "body": {}
                          },
                          "status": "No Content",
                          "code": 204,
                          "header": [
                            {
                              "key": "Content-Type",
                              "value": "text/plain"
                            }
                          ],
                          "body": "",
                          "cookie": [],
                          "_postman_previewlanguage": "text"
                        },
                        {
                          "id": "6b85ad5c-9615-4036-bd65-59afdececf42",
                          "name": "Request body contains an invalid metadata schema.",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "metadata_templates",
                                "<string>",
                                "<string>",
                                "schema"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [],
                              "variable": []
                            },
                            "method": "DELETE",
                            "body": {}
                          },
                          "status": "Bad Request",
                          "code": 400,
                          "header": [
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        },
                        {
                          "id": "be569c32-7451-49bf-9654-31b9fe62420f",
                          "name": "Request body contains a scope that the user is not allowed to\ncreate a template for.",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "metadata_templates",
                                "<string>",
                                "<string>",
                                "schema"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [],
                              "variable": []
                            },
                            "method": "DELETE",
                            "body": {}
                          },
                          "status": "Forbidden",
                          "code": 403,
                          "header": [
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        }
                      ],
                      "event": []
                    }
                  ],
                  "event": []
                }
              ],
              "event": []
            }
          ],
          "event": []
        },
        {
          "id": "9b2f47a7-2c6b-45ef-ba30-1a6c42d38ce3",
          "name": "Get a template by ID",
          "request": {
            "name": "Get a template by ID",
            "description": {
              "content": "Retrieves a metadata template by its ID.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "metadata_templates",
                ":template_id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "The ID of the template",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "template_id"
                }
              ]
            },
            "method": "GET",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "fae3683d-ca61-4e95-bd25-8bc52c757f7a",
              "name": "Returns the metadata template matching the `scope`\nand `template` name.",
              "originalRequest": {
                "url": {
                  "path": [
                    "metadata_templates",
                    "<string>"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"scope\": \"<string>\",\n \"templateKey\": \"<string>\",\n \"displayName\": \"<string>\",\n \"hidden\": \"<boolean>\",\n \"fields\": [\n  {\n   \"type\": \"<string>\",\n   \"key\": \"<string>\",\n   \"displayName\": \"<string>\",\n   \"description\": \"<string>\",\n   \"hidden\": \"<boolean>\",\n   \"options\": [\n    {\n     \"id\": \"<string>\",\n     \"key\": \"<string>\"\n    },\n    {\n     \"id\": \"<string>\",\n     \"key\": \"<string>\"\n    }\n   ]\n  },\n  {\n   \"type\": \"<string>\",\n   \"key\": \"<string>\",\n   \"displayName\": \"<string>\",\n   \"description\": \"<string>\",\n   \"hidden\": \"<boolean>\",\n   \"options\": [\n    {\n     \"id\": \"<string>\",\n     \"key\": \"<string>\"\n    },\n    {\n     \"id\": \"<string>\",\n     \"key\": \"<string>\"\n    }\n   ]\n  }\n ],\n \"id\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "693ef8dc-4c48-4e99-8925-b9af22a53307",
          "name": "List enterprise templates",
          "request": {
            "name": "List enterprise templates",
            "description": {
              "content": "Used to retrieve all metadata templates within a user's enterprise",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "metadata_templates",
                "enterprise"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "description": "The position marker at which to begin the response.\n\nThis requires `usemarker` to be set to true.",
                  "key": "marker",
                  "value": "<string>"
                },
                {
                  "description": "The maximum number of items to return per page.",
                  "key": "limit",
                  "value": "100"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "4aab053f-5643-4251-987b-7f69a639746a",
              "name": "Returns all of the metadata templates within an enterprise\nand their corresponding schema.",
              "originalRequest": {
                "url": {
                  "path": [
                    "metadata_templates",
                    "enterprise"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "marker",
                      "value": "<string>"
                    },
                    {
                      "key": "limit",
                      "value": "100"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"limit\": \"<long>\",\n \"next_marker\": \"<long>\",\n \"prev_marker\": \"<long>\",\n \"entries\": [\n  {\n   \"scope\": \"<string>\",\n   \"templateKey\": \"<string>\",\n   \"displayName\": \"<string>\",\n   \"hidden\": \"<boolean>\",\n   \"fields\": [\n    {\n     \"type\": \"<string>\",\n     \"key\": \"<string>\",\n     \"displayName\": \"<string>\",\n     \"description\": \"<string>\",\n     \"hidden\": \"<boolean>\",\n     \"options\": [\n      {\n       \"id\": \"<string>\",\n       \"key\": \"<string>\"\n      },\n      {\n       \"id\": \"<string>\",\n       \"key\": \"<string>\"\n      }\n     ]\n    },\n    {\n     \"type\": \"<string>\",\n     \"key\": \"<string>\",\n     \"displayName\": \"<string>\",\n     \"description\": \"<string>\",\n     \"hidden\": \"<boolean>\",\n     \"options\": [\n      {\n       \"id\": \"<string>\",\n       \"key\": \"<string>\"\n      },\n      {\n       \"id\": \"<string>\",\n       \"key\": \"<string>\"\n      }\n     ]\n    }\n   ],\n   \"id\": \"<string>\"\n  },\n  {\n   \"scope\": \"<string>\",\n   \"templateKey\": \"<string>\",\n   \"displayName\": \"<string>\",\n   \"hidden\": \"<boolean>\",\n   \"fields\": [\n    {\n     \"type\": \"<string>\",\n     \"key\": \"<string>\",\n     \"displayName\": \"<string>\",\n     \"description\": \"<string>\",\n     \"hidden\": \"<boolean>\",\n     \"options\": [\n      {\n       \"id\": \"<string>\",\n       \"key\": \"<string>\"\n      },\n      {\n       \"id\": \"<string>\",\n       \"key\": \"<string>\"\n      }\n     ]\n    },\n    {\n     \"type\": \"<string>\",\n     \"key\": \"<string>\",\n     \"displayName\": \"<string>\",\n     \"description\": \"<string>\",\n     \"hidden\": \"<boolean>\",\n     \"options\": [\n      {\n       \"id\": \"<string>\",\n       \"key\": \"<string>\"\n      },\n      {\n       \"id\": \"<string>\",\n       \"key\": \"<string>\"\n      }\n     ]\n    }\n   ],\n   \"id\": \"<string>\"\n  }\n ]\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "b13475b0-1d75-45fd-9f93-87be38a19356",
          "name": "Create metadata template",
          "request": {
            "name": "Create metadata template",
            "description": {
              "content": "Creates a new metadata template that can be applied to files and folders.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "metadata_templates",
                "schema"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": {
              "type": "oauth2"
            },
            "body": {
              "mode": "raw",
              "raw": "{\n    \"scope\": \"<string>\",\n    \"templateKey\": \"<string>\",\n    \"displayName\": \"<string>\",\n    \"hidden\": \"<boolean>\",\n    \"fields\": [\n        {\n            \"type\": \"<string>\",\n            \"key\": \"<string>\",\n            \"displayName\": \"<string>\",\n            \"description\": \"<string>\",\n            \"hidden\": \"<boolean>\",\n            \"options\": [\n                {\n                    \"id\": \"<string>\",\n                    \"key\": \"<string>\"\n                },\n                {\n                    \"id\": \"<string>\",\n                    \"key\": \"<string>\"\n                }\n            ]\n        },\n        {\n            \"type\": \"<string>\",\n            \"key\": \"<string>\",\n            \"displayName\": \"<string>\",\n            \"description\": \"<string>\",\n            \"hidden\": \"<boolean>\",\n            \"options\": [\n                {\n                    \"id\": \"<string>\",\n                    \"key\": \"<string>\"\n                },\n                {\n                    \"id\": \"<string>\",\n                    \"key\": \"<string>\"\n                }\n            ]\n        }\n    ]\n}"
            }
          },
          "response": [
            {
              "id": "fca8e4bd-3623-49dc-b48c-fad32692efcc",
              "name": "The schema representing the metadata template created.",
              "originalRequest": {
                "url": {
                  "path": [
                    "metadata_templates",
                    "schema"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"scope\": \"<string>\",\n    \"templateKey\": \"<string>\",\n    \"displayName\": \"<string>\",\n    \"hidden\": \"<boolean>\",\n    \"fields\": [\n        {\n            \"type\": \"<string>\",\n            \"key\": \"<string>\",\n            \"displayName\": \"<string>\",\n            \"description\": \"<string>\",\n            \"hidden\": \"<boolean>\",\n            \"options\": [\n                {\n                    \"id\": \"<string>\",\n                    \"key\": \"<string>\"\n                },\n                {\n                    \"id\": \"<string>\",\n                    \"key\": \"<string>\"\n                }\n            ]\n        },\n        {\n            \"type\": \"<string>\",\n            \"key\": \"<string>\",\n            \"displayName\": \"<string>\",\n            \"description\": \"<string>\",\n            \"hidden\": \"<boolean>\",\n            \"options\": [\n                {\n                    \"id\": \"<string>\",\n                    \"key\": \"<string>\"\n                },\n                {\n                    \"id\": \"<string>\",\n                    \"key\": \"<string>\"\n                }\n            ]\n        }\n    ]\n}"
                }
              },
              "status": "Created",
              "code": 201,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"scope\": \"<string>\",\n \"templateKey\": \"<string>\",\n \"displayName\": \"<string>\",\n \"hidden\": \"<boolean>\",\n \"fields\": [\n  {\n   \"type\": \"<string>\",\n   \"key\": \"<string>\",\n   \"displayName\": \"<string>\",\n   \"description\": \"<string>\",\n   \"hidden\": \"<boolean>\",\n   \"options\": [\n    {\n     \"id\": \"<string>\",\n     \"key\": \"<string>\"\n    },\n    {\n     \"id\": \"<string>\",\n     \"key\": \"<string>\"\n    }\n   ]\n  },\n  {\n   \"type\": \"<string>\",\n   \"key\": \"<string>\",\n   \"displayName\": \"<string>\",\n   \"description\": \"<string>\",\n   \"hidden\": \"<boolean>\",\n   \"options\": [\n    {\n     \"id\": \"<string>\",\n     \"key\": \"<string>\"\n    },\n    {\n     \"id\": \"<string>\",\n     \"key\": \"<string>\"\n    }\n   ]\n  }\n ],\n \"id\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "29a4bfcc-e4c2-4480-85cf-cd6eadf1b37a",
              "name": "Request body contains an invalid metadata schema.",
              "originalRequest": {
                "url": {
                  "path": [
                    "metadata_templates",
                    "schema"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"scope\": \"<string>\",\n    \"templateKey\": \"<string>\",\n    \"displayName\": \"<string>\",\n    \"hidden\": \"<boolean>\",\n    \"fields\": [\n        {\n            \"type\": \"<string>\",\n            \"key\": \"<string>\",\n            \"displayName\": \"<string>\",\n            \"description\": \"<string>\",\n            \"hidden\": \"<boolean>\",\n            \"options\": [\n                {\n                    \"id\": \"<string>\",\n                    \"key\": \"<string>\"\n                },\n                {\n                    \"id\": \"<string>\",\n                    \"key\": \"<string>\"\n                }\n            ]\n        },\n        {\n            \"type\": \"<string>\",\n            \"key\": \"<string>\",\n            \"displayName\": \"<string>\",\n            \"description\": \"<string>\",\n            \"hidden\": \"<boolean>\",\n            \"options\": [\n                {\n                    \"id\": \"<string>\",\n                    \"key\": \"<string>\"\n                },\n                {\n                    \"id\": \"<string>\",\n                    \"key\": \"<string>\"\n                }\n            ]\n        }\n    ]\n}"
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "f362c9bf-d03c-4b8e-8769-977ff038594a",
              "name": "Request body contains a scope that the user is not allowed to\ncreate a template for.",
              "originalRequest": {
                "url": {
                  "path": [
                    "metadata_templates",
                    "schema"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"scope\": \"<string>\",\n    \"templateKey\": \"<string>\",\n    \"displayName\": \"<string>\",\n    \"hidden\": \"<boolean>\",\n    \"fields\": [\n        {\n            \"type\": \"<string>\",\n            \"key\": \"<string>\",\n            \"displayName\": \"<string>\",\n            \"description\": \"<string>\",\n            \"hidden\": \"<boolean>\",\n            \"options\": [\n                {\n                    \"id\": \"<string>\",\n                    \"key\": \"<string>\"\n                },\n                {\n                    \"id\": \"<string>\",\n                    \"key\": \"<string>\"\n                }\n            ]\n        },\n        {\n            \"type\": \"<string>\",\n            \"key\": \"<string>\",\n            \"displayName\": \"<string>\",\n            \"description\": \"<string>\",\n            \"hidden\": \"<boolean>\",\n            \"options\": [\n                {\n                    \"id\": \"<string>\",\n                    \"key\": \"<string>\"\n                },\n                {\n                    \"id\": \"<string>\",\n                    \"key\": \"<string>\"\n                }\n            ]\n        }\n    ]\n}"
                }
              },
              "status": "Forbidden",
              "code": 403,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        }
      ],
      "event": []
    },
    {
      "id": "ab72f005-aa20-4776-a289-3e90de0c50fc",
      "name": "metadata cascade policies",
      "item": [
        {
          "id": "5ff0abf2-fad6-4adb-8630-7e38b07c8eec",
          "name": "List cascade policies",
          "request": {
            "name": "List cascade policies",
            "description": {
              "content": "Retrieve a collection of metadata cascade policies\nwithin a given folder for the current enterprise.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "metadata_cascade_policies"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "description": "Specifies which folder to return policies for.",
                  "key": "folder_id",
                  "value": "<string>"
                },
                {
                  "description": "The ID of the enterprise ID for which to find metadata\ncascade policies. If not specified, it defaults to the\ncurrent enterprise.",
                  "key": "owner_enterprise_id",
                  "value": "<string>"
                },
                {
                  "description": "The position marker at which to begin the response.\n\nThis requires `usemarker` to be set to true.",
                  "key": "marker",
                  "value": "<string>"
                },
                {
                  "description": "The offset of the item at which to begin the response.",
                  "key": "offset",
                  "value": "<long>"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "53ee8a4e-294b-430b-8e71-f4a3faaf0c91",
              "name": "Returns a list of metadata cascade policies",
              "originalRequest": {
                "url": {
                  "path": [
                    "metadata_cascade_policies"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "folder_id",
                      "value": "<string>"
                    },
                    {
                      "key": "owner_enterprise_id",
                      "value": "<string>"
                    },
                    {
                      "key": "marker",
                      "value": "<string>"
                    },
                    {
                      "key": "offset",
                      "value": "<long>"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"limit\": \"<long>\",\n \"next_marker\": \"<long>\",\n \"prev_marker\": \"<long>\",\n \"entries\": [\n  {\n   \"id\": \"<string>\",\n   \"owner_enterprise\": {\n    \"type\": \"<string>\",\n    \"id\": \"<string>\"\n   },\n   \"parent\": {\n    \"type\": \"<string>\",\n    \"id\": \"<string>\"\n   },\n   \"scope\": \"<string>\",\n   \"templateKey\": \"<string>\"\n  },\n  {\n   \"id\": \"<string>\",\n   \"owner_enterprise\": {\n    \"type\": \"<string>\",\n    \"id\": \"<string>\"\n   },\n   \"parent\": {\n    \"type\": \"<string>\",\n    \"id\": \"<string>\"\n   },\n   \"scope\": \"<string>\",\n   \"templateKey\": \"<string>\"\n  }\n ]\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "4a0450e1-a723-49ae-8bab-90f725b3031f",
          "name": "Create cascade policy",
          "request": {
            "name": "Create cascade policy",
            "description": {
              "content": "Creates a new metadata cascade policy that applies a given\nmetadata template to a given folder and automatically\ncascades it down to its children.\n\nIn order for the policy to work, a metadata instance must first\nbe applied to the folder.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "metadata_cascade_policies"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": {
              "type": "oauth2"
            },
            "body": {
              "mode": "raw",
              "raw": "{\n    \"folder_id\": \"<string>\",\n    \"scope\": \"<string>\",\n    \"templateKey\": \"<string>\"\n}"
            }
          },
          "response": [
            {
              "id": "6c2fa93b-3c48-4664-b74e-661ebb440f87",
              "name": "Returns a new of metadata cascade policy",
              "originalRequest": {
                "url": {
                  "path": [
                    "metadata_cascade_policies"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"folder_id\": \"<string>\",\n    \"scope\": \"<string>\",\n    \"templateKey\": \"<string>\"\n}"
                }
              },
              "status": "Created",
              "code": 201,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"id\": \"<string>\",\n \"owner_enterprise\": {\n  \"type\": \"<string>\",\n  \"id\": \"<string>\"\n },\n \"parent\": {\n  \"type\": \"<string>\",\n  \"id\": \"<string>\"\n },\n \"scope\": \"<string>\",\n \"templateKey\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "3467ad84-6f30-4047-bcf7-4a5c706d6116",
          "name": "{metadata cascade policy id}",
          "item": [
            {
              "id": "e64f4fba-fac3-4807-b9f3-480f0dff85c1",
              "name": "Get cascade policy",
              "request": {
                "name": "Get cascade policy",
                "description": {
                  "content": "Retrieve a metadata cascade policy.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "metadata_cascade_policies",
                    ":metadata_cascade_policy_id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "description": {
                        "content": "The ID of the metadata cascade policy.",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "<string>",
                      "key": "metadata_cascade_policy_id"
                    }
                  ]
                },
                "method": "GET",
                "auth": {
                  "type": "oauth2"
                }
              },
              "response": [
                {
                  "id": "52470613-2661-4db8-8d68-2152fd5b8fad",
                  "name": "Returns a list of metadata cascade policies",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "metadata_cascade_policies",
                        "<string>"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "method": "GET",
                    "body": {}
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n \"id\": \"<string>\",\n \"owner_enterprise\": {\n  \"type\": \"<string>\",\n  \"id\": \"<string>\"\n },\n \"parent\": {\n  \"type\": \"<string>\",\n  \"id\": \"<string>\"\n },\n \"scope\": \"<string>\",\n \"templateKey\": \"<string>\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": []
            },
            {
              "id": "d122316c-3673-4f2a-8a6a-9a57ef7dcc6f",
              "name": "Delete cascade policy",
              "request": {
                "name": "Delete cascade policy",
                "description": {
                  "content": "Deletes a metadata cascade policy.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "metadata_cascade_policies",
                    ":metadata_cascade_policy_id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "description": {
                        "content": "The ID of the metadata cascade policy.",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "<string>",
                      "key": "metadata_cascade_policy_id"
                    }
                  ]
                },
                "method": "DELETE",
                "auth": {
                  "type": "oauth2"
                }
              },
              "response": [
                {
                  "id": "5162021b-51a9-43ae-bff2-68856d2d0506",
                  "name": "Returns an empty response when the policy\nis successfully deleted.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "metadata_cascade_policies",
                        "<string>"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "No Content",
                  "code": 204,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "_postman_previewlanguage": "text"
                }
              ],
              "event": []
            },
            {
              "id": "f9ff64dc-9295-48b8-9dc1-0082cebf00f3",
              "name": "Force apply cascade policy",
              "request": {
                "name": "Force apply cascade policy",
                "description": {
                  "content": "If a policy already exists on a folder, this will apply that policy\nto all existing files and sub-folders within the target folder.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "metadata_cascade_policies",
                    ":metadata_cascade_policy_id",
                    "apply"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "description": {
                        "content": "The ID of the cascade policy.",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "<string>",
                      "key": "metadata_cascade_policy_id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "auth": {
                  "type": "oauth2"
                },
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"conflict_resolution\": \"<string>\"\n}"
                }
              },
              "response": [
                {
                  "id": "84b35148-06e4-49ad-8f64-17879b90bd53",
                  "name": "Returns the metadata cascade policy when the policy has been\napplied.\n\nThe metadata cascade operation will be kicked off asynchronously.\nThe API call will return right away but before the cascade operation\nis complete. There is currently no way to check for when this\noperation has finished.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "metadata_cascade_policies",
                        "<string>",
                        "apply"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "method": "POST",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"conflict_resolution\": \"<string>\"\n}"
                    }
                  },
                  "status": "Accepted",
                  "code": 202,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n \"id\": \"<string>\",\n \"owner_enterprise\": {\n  \"type\": \"<string>\",\n  \"id\": \"<string>\"\n },\n \"parent\": {\n  \"type\": \"<string>\",\n  \"id\": \"<string>\"\n },\n \"scope\": \"<string>\",\n \"templateKey\": \"<string>\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": []
            }
          ],
          "event": []
        }
      ],
      "event": []
    },
    {
      "id": "5aa8912e-655c-4c7b-aadb-a66d5c1b13a5",
      "name": "comments",
      "item": [
        {
          "id": "d8452a3b-be19-4e56-ac68-a5813ec4dc8f",
          "name": "Create comment",
          "request": {
            "name": "Create comment",
            "description": {
              "content": "Adds a comment comment by the user to a specific file, or\nas a reply to an other comment.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "comments"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response, unless explicitly specified.",
                  "key": "fields",
                  "value": "<string>,<string>"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": {
              "type": "oauth2"
            },
            "body": {
              "mode": "raw",
              "raw": "{\n    \"message\": \"<string>\",\n    \"tagged_message\": \"<string>\",\n    \"item\": {\n        \"id\": \"<string>\",\n        \"type\": \"<string>\"\n    }\n}"
            }
          },
          "response": [
            {
              "id": "b00c47ce-5e59-4f86-a965-2b9a763809bb",
              "name": "Returns the newly created comment object.\n\n[Some fields are optional](#comment) and need to be explicitly\nrequested using the [fields](#post_comments--request--fields) parameter.",
              "originalRequest": {
                "url": {
                  "path": [
                    "comments"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "<string>,<string>"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"message\": \"<string>\",\n    \"tagged_message\": \"<string>\",\n    \"item\": {\n        \"id\": \"<string>\",\n        \"type\": \"<string>\"\n    }\n}"
                }
              },
              "status": "Created",
              "code": 201,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"is_reply_comment\": \"<boolean>\",\n \"message\": \"<string>\",\n \"created_by\": {\n  \"id\": \"<string>\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"created_at\": \"<dateTime>\",\n \"modified_at\": \"<dateTime>\",\n \"item\": {\n  \"id\": \"<string>\"\n },\n \"tagged_message\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "c7b1f9d5-2fd6-46e3-91a6-3a647c965474",
          "name": "{comment id}",
          "item": [
            {
              "id": "23c3187f-aa6f-47ed-a89f-a77825805f3d",
              "name": "Get comment",
              "request": {
                "name": "Get comment",
                "description": {
                  "content": "Retrieves the message and metadata for a specific comment, as well\nas information on the user who created the comment.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "comments",
                    ":comment_id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response, unless explicitly specified.",
                      "key": "fields",
                      "value": "<string>,<string>"
                    }
                  ],
                  "variable": [
                    {
                      "description": {
                        "content": "The ID of the comment.",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "<string>",
                      "key": "comment_id"
                    }
                  ]
                },
                "method": "GET",
                "auth": {
                  "type": "oauth2"
                }
              },
              "response": [
                {
                  "id": "8a77b9ce-d237-4c91-92db-adb2d34553c9",
                  "name": "Returns a full comment object.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "comments",
                        "<string>"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "fields",
                          "value": "<string>,<string>"
                        }
                      ],
                      "variable": []
                    },
                    "method": "GET",
                    "body": {}
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"is_reply_comment\": \"<boolean>\",\n \"message\": \"<string>\",\n \"created_by\": {\n  \"id\": \"<string>\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"created_at\": \"<dateTime>\",\n \"modified_at\": \"<dateTime>\",\n \"item\": {\n  \"id\": \"<string>\"\n },\n \"tagged_message\": \"<string>\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": []
            },
            {
              "id": "6b526238-849b-4d04-808d-a1f0334b6379",
              "name": "Update comment",
              "request": {
                "name": "Update comment",
                "description": {
                  "content": "Update the message of a comment.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "comments",
                    ":comment_id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response, unless explicitly specified.",
                      "key": "fields",
                      "value": "<string>,<string>"
                    }
                  ],
                  "variable": [
                    {
                      "description": {
                        "content": "The ID of the comment.",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "<string>",
                      "key": "comment_id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "auth": {
                  "type": "oauth2"
                },
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"message\": \"<string>\"\n}"
                }
              },
              "response": [
                {
                  "id": "4fd59c42-e34a-44cb-b624-14350faeabf2",
                  "name": "Returns the updated comment object.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "comments",
                        "<string>"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "fields",
                          "value": "<string>,<string>"
                        }
                      ],
                      "variable": []
                    },
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "method": "PUT",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"message\": \"<string>\"\n}"
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"is_reply_comment\": \"<boolean>\",\n \"message\": \"<string>\",\n \"created_by\": {\n  \"id\": \"<string>\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"created_at\": \"<dateTime>\",\n \"modified_at\": \"<dateTime>\",\n \"item\": {\n  \"id\": \"<string>\"\n },\n \"tagged_message\": \"<string>\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": []
            },
            {
              "id": "28d55666-cb78-4022-9b16-9665a9a08504",
              "name": "Delete comment",
              "request": {
                "name": "Delete comment",
                "description": {
                  "content": "Permanently deletes a comment.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "comments",
                    ":comment_id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "description": {
                        "content": "The ID of the comment.",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "<string>",
                      "key": "comment_id"
                    }
                  ]
                },
                "method": "DELETE",
                "auth": {
                  "type": "oauth2"
                }
              },
              "response": [
                {
                  "id": "09cf7473-f473-4f83-86a6-e8785f3811ca",
                  "name": "Returns an empty response when the comment has been deleted.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "comments",
                        "<string>"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "No Content",
                  "code": 204,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "_postman_previewlanguage": "text"
                }
              ],
              "event": []
            }
          ],
          "event": []
        }
      ],
      "event": []
    },
    {
      "id": "10a3fc14-6cba-47b4-a158-7e61cd471833",
      "name": "collaborations",
      "item": [
        {
          "id": "eb15ea9d-61c7-4796-aad6-615b361f3f04",
          "name": "List pending collaborations",
          "request": {
            "name": "List pending collaborations",
            "description": {
              "content": "Retrieves all pending collaboration invites for this user.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "collaborations"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "description": "The status of the collaborations to retrieve",
                  "key": "status",
                  "value": "<string>"
                },
                {
                  "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response, unless explicitly specified.",
                  "key": "fields",
                  "value": "<string>,<string>"
                },
                {
                  "description": "The offset of the item at which to begin the response.",
                  "key": "offset",
                  "value": "<long>"
                },
                {
                  "description": "The maximum number of items to return per page.",
                  "key": "limit",
                  "value": "100"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "993e8765-d968-407b-b837-a4fc580f7fcc",
              "name": "Returns a collection of pending collaboration objects.\n\nIf the user has no pending collaborations, the collection\nwill be empty.",
              "originalRequest": {
                "url": {
                  "path": [
                    "collaborations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "status",
                      "value": "<string>"
                    },
                    {
                      "key": "fields",
                      "value": "<string>,<string>"
                    },
                    {
                      "key": "offset",
                      "value": "<long>"
                    },
                    {
                      "key": "limit",
                      "value": "100"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"total_count\": \"<long>\",\n \"limit\": \"<long>\",\n \"offset\": \"<long>\",\n \"order\": [\n  {\n   \"by\": \"<string>\",\n   \"direction\": \"<string>\"\n  },\n  {\n   \"by\": \"<string>\",\n   \"direction\": \"<string>\"\n  }\n ],\n \"entries\": [\n  {\n   \"id\": \"<string>\",\n   \"type\": \"<string>\",\n   \"item\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\"\n   },\n   \"accessible_by\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"invite_email\": \"<string>\",\n   \"role\": \"<string>\",\n   \"expires_at\": \"<dateTime>\",\n   \"can_view_path\": \"<boolean>\",\n   \"status\": \"<string>\",\n   \"acknowledged_at\": \"<dateTime>\",\n   \"created_by\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"created_at\": \"<dateTime>\",\n   \"modified_at\": \"<dateTime>\",\n   \"acceptance_requirements_status\": {\n    \"terms_of_service_requirement\": {\n     \"is_accepted\": \"<boolean>\",\n     \"terms_of_service\": {\n      \"id\": \"<string>\",\n      \"type\": \"<string>\"\n     }\n    },\n    \"strong_password_requirement\": {\n     \"enterprise_has_strong_password_required_for_external_users\": \"<boolean>\",\n     \"user_has_strong_password\": \"<boolean>\"\n    },\n    \"two_factor_authentication_requirement\": {\n     \"enterprise_has_two_factor_auth_enabled\": \"<boolean>\",\n     \"user_has_two_factor_authentication_enabled\": \"<boolean>\"\n    }\n   }\n  },\n  {\n   \"id\": \"<string>\",\n   \"type\": \"<string>\",\n   \"item\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\"\n   },\n   \"accessible_by\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"invite_email\": \"<string>\",\n   \"role\": \"<string>\",\n   \"expires_at\": \"<dateTime>\",\n   \"can_view_path\": \"<boolean>\",\n   \"status\": \"<string>\",\n   \"acknowledged_at\": \"<dateTime>\",\n   \"created_by\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"created_at\": \"<dateTime>\",\n   \"modified_at\": \"<dateTime>\",\n   \"acceptance_requirements_status\": {\n    \"terms_of_service_requirement\": {\n     \"is_accepted\": \"<boolean>\",\n     \"terms_of_service\": {\n      \"id\": \"<string>\",\n      \"type\": \"<string>\"\n     }\n    },\n    \"strong_password_requirement\": {\n     \"enterprise_has_strong_password_required_for_external_users\": \"<boolean>\",\n     \"user_has_strong_password\": \"<boolean>\"\n    },\n    \"two_factor_authentication_requirement\": {\n     \"enterprise_has_two_factor_auth_enabled\": \"<boolean>\",\n     \"user_has_two_factor_authentication_enabled\": \"<boolean>\"\n    }\n   }\n  }\n ]\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "007037f0-5e63-4a1f-b0e2-6bbfaa027b0a",
          "name": "Create collaboration",
          "request": {
            "name": "Create collaboration",
            "description": {
              "content": "Adds a collaboration for a single user or a single group to a file\nor folder.\n\nCollaborations can be created using email address, user IDs, or a\ngroup IDs.\n\nIf a collaboration is being created with a group, access to\nthis endpoint is dependent on the group's ability to be invited.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "collaborations"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response, unless explicitly specified.",
                  "key": "fields",
                  "value": "<string>,<string>"
                },
                {
                  "description": "Determines if users should receive email notification\nfor the action performed.",
                  "key": "notify",
                  "value": "<boolean>"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": {
              "type": "oauth2"
            },
            "body": {
              "mode": "raw",
              "raw": "{\n    \"item\": {\n        \"id\": \"<string>\",\n        \"type\": \"<string>\"\n    },\n    \"accessible_by\": {\n        \"type\": \"<string>\",\n        \"id\": \"<string>\",\n        \"login\": \"<string>\"\n    },\n    \"role\": \"<string>\",\n    \"can_view_path\": \"<boolean>\"\n}"
            }
          },
          "response": [
            {
              "id": "abc56cb0-cf0d-4fa5-8139-1a8c0a69e062",
              "name": "Returns a new collaboration object.",
              "originalRequest": {
                "url": {
                  "path": [
                    "collaborations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "<string>,<string>"
                    },
                    {
                      "key": "notify",
                      "value": "<boolean>"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"item\": {\n        \"id\": \"<string>\",\n        \"type\": \"<string>\"\n    },\n    \"accessible_by\": {\n        \"type\": \"<string>\",\n        \"id\": \"<string>\",\n        \"login\": \"<string>\"\n    },\n    \"role\": \"<string>\",\n    \"can_view_path\": \"<boolean>\"\n}"
                }
              },
              "status": "Created",
              "code": 201,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"item\": {\n  \"id\": \"<string>\",\n  \"type\": \"<string>\",\n  \"sequence_id\": \"<string>\",\n  \"etag\": \"<string>\",\n  \"name\": \"<string>\"\n },\n \"accessible_by\": {\n  \"id\": \"<string>\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"invite_email\": \"<string>\",\n \"role\": \"<string>\",\n \"expires_at\": \"<dateTime>\",\n \"can_view_path\": \"<boolean>\",\n \"status\": \"<string>\",\n \"acknowledged_at\": \"<dateTime>\",\n \"created_by\": {\n  \"id\": \"<string>\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"created_at\": \"<dateTime>\",\n \"modified_at\": \"<dateTime>\",\n \"acceptance_requirements_status\": {\n  \"terms_of_service_requirement\": {\n   \"is_accepted\": \"<boolean>\",\n   \"terms_of_service\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\"\n   }\n  },\n  \"strong_password_requirement\": {\n   \"enterprise_has_strong_password_required_for_external_users\": \"<boolean>\",\n   \"user_has_strong_password\": \"<boolean>\"\n  },\n  \"two_factor_authentication_requirement\": {\n   \"enterprise_has_two_factor_auth_enabled\": \"<boolean>\",\n   \"user_has_two_factor_authentication_enabled\": \"<boolean>\"\n  }\n }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "5dfd8627-a2a8-4e7e-bd56-68bd544ab187",
          "name": "{collaboration id}",
          "item": [
            {
              "id": "48e26e6d-d260-489e-95c5-9b898b2d8a30",
              "name": "Get collaboration",
              "request": {
                "name": "Get collaboration",
                "description": {
                  "content": "Retrieves a single collaboration.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "collaborations",
                    ":collaboration_id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response, unless explicitly specified.",
                      "key": "fields",
                      "value": "<string>,<string>"
                    }
                  ],
                  "variable": [
                    {
                      "description": {
                        "content": "The ID of the collaboration",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "<string>",
                      "key": "collaboration_id"
                    }
                  ]
                },
                "method": "GET",
                "auth": {
                  "type": "oauth2"
                }
              },
              "response": [
                {
                  "id": "44b20a4b-d268-4ebb-8b74-81f783878d08",
                  "name": "Returns a collaboration object.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "collaborations",
                        "<string>"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "fields",
                          "value": "<string>,<string>"
                        }
                      ],
                      "variable": []
                    },
                    "method": "GET",
                    "body": {}
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"item\": {\n  \"id\": \"<string>\",\n  \"type\": \"<string>\",\n  \"sequence_id\": \"<string>\",\n  \"etag\": \"<string>\",\n  \"name\": \"<string>\"\n },\n \"accessible_by\": {\n  \"id\": \"<string>\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"invite_email\": \"<string>\",\n \"role\": \"<string>\",\n \"expires_at\": \"<dateTime>\",\n \"can_view_path\": \"<boolean>\",\n \"status\": \"<string>\",\n \"acknowledged_at\": \"<dateTime>\",\n \"created_by\": {\n  \"id\": \"<string>\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"created_at\": \"<dateTime>\",\n \"modified_at\": \"<dateTime>\",\n \"acceptance_requirements_status\": {\n  \"terms_of_service_requirement\": {\n   \"is_accepted\": \"<boolean>\",\n   \"terms_of_service\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\"\n   }\n  },\n  \"strong_password_requirement\": {\n   \"enterprise_has_strong_password_required_for_external_users\": \"<boolean>\",\n   \"user_has_strong_password\": \"<boolean>\"\n  },\n  \"two_factor_authentication_requirement\": {\n   \"enterprise_has_two_factor_auth_enabled\": \"<boolean>\",\n   \"user_has_two_factor_authentication_enabled\": \"<boolean>\"\n  }\n }\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": []
            },
            {
              "id": "a4185481-5e21-4022-89cd-e1936b4733e6",
              "name": "Update collaboration",
              "request": {
                "name": "Update collaboration",
                "description": {
                  "content": "Updates a collaboration.\n\nCan be used to change the owner of an item, or to\naccept collaboration invites.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "collaborations",
                    ":collaboration_id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response, unless explicitly specified.",
                      "key": "fields",
                      "value": "<string>,<string>"
                    }
                  ],
                  "variable": [
                    {
                      "description": {
                        "content": "The ID of the collaboration",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "<string>",
                      "key": "collaboration_id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "auth": {
                  "type": "oauth2"
                },
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"role\": \"<string>\",\n    \"can_view_path\": \"<boolean>\",\n    \"status\": \"<string>\",\n    \"expires_at\": \"<dateTime>\"\n}"
                }
              },
              "response": [
                {
                  "id": "80d05b5c-7b3c-4aad-aba0-cdf5f47e6ff3",
                  "name": "Returns an updated collaboration object unless the owner has changed.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "collaborations",
                        "<string>"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "fields",
                          "value": "<string>,<string>"
                        }
                      ],
                      "variable": []
                    },
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "method": "PUT",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"role\": \"<string>\",\n    \"can_view_path\": \"<boolean>\",\n    \"status\": \"<string>\",\n    \"expires_at\": \"<dateTime>\"\n}"
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"item\": {\n  \"id\": \"<string>\",\n  \"type\": \"<string>\",\n  \"sequence_id\": \"<string>\",\n  \"etag\": \"<string>\",\n  \"name\": \"<string>\"\n },\n \"accessible_by\": {\n  \"id\": \"<string>\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"invite_email\": \"<string>\",\n \"role\": \"<string>\",\n \"expires_at\": \"<dateTime>\",\n \"can_view_path\": \"<boolean>\",\n \"status\": \"<string>\",\n \"acknowledged_at\": \"<dateTime>\",\n \"created_by\": {\n  \"id\": \"<string>\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"created_at\": \"<dateTime>\",\n \"modified_at\": \"<dateTime>\",\n \"acceptance_requirements_status\": {\n  \"terms_of_service_requirement\": {\n   \"is_accepted\": \"<boolean>\",\n   \"terms_of_service\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\"\n   }\n  },\n  \"strong_password_requirement\": {\n   \"enterprise_has_strong_password_required_for_external_users\": \"<boolean>\",\n   \"user_has_strong_password\": \"<boolean>\"\n  },\n  \"two_factor_authentication_requirement\": {\n   \"enterprise_has_two_factor_auth_enabled\": \"<boolean>\",\n   \"user_has_two_factor_authentication_enabled\": \"<boolean>\"\n  }\n }\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "0d4111b1-51a4-4a7f-98d3-989e6df65231",
                  "name": "If the role is changed to `owner`, the collaboration is deleted\nand a new collaboration is created. The previous `owner` of\nthe old collaboration will be a `co-owner` on the new collaboration.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "collaborations",
                        "<string>"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "fields",
                          "value": "<string>,<string>"
                        }
                      ],
                      "variable": []
                    },
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "method": "PUT",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"role\": \"<string>\",\n    \"can_view_path\": \"<boolean>\",\n    \"status\": \"<string>\",\n    \"expires_at\": \"<dateTime>\"\n}"
                    }
                  },
                  "status": "No Content",
                  "code": 204,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"item\": {\n  \"id\": \"<string>\",\n  \"type\": \"<string>\",\n  \"sequence_id\": \"<string>\",\n  \"etag\": \"<string>\",\n  \"name\": \"<string>\"\n },\n \"accessible_by\": {\n  \"id\": \"<string>\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"invite_email\": \"<string>\",\n \"role\": \"<string>\",\n \"expires_at\": \"<dateTime>\",\n \"can_view_path\": \"<boolean>\",\n \"status\": \"<string>\",\n \"acknowledged_at\": \"<dateTime>\",\n \"created_by\": {\n  \"id\": \"<string>\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"created_at\": \"<dateTime>\",\n \"modified_at\": \"<dateTime>\",\n \"acceptance_requirements_status\": {\n  \"terms_of_service_requirement\": {\n   \"is_accepted\": \"<boolean>\",\n   \"terms_of_service\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\"\n   }\n  },\n  \"strong_password_requirement\": {\n   \"enterprise_has_strong_password_required_for_external_users\": \"<boolean>\",\n   \"user_has_strong_password\": \"<boolean>\"\n  },\n  \"two_factor_authentication_requirement\": {\n   \"enterprise_has_two_factor_auth_enabled\": \"<boolean>\",\n   \"user_has_two_factor_authentication_enabled\": \"<boolean>\"\n  }\n }\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": []
            },
            {
              "id": "ab38c226-ba12-4dd0-b35d-33c6a7e0cbce",
              "name": "Delete collaboration",
              "request": {
                "name": "Delete collaboration",
                "description": {
                  "content": "Deletes a single collaboration.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "collaborations",
                    ":collaboration_id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "description": {
                        "content": "The ID of the collaboration",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "<string>",
                      "key": "collaboration_id"
                    }
                  ]
                },
                "method": "DELETE",
                "auth": {
                  "type": "oauth2"
                }
              },
              "response": [
                {
                  "id": "594751e4-d05d-4014-839b-ad48ff99ead2",
                  "name": "A blank response is returned if the collaboration was\nsuccessfully deleted.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "collaborations",
                        "<string>"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "No Content",
                  "code": 204,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "_postman_previewlanguage": "text"
                }
              ],
              "event": []
            }
          ],
          "event": []
        }
      ],
      "event": []
    },
    {
      "id": "1e6a8701-faaa-4a71-8322-0d874dbaebbd",
      "name": "Search for content",
      "request": {
        "name": "Search for content",
        "description": {
          "content": "Searches for items that are available to the user or an entire enterprise.",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "search"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [
            {
              "description": "The string to search for. This query is matched against item names,\ndescriptions, text content of files, and various other fields of\nthe different item types.",
              "key": "query",
              "value": "<string>"
            },
            {
              "description": "Limits search results to a user scope.\n\nDefaults to `user_content` which limits the search to content\navailable to the current user\n\nSetting this to `enterprise_content` widens the search to content\navailable to the entire enterprise. To enable this scope for an\nadministrator, please reach out to support.",
              "key": "scope",
              "value": "<string>"
            },
            {
              "description": "Limits search results to a comma-separated list of\nfile extensions.",
              "key": "file_extensions",
              "value": "<string>"
            },
            {
              "description": "Limits search results to items created within\na given date range.\n\nDate ranges are defined as comma separated RFC3339\ntimestamps.\n\nIf the the start date is omitted (`,2014-05-17T13:35:01-07:00`)\nthe earliest known date will be used as the start date instead.\n\nIf the end date is omitted (`2014-05-15T13:35:01-07:00,`) the\ncurrent date will be used as the end date instead.",
              "key": "created_at_range",
              "value": "<string>"
            },
            {
              "description": "Limits search results to items updated within\na given date range.\n\nDate ranges are defined as comma separated RFC3339\ntimestamps.\n\nIf the she start date is omitted (`,2014-05-17T13:35:01-07:00`)\nthe earliest known date will be used as the start date instead.\n\nIf the end date is omitted (`2014-05-15T13:35:01-07:00,`) the\ncurrent date will be used as the end date instead.",
              "key": "updated_at_range",
              "value": "<string>"
            },
            {
              "description": "Limits search results to items within a given file size\nrange.\n\nFile size ranges are defined as comma separated byte sizes.\n\nThe upper and lower bound can be omitted to create open ranges.",
              "key": "size_range",
              "value": "<string>"
            },
            {
              "description": "Limits search results to items owned\nby the given list of owners.\n\nOwners are defined as a comma separated list of user IDs.",
              "key": "owner_user_ids",
              "value": "<string>"
            },
            {
              "description": "Limits search results to items within the given\nlist of folders.\n\nFolders are defined as a comma separated lists\nof folder IDs.\n\nSearch results will also include items within subfolders.",
              "key": "ancestor_folder_ids",
              "value": "<string>"
            },
            {
              "description": "Limits search results to items with the given\ncontent types.\n\nContent types are defined as a comma separated lists\nof Box recognized content types.",
              "key": "content_types",
              "value": "<string>"
            },
            {
              "description": "Limits search results to items of this type.",
              "key": "type",
              "value": "<string>"
            },
            {
              "description": "Controls if search results include the trash.\n\nDefaults to `non_trashed_only`",
              "key": "trash_content",
              "value": "<string>"
            },
            {
              "description": "Limits search results to items that match the\nmetadata template name and content.",
              "key": "mdfilters",
              "value": "[object Object],[object Object]"
            },
            {
              "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response, unless explicitly specified.",
              "key": "fields",
              "value": "<string>,<string>"
            },
            {
              "description": "The offset of the item at which to begin the response.",
              "key": "offset",
              "value": "<long>"
            },
            {
              "description": "The maximum number of items to return per page.",
              "key": "limit",
              "value": "100"
            }
          ],
          "variable": []
        },
        "method": "GET",
        "auth": {
          "type": "oauth2"
        }
      },
      "response": [
        {
          "id": "93ee6a34-b25d-45b9-bf5b-cb82249fba4d",
          "name": "Returns a collection of search results. If there are no matching\nsearch results, the `entries` array will be empty.",
          "originalRequest": {
            "url": {
              "path": [
                "search"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "query",
                  "value": "<string>"
                },
                {
                  "key": "scope",
                  "value": "<string>"
                },
                {
                  "key": "file_extensions",
                  "value": "<string>"
                },
                {
                  "key": "created_at_range",
                  "value": "<string>"
                },
                {
                  "key": "updated_at_range",
                  "value": "<string>"
                },
                {
                  "key": "size_range",
                  "value": "<string>"
                },
                {
                  "key": "owner_user_ids",
                  "value": "<string>"
                },
                {
                  "key": "ancestor_folder_ids",
                  "value": "<string>"
                },
                {
                  "key": "content_types",
                  "value": "<string>"
                },
                {
                  "key": "type",
                  "value": "<string>"
                },
                {
                  "key": "trash_content",
                  "value": "<string>"
                },
                {
                  "key": "mdfilters",
                  "value": "[object Object],[object Object]"
                },
                {
                  "key": "fields",
                  "value": "<string>,<string>"
                },
                {
                  "key": "offset",
                  "value": "<long>"
                },
                {
                  "key": "limit",
                  "value": "100"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "body": {}
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n \"total_count\": \"<long>\",\n \"limit\": \"<long>\",\n \"offset\": \"<long>\",\n \"order\": [\n  {\n   \"by\": \"<string>\",\n   \"direction\": \"<string>\"\n  },\n  {\n   \"by\": \"<string>\",\n   \"direction\": \"<string>\"\n  }\n ],\n \"entries\": [\n  {\n   \"id\": \"schema type not provided\",\n   \"type\": \"<string>\",\n   \"sequence_id\": \"<string>\",\n   \"etag\": \"<string>\",\n   \"name\": \"<string>\"\n  },\n  {\n   \"id\": \"schema type not provided\",\n   \"type\": \"<string>\",\n   \"sequence_id\": \"<string>\",\n   \"etag\": \"<string>\",\n   \"name\": \"<string>\"\n  }\n ]\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": []
    },
    {
      "id": "2171f83c-1472-481b-a93c-6e34e4c963d3",
      "name": "tasks",
      "item": [
        {
          "id": "7cabf335-ae5b-4d4f-bcfe-79ea114212f1",
          "name": "Create task",
          "request": {
            "name": "Create task",
            "description": {
              "content": "Creates a single task on a file.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "tasks"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": {
              "type": "oauth2"
            },
            "body": {
              "mode": "raw",
              "raw": "{\n    \"item\": {\n        \"id\": \"<string>\",\n        \"type\": \"<string>\"\n    },\n    \"action\": \"<string>\",\n    \"message\": \"<string>\",\n    \"due_at\": \"<dateTime>\"\n}"
            }
          },
          "response": [
            {
              "id": "31d868e1-b7aa-405b-9985-ba19e1824f70",
              "name": "Returns a new task object",
              "originalRequest": {
                "url": {
                  "path": [
                    "tasks"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"item\": {\n        \"id\": \"<string>\",\n        \"type\": \"<string>\"\n    },\n    \"action\": \"<string>\",\n    \"message\": \"<string>\",\n    \"due_at\": \"<dateTime>\"\n}"
                }
              },
              "status": "Created",
              "code": 201,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"item\": {\n  \"id\": \"<string>\",\n  \"type\": \"<string>\",\n  \"sequence_id\": \"<string>\",\n  \"etag\": \"<string>\",\n  \"name\": \"<string>\"\n },\n \"due_at\": \"<dateTime>\",\n \"action\": \"<string>\",\n \"message\": \"<string>\",\n \"task_assignment_collection\": {\n  \"total_count\": \"<long>\",\n  \"limit\": \"<long>\",\n  \"offset\": \"<long>\",\n  \"order\": [\n   {\n    \"by\": \"<string>\",\n    \"direction\": \"<string>\"\n   },\n   {\n    \"by\": \"<string>\",\n    \"direction\": \"<string>\"\n   }\n  ],\n  \"entries\": [\n   {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"item\": {\n     \"id\": \"schema type not provided\",\n     \"type\": \"<string>\",\n     \"sequence_id\": \"<string>\",\n     \"etag\": \"<string>\",\n     \"name\": \"<string>\"\n    },\n    \"assigned_to\": {\n     \"id\": \"schema type not provided\",\n     \"type\": \"<string>\",\n     \"name\": \"<string>\",\n     \"login\": \"<email>\"\n    },\n    \"message\": \"<string>\",\n    \"completed_at\": \"<dateTime>\",\n    \"assigned_at\": \"<dateTime>\",\n    \"reminded_at\": \"<dateTime>\",\n    \"resolution_state\": \"<string>\",\n    \"assigned_by\": {\n     \"id\": \"schema type not provided\",\n     \"type\": \"<string>\",\n     \"name\": \"<string>\",\n     \"login\": \"<email>\"\n    }\n   },\n   {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"item\": {\n     \"id\": \"schema type not provided\",\n     \"type\": \"<string>\",\n     \"sequence_id\": \"<string>\",\n     \"etag\": \"<string>\",\n     \"name\": \"<string>\"\n    },\n    \"assigned_to\": {\n     \"id\": \"schema type not provided\",\n     \"type\": \"<string>\",\n     \"name\": \"<string>\",\n     \"login\": \"<email>\"\n    },\n    \"message\": \"<string>\",\n    \"completed_at\": \"<dateTime>\",\n    \"assigned_at\": \"<dateTime>\",\n    \"reminded_at\": \"<dateTime>\",\n    \"resolution_state\": \"<string>\",\n    \"assigned_by\": {\n     \"id\": \"schema type not provided\",\n     \"type\": \"<string>\",\n     \"name\": \"<string>\",\n     \"login\": \"<email>\"\n    }\n   }\n  ]\n },\n \"is_completed\": \"<boolean>\",\n \"created_by\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"created_at\": \"<dateTime>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "175414ef-76c7-471c-b6c2-55848ea2534d",
          "name": "{task id}",
          "item": [
            {
              "id": "0991ca6b-7f72-416f-91ab-2e243b8d81f9",
              "name": "Get task",
              "request": {
                "name": "Get task",
                "description": {
                  "content": "Fetches a specific task.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "tasks",
                    ":task_id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "description": {
                        "content": "The ID of the task.",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "<string>",
                      "key": "task_id"
                    }
                  ]
                },
                "method": "GET",
                "auth": {
                  "type": "oauth2"
                }
              },
              "response": [
                {
                  "id": "d2cf2b60-50c4-474a-bea2-a7f283d1d173",
                  "name": "Returns a task object.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "tasks",
                        "<string>"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "method": "GET",
                    "body": {}
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"item\": {\n  \"id\": \"<string>\",\n  \"type\": \"<string>\",\n  \"sequence_id\": \"<string>\",\n  \"etag\": \"<string>\",\n  \"name\": \"<string>\"\n },\n \"due_at\": \"<dateTime>\",\n \"action\": \"<string>\",\n \"message\": \"<string>\",\n \"task_assignment_collection\": {\n  \"total_count\": \"<long>\",\n  \"limit\": \"<long>\",\n  \"offset\": \"<long>\",\n  \"order\": [\n   {\n    \"by\": \"<string>\",\n    \"direction\": \"<string>\"\n   },\n   {\n    \"by\": \"<string>\",\n    \"direction\": \"<string>\"\n   }\n  ],\n  \"entries\": [\n   {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"item\": {\n     \"id\": \"schema type not provided\",\n     \"type\": \"<string>\",\n     \"sequence_id\": \"<string>\",\n     \"etag\": \"<string>\",\n     \"name\": \"<string>\"\n    },\n    \"assigned_to\": {\n     \"id\": \"schema type not provided\",\n     \"type\": \"<string>\",\n     \"name\": \"<string>\",\n     \"login\": \"<email>\"\n    },\n    \"message\": \"<string>\",\n    \"completed_at\": \"<dateTime>\",\n    \"assigned_at\": \"<dateTime>\",\n    \"reminded_at\": \"<dateTime>\",\n    \"resolution_state\": \"<string>\",\n    \"assigned_by\": {\n     \"id\": \"schema type not provided\",\n     \"type\": \"<string>\",\n     \"name\": \"<string>\",\n     \"login\": \"<email>\"\n    }\n   },\n   {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"item\": {\n     \"id\": \"schema type not provided\",\n     \"type\": \"<string>\",\n     \"sequence_id\": \"<string>\",\n     \"etag\": \"<string>\",\n     \"name\": \"<string>\"\n    },\n    \"assigned_to\": {\n     \"id\": \"schema type not provided\",\n     \"type\": \"<string>\",\n     \"name\": \"<string>\",\n     \"login\": \"<email>\"\n    },\n    \"message\": \"<string>\",\n    \"completed_at\": \"<dateTime>\",\n    \"assigned_at\": \"<dateTime>\",\n    \"reminded_at\": \"<dateTime>\",\n    \"resolution_state\": \"<string>\",\n    \"assigned_by\": {\n     \"id\": \"schema type not provided\",\n     \"type\": \"<string>\",\n     \"name\": \"<string>\",\n     \"login\": \"<email>\"\n    }\n   }\n  ]\n },\n \"is_completed\": \"<boolean>\",\n \"created_by\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"created_at\": \"<dateTime>\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "de9be11d-423d-4027-8ded-a1eef7af15f9",
                  "name": "Returns an error if the task for the given ID does not exist or\nis inaccessible to your account.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "tasks",
                        "<string>"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Not Found",
                  "code": 404,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": []
            },
            {
              "id": "a3df7852-dcaf-447a-af6e-e1ba15e7b737",
              "name": "Update task",
              "request": {
                "name": "Update task",
                "description": {
                  "content": "Updates a specific task.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "tasks",
                    ":task_id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "description": {
                        "content": "The ID of the task.",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "<string>",
                      "key": "task_id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "auth": {
                  "type": "oauth2"
                },
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"action\": \"<string>\",\n    \"message\": \"<string>\",\n    \"due_at\": \"<dateTime>\"\n}"
                }
              },
              "response": [
                {
                  "id": "499f9cd2-5490-402c-8960-375d59010fc2",
                  "name": "Returns the updated task object",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "tasks",
                        "<string>"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "method": "PUT",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"action\": \"<string>\",\n    \"message\": \"<string>\",\n    \"due_at\": \"<dateTime>\"\n}"
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"item\": {\n  \"id\": \"<string>\",\n  \"type\": \"<string>\",\n  \"sequence_id\": \"<string>\",\n  \"etag\": \"<string>\",\n  \"name\": \"<string>\"\n },\n \"due_at\": \"<dateTime>\",\n \"action\": \"<string>\",\n \"message\": \"<string>\",\n \"task_assignment_collection\": {\n  \"total_count\": \"<long>\",\n  \"limit\": \"<long>\",\n  \"offset\": \"<long>\",\n  \"order\": [\n   {\n    \"by\": \"<string>\",\n    \"direction\": \"<string>\"\n   },\n   {\n    \"by\": \"<string>\",\n    \"direction\": \"<string>\"\n   }\n  ],\n  \"entries\": [\n   {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"item\": {\n     \"id\": \"schema type not provided\",\n     \"type\": \"<string>\",\n     \"sequence_id\": \"<string>\",\n     \"etag\": \"<string>\",\n     \"name\": \"<string>\"\n    },\n    \"assigned_to\": {\n     \"id\": \"schema type not provided\",\n     \"type\": \"<string>\",\n     \"name\": \"<string>\",\n     \"login\": \"<email>\"\n    },\n    \"message\": \"<string>\",\n    \"completed_at\": \"<dateTime>\",\n    \"assigned_at\": \"<dateTime>\",\n    \"reminded_at\": \"<dateTime>\",\n    \"resolution_state\": \"<string>\",\n    \"assigned_by\": {\n     \"id\": \"schema type not provided\",\n     \"type\": \"<string>\",\n     \"name\": \"<string>\",\n     \"login\": \"<email>\"\n    }\n   },\n   {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"item\": {\n     \"id\": \"schema type not provided\",\n     \"type\": \"<string>\",\n     \"sequence_id\": \"<string>\",\n     \"etag\": \"<string>\",\n     \"name\": \"<string>\"\n    },\n    \"assigned_to\": {\n     \"id\": \"schema type not provided\",\n     \"type\": \"<string>\",\n     \"name\": \"<string>\",\n     \"login\": \"<email>\"\n    },\n    \"message\": \"<string>\",\n    \"completed_at\": \"<dateTime>\",\n    \"assigned_at\": \"<dateTime>\",\n    \"reminded_at\": \"<dateTime>\",\n    \"resolution_state\": \"<string>\",\n    \"assigned_by\": {\n     \"id\": \"schema type not provided\",\n     \"type\": \"<string>\",\n     \"name\": \"<string>\",\n     \"login\": \"<email>\"\n    }\n   }\n  ]\n },\n \"is_completed\": \"<boolean>\",\n \"created_by\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"created_at\": \"<dateTime>\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "9af8f42d-dc30-47f9-b8c9-fc4c67ebaa79",
                  "name": "Returns an error if the task for the given ID does not exist or\nis inaccessible to your account.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "tasks",
                        "<string>"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "method": "PUT",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"action\": \"<string>\",\n    \"message\": \"<string>\",\n    \"due_at\": \"<dateTime>\"\n}"
                    }
                  },
                  "status": "Not Found",
                  "code": 404,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": []
            },
            {
              "id": "fd6bebb3-78c1-4e0b-9e9b-e91bf11f18de",
              "name": "Delete task",
              "request": {
                "name": "Delete task",
                "description": {
                  "content": "Deletes a specific task.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "tasks",
                    ":task_id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "description": {
                        "content": "The ID of the task.",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "<string>",
                      "key": "task_id"
                    }
                  ]
                },
                "method": "DELETE",
                "auth": {
                  "type": "oauth2"
                }
              },
              "response": [
                {
                  "id": "7fdf3441-6442-40e8-8914-249856e606e7",
                  "name": "An empty response will be returned when the task was successfully deleted.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "tasks",
                        "<string>"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "No Content",
                  "code": 204,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "_postman_previewlanguage": "text"
                },
                {
                  "id": "376fce3c-bece-416e-9cb8-e355a305eedb",
                  "name": "Returns an error if the task for the given ID does not exist or\nis inaccessible to your account.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "tasks",
                        "<string>"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "Not Found",
                  "code": 404,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": []
            },
            {
              "id": "8a300e3f-208f-4ed5-8f75-10e5f4f96be9",
              "name": "List task's assignments",
              "request": {
                "name": "List task's assignments",
                "description": {
                  "content": "Retrieves all of the assignments for a given task.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "tasks",
                    ":task_id",
                    "assignments"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "description": {
                        "content": "The ID of the task.",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "<string>",
                      "key": "task_id"
                    }
                  ]
                },
                "method": "GET",
                "auth": {
                  "type": "oauth2"
                }
              },
              "response": [
                {
                  "id": "4107cbd4-1234-47da-9e93-668d7aaca09e",
                  "name": "Returns a collection of task assignment specifying what task on\na file has been assigned to which users and by who.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "tasks",
                        "<string>",
                        "assignments"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "method": "GET",
                    "body": {}
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n \"total_count\": \"<long>\",\n \"limit\": \"<long>\",\n \"offset\": \"<long>\",\n \"order\": [\n  {\n   \"by\": \"<string>\",\n   \"direction\": \"<string>\"\n  },\n  {\n   \"by\": \"<string>\",\n   \"direction\": \"<string>\"\n  }\n ],\n \"entries\": [\n  {\n   \"id\": \"schema type not provided\",\n   \"type\": \"<string>\",\n   \"item\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\"\n   },\n   \"assigned_to\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"message\": \"<string>\",\n   \"completed_at\": \"<dateTime>\",\n   \"assigned_at\": \"<dateTime>\",\n   \"reminded_at\": \"<dateTime>\",\n   \"resolution_state\": \"<string>\",\n   \"assigned_by\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   }\n  },\n  {\n   \"id\": \"schema type not provided\",\n   \"type\": \"<string>\",\n   \"item\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\"\n   },\n   \"assigned_to\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"message\": \"<string>\",\n   \"completed_at\": \"<dateTime>\",\n   \"assigned_at\": \"<dateTime>\",\n   \"reminded_at\": \"<dateTime>\",\n   \"resolution_state\": \"<string>\",\n   \"assigned_by\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   }\n  }\n ]\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "ea2e9088-013a-4eb3-a62a-fb3b7c7d2f94",
                  "name": "Returns an error if the task assignment ID was omitted in\nthe request.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "tasks",
                        "<string>",
                        "assignments"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Internal Server Error",
                  "code": 500,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": []
            }
          ],
          "event": []
        }
      ],
      "event": []
    },
    {
      "id": "7b122253-31c5-4661-b402-7db100885f95",
      "name": "task assignments",
      "item": [
        {
          "id": "421310a0-28c2-4e99-b24d-3cf83a376dce",
          "name": "Assign task",
          "request": {
            "name": "Assign task",
            "description": {
              "content": "Assigns a task to a user.\n\nMultiple assignments to different users\nare allowed per task.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "task_assignments"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": {
              "type": "oauth2"
            },
            "body": {
              "mode": "raw",
              "raw": "{\n    \"task\": {\n        \"id\": \"<string>\",\n        \"type\": \"<string>\"\n    },\n    \"assign_to\": {\n        \"id\": \"<string>\",\n        \"login\": \"<string>\"\n    }\n}"
            }
          },
          "response": [
            {
              "id": "a21b9561-f4d0-4cb0-8a55-6652a4c8d85a",
              "name": "Returns a new task assignment object.",
              "originalRequest": {
                "url": {
                  "path": [
                    "task_assignments"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"task\": {\n        \"id\": \"<string>\",\n        \"type\": \"<string>\"\n    },\n    \"assign_to\": {\n        \"id\": \"<string>\",\n        \"login\": \"<string>\"\n    }\n}"
                }
              },
              "status": "Created",
              "code": 201,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"item\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"sequence_id\": \"<string>\",\n  \"etag\": \"<string>\",\n  \"name\": \"<string>\"\n },\n \"assigned_to\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"message\": \"<string>\",\n \"completed_at\": \"<dateTime>\",\n \"assigned_at\": \"<dateTime>\",\n \"reminded_at\": \"<dateTime>\",\n \"resolution_state\": \"<string>\",\n \"assigned_by\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "11be3640-b902-468e-af87-b5016eb4b98c",
          "name": "{task assignment id}",
          "item": [
            {
              "id": "582b4963-29a4-4996-9613-0d3ede6d10e2",
              "name": "Get task assignment",
              "request": {
                "name": "Get task assignment",
                "description": {
                  "content": "Fetches a specific task assignment.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "task_assignments",
                    ":task_assignment_id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "description": {
                        "content": "The ID of the task assignment.",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "<string>",
                      "key": "task_assignment_id"
                    }
                  ]
                },
                "method": "GET",
                "auth": {
                  "type": "oauth2"
                }
              },
              "response": [
                {
                  "id": "f067a58a-bee8-4ada-be39-78ed1335dd28",
                  "name": "Returns the requested task assignment, specifying who\nthe task has been assigned to and by whom.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "task_assignments",
                        "<string>"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "method": "GET",
                    "body": {}
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"item\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"sequence_id\": \"<string>\",\n  \"etag\": \"<string>\",\n  \"name\": \"<string>\"\n },\n \"assigned_to\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"message\": \"<string>\",\n \"completed_at\": \"<dateTime>\",\n \"assigned_at\": \"<dateTime>\",\n \"reminded_at\": \"<dateTime>\",\n \"resolution_state\": \"<string>\",\n \"assigned_by\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n }\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "db75025b-b009-46ed-a025-02cb2cfd7e3a",
                  "name": "Returns an error if the task assignment for the given ID does not exist or\nis inaccessible to your account.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "task_assignments",
                        "<string>"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Not Found",
                  "code": 404,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": []
            },
            {
              "id": "562292d0-2aa5-4113-b620-8e8e6275128f",
              "name": "Update task assignment",
              "request": {
                "name": "Update task assignment",
                "description": {
                  "content": "Updates a task assignment. This endpoint can be\nused to update the state of a task.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "task_assignments",
                    ":task_assignment_id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "description": {
                        "content": "The ID of the task assignment.",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "<string>",
                      "key": "task_assignment_id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "auth": {
                  "type": "oauth2"
                },
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"message\": \"<string>\",\n    \"resolution_state\": \"<string>\"\n}"
                }
              },
              "response": [
                {
                  "id": "7672072f-f7ea-4ecf-86ef-1b5eccd68e73",
                  "name": "Returns the updated task assignment object.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "task_assignments",
                        "<string>"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "method": "PUT",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"message\": \"<string>\",\n    \"resolution_state\": \"<string>\"\n}"
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"item\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"sequence_id\": \"<string>\",\n  \"etag\": \"<string>\",\n  \"name\": \"<string>\"\n },\n \"assigned_to\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"message\": \"<string>\",\n \"completed_at\": \"<dateTime>\",\n \"assigned_at\": \"<dateTime>\",\n \"reminded_at\": \"<dateTime>\",\n \"resolution_state\": \"<string>\",\n \"assigned_by\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n }\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "429657d7-8ad7-4852-98fb-da340d71beae",
                  "name": "Returns an error if the task assignment for the given ID does not exist or\nis inaccessible to your account.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "task_assignments",
                        "<string>"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "method": "PUT",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"message\": \"<string>\",\n    \"resolution_state\": \"<string>\"\n}"
                    }
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": []
            },
            {
              "id": "18cb5d7a-8be3-42e7-b2de-a536b213d716",
              "name": "Unassign task",
              "request": {
                "name": "Unassign task",
                "description": {
                  "content": "Deletes a specific task assignment.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "task_assignments",
                    ":task_assignment_id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "description": {
                        "content": "The ID of the task assignment.",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "<string>",
                      "key": "task_assignment_id"
                    }
                  ]
                },
                "method": "DELETE",
                "auth": {
                  "type": "oauth2"
                }
              },
              "response": [
                {
                  "id": "a41f5308-a625-4ee4-944c-e0e55ed7fb18",
                  "name": "An empty response will be returned when the task\nassignment was successfully deleted.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "task_assignments",
                        "<string>"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "No Content",
                  "code": 204,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "_postman_previewlanguage": "text"
                },
                {
                  "id": "de0b9b90-8979-4bf8-83ae-58ea5b26e3c5",
                  "name": "Returns an error if the task assignment for the given ID does not exist\nor is inaccessible to your account.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "task_assignments",
                        "<string>"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "Not Found",
                  "code": 404,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": []
            }
          ],
          "event": []
        }
      ],
      "event": []
    },
    {
      "id": "58a94e7d-bbe9-4e6b-bc1d-9f5b66e4d2f6",
      "name": "Find item for shared link",
      "request": {
        "name": "Find item for shared link",
        "description": {
          "content": "Return the file or folder represented by a shared link.\n\nShared items are any files or folders that are represented by a shared link,\nwhich can originate within the current enterprise or within another one.\n\nThis endpoint allows an application to retrieve information about a\nshared item when only given a shared link.",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "shared_items"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "key": "BoxApi",
            "value": "<string>",
            "description": "A header containing the shared link and optional password for the\nshared link.\n\nThe format for this header is as follows.\n\n`shared_link=[link]&shared_link_password=[password]`"
          }
        ],
        "method": "GET",
        "auth": {
          "type": "oauth2"
        }
      },
      "response": [
        {
          "id": "96476dc2-d326-4e9f-a646-6a0420e67a48",
          "name": "Returns a full file or folder object if the shared link is valid and\nthe user has access to it.",
          "originalRequest": {
            "url": {
              "path": [
                "shared_items"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "A header containing the shared link and optional password for the\nshared link.\n\nThe format for this header is as follows.\n\n`shared_link=[link]&shared_link_password=[password]`",
                  "type": "text/plain"
                },
                "key": "BoxApi",
                "value": "<string>"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"sequence_id\": \"<string>\",\n \"etag\": \"<string>\",\n \"name\": \"<string>\"\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": []
    },
    {
      "id": "652d6a93-bb05-464f-8e3a-2afd874eb63d",
      "name": "web links",
      "item": [
        {
          "id": "a410f06c-3e92-4bd3-b4a1-53fa1cb766b8",
          "name": "Create web link",
          "request": {
            "name": "Create web link",
            "description": {
              "content": "Creates a web link object within a folder.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "web_links"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": {
              "type": "oauth2"
            },
            "body": {
              "mode": "raw",
              "raw": "{\n    \"parent\": {\n        \"id\": \"<string>\"\n    },\n    \"url\": \"<string>\",\n    \"name\": \"<string>\",\n    \"description\": \"<string>\"\n}"
            }
          },
          "response": [
            {
              "id": "e211f445-d438-4c43-ab5b-28a8a4102169",
              "name": "Returns the newly created web link object.",
              "originalRequest": {
                "url": {
                  "path": [
                    "web_links"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"parent\": {\n        \"id\": \"<string>\"\n    },\n    \"url\": \"<string>\",\n    \"name\": \"<string>\",\n    \"description\": \"<string>\"\n}"
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"sequence_id\": \"<string>\",\n \"etag\": \"<string>\",\n \"name\": \"<string>\",\n \"url\": \"<string>\",\n \"parent\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"sequence_id\": \"<string>\",\n  \"etag\": \"<string>\",\n  \"name\": \"<string>\"\n },\n \"description\": \"<string>\",\n \"path_collection\": [\n  {\n   \"id\": \"schema type not provided\",\n   \"type\": \"<string>\",\n   \"sequence_id\": \"<string>\",\n   \"etag\": \"<string>\",\n   \"name\": \"<string>\"\n  },\n  {\n   \"id\": \"schema type not provided\",\n   \"type\": \"<string>\",\n   \"sequence_id\": \"<string>\",\n   \"etag\": \"<string>\",\n   \"name\": \"<string>\"\n  }\n ],\n \"created_at\": \"<dateTime>\",\n \"modified_at\": \"<dateTime>\",\n \"trashed_at\": \"<dateTime>\",\n \"purged_at\": \"<dateTime>\",\n \"created_by\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"modified_by\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"owned_by\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"shared_link\": {\n  \"url\": \"<url>\",\n  \"download_url\": \"<url>\",\n  \"vanity_url\": \"<url>\",\n  \"access\": \"<string>\",\n  \"effective_access\": \"<string>\",\n  \"effective_permission\": \"<string>\",\n  \"unshared_at\": \"<dateTime>\",\n  \"is_password_enabled\": \"<boolean>\",\n  \"permissions\": {\n   \"can_download\": \"<boolean>\",\n   \"can_preview\": \"<boolean>\"\n  },\n  \"download_count\": \"<integer>\",\n  \"preview_count\": \"<integer>\"\n },\n \"item_status\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "c34e019f-94b1-4833-ba32-a2fde2d6e0cd",
          "name": "{web link id}",
          "item": [
            {
              "id": "84f1e60b-cba4-4138-ad50-6bbd4439fb50",
              "name": "Get web link",
              "request": {
                "name": "Get web link",
                "description": {
                  "content": "Retrieve information about a web link.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "web_links",
                    ":web_link_id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "description": {
                        "content": "The ID of the web link.",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "<string>",
                      "key": "web_link_id"
                    }
                  ]
                },
                "method": "GET",
                "auth": {
                  "type": "oauth2"
                }
              },
              "response": [
                {
                  "id": "94d7c565-c842-48d9-bb60-2bcb6580e87d",
                  "name": "Returns the web link object.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "web_links",
                        "<string>"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "method": "GET",
                    "body": {}
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"sequence_id\": \"<string>\",\n \"etag\": \"<string>\",\n \"name\": \"<string>\",\n \"url\": \"<string>\",\n \"parent\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"sequence_id\": \"<string>\",\n  \"etag\": \"<string>\",\n  \"name\": \"<string>\"\n },\n \"description\": \"<string>\",\n \"path_collection\": [\n  {\n   \"id\": \"schema type not provided\",\n   \"type\": \"<string>\",\n   \"sequence_id\": \"<string>\",\n   \"etag\": \"<string>\",\n   \"name\": \"<string>\"\n  },\n  {\n   \"id\": \"schema type not provided\",\n   \"type\": \"<string>\",\n   \"sequence_id\": \"<string>\",\n   \"etag\": \"<string>\",\n   \"name\": \"<string>\"\n  }\n ],\n \"created_at\": \"<dateTime>\",\n \"modified_at\": \"<dateTime>\",\n \"trashed_at\": \"<dateTime>\",\n \"purged_at\": \"<dateTime>\",\n \"created_by\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"modified_by\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"owned_by\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"shared_link\": {\n  \"url\": \"<url>\",\n  \"download_url\": \"<url>\",\n  \"vanity_url\": \"<url>\",\n  \"access\": \"<string>\",\n  \"effective_access\": \"<string>\",\n  \"effective_permission\": \"<string>\",\n  \"unshared_at\": \"<dateTime>\",\n  \"is_password_enabled\": \"<boolean>\",\n  \"permissions\": {\n   \"can_download\": \"<boolean>\",\n   \"can_preview\": \"<boolean>\"\n  },\n  \"download_count\": \"<integer>\",\n  \"preview_count\": \"<integer>\"\n },\n \"item_status\": \"<string>\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": []
            },
            {
              "id": "e03dd53c-5035-477b-8810-5010d85d985e",
              "name": "Restore web link",
              "request": {
                "name": "Restore web link",
                "description": {
                  "content": "Restores an web link that has been moved to the trash.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "web_links",
                    ":web_link_id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response, unless explicitly specified.",
                      "key": "fields",
                      "value": "<string>,<string>"
                    }
                  ],
                  "variable": [
                    {
                      "description": {
                        "content": "The ID of the web link.",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "<string>",
                      "key": "web_link_id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "auth": {
                  "type": "oauth2"
                },
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"<string>\",\n    \"parent\": {\n        \"id\": \"<string>\"\n    }\n}"
                }
              },
              "response": [
                {
                  "id": "2493ce95-5f82-4caf-9026-d56db98df162",
                  "name": "Returns a web link object when it has been restored.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "web_links",
                        "<string>"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "fields",
                          "value": "<string>,<string>"
                        }
                      ],
                      "variable": []
                    },
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "method": "POST",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"name\": \"<string>\",\n    \"parent\": {\n        \"id\": \"<string>\"\n    }\n}"
                    }
                  },
                  "status": "Created",
                  "code": 201,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"sequence_id\": \"<string>\",\n \"etag\": \"<string>\",\n \"name\": \"<string>\",\n \"url\": \"<string>\",\n \"parent\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"sequence_id\": \"<string>\",\n  \"etag\": \"<string>\",\n  \"name\": \"<string>\"\n },\n \"description\": \"<string>\",\n \"path_collection\": [\n  {\n   \"id\": \"schema type not provided\",\n   \"type\": \"<string>\",\n   \"sequence_id\": \"<string>\",\n   \"etag\": \"<string>\",\n   \"name\": \"<string>\"\n  },\n  {\n   \"id\": \"schema type not provided\",\n   \"type\": \"<string>\",\n   \"sequence_id\": \"<string>\",\n   \"etag\": \"<string>\",\n   \"name\": \"<string>\"\n  }\n ],\n \"created_at\": \"<dateTime>\",\n \"modified_at\": \"<dateTime>\",\n \"trashed_at\": \"<dateTime>\",\n \"purged_at\": \"<dateTime>\",\n \"created_by\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"modified_by\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"owned_by\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"shared_link\": {\n  \"url\": \"<url>\",\n  \"download_url\": \"<url>\",\n  \"vanity_url\": \"<url>\",\n  \"access\": \"<string>\",\n  \"effective_access\": \"<string>\",\n  \"effective_permission\": \"<string>\",\n  \"unshared_at\": \"<dateTime>\",\n  \"is_password_enabled\": \"<boolean>\",\n  \"permissions\": {\n   \"can_download\": \"<boolean>\",\n   \"can_preview\": \"<boolean>\"\n  },\n  \"download_count\": \"<integer>\",\n  \"preview_count\": \"<integer>\"\n },\n \"item_status\": \"<string>\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "cf273946-e044-499c-a339-d606778434c5",
                  "name": "Returns an error if the user does not have access to the folder\nthe web link is being restored to, or the user does not have permission\nto restore web link from the trash.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "web_links",
                        "<string>"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "fields",
                          "value": "<string>,<string>"
                        }
                      ],
                      "variable": []
                    },
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "method": "POST",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"name\": \"<string>\",\n    \"parent\": {\n        \"id\": \"<string>\"\n    }\n}"
                    }
                  },
                  "status": "Forbidden",
                  "code": 403,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "14e3e1bc-2857-4df6-8dee-5f350bf89192",
                  "name": "Returns an error if the web link is not in the trash.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "web_links",
                        "<string>"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "fields",
                          "value": "<string>,<string>"
                        }
                      ],
                      "variable": []
                    },
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "method": "POST",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"name\": \"<string>\",\n    \"parent\": {\n        \"id\": \"<string>\"\n    }\n}"
                    }
                  },
                  "status": "Not Found",
                  "code": 404,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "8bcd3411-8d77-42e6-b82b-9d7fabeeb2bc",
                  "name": "Returns an error if there is an web link with the same name\nin the folder the web link is being restored to.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "web_links",
                        "<string>"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "fields",
                          "value": "<string>,<string>"
                        }
                      ],
                      "variable": []
                    },
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "method": "POST",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"name\": \"<string>\",\n    \"parent\": {\n        \"id\": \"<string>\"\n    }\n}"
                    }
                  },
                  "status": "Conflict",
                  "code": 409,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": []
            },
            {
              "id": "7f7b710f-699f-4780-92cb-caa96c410fad",
              "name": "Update web link",
              "request": {
                "name": "Update web link",
                "description": {
                  "content": "Updates a web link object.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "web_links",
                    ":web_link_id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "description": {
                        "content": "The ID of the web link.",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "<string>",
                      "key": "web_link_id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "auth": {
                  "type": "oauth2"
                },
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"url\": \"<string>\",\n    \"parent\": {\n        \"id\": \"<string>\"\n    },\n    \"name\": \"<string>\",\n    \"description\": \"<string>\"\n}"
                }
              },
              "response": [
                {
                  "id": "5491d5c1-48f9-4287-8398-2be98a6417b4",
                  "name": "Returns the updated web link object.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "web_links",
                        "<string>"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "method": "PUT",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"url\": \"<string>\",\n    \"parent\": {\n        \"id\": \"<string>\"\n    },\n    \"name\": \"<string>\",\n    \"description\": \"<string>\"\n}"
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"sequence_id\": \"<string>\",\n \"etag\": \"<string>\",\n \"name\": \"<string>\",\n \"url\": \"<string>\",\n \"parent\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"sequence_id\": \"<string>\",\n  \"etag\": \"<string>\",\n  \"name\": \"<string>\"\n },\n \"description\": \"<string>\",\n \"path_collection\": [\n  {\n   \"id\": \"schema type not provided\",\n   \"type\": \"<string>\",\n   \"sequence_id\": \"<string>\",\n   \"etag\": \"<string>\",\n   \"name\": \"<string>\"\n  },\n  {\n   \"id\": \"schema type not provided\",\n   \"type\": \"<string>\",\n   \"sequence_id\": \"<string>\",\n   \"etag\": \"<string>\",\n   \"name\": \"<string>\"\n  }\n ],\n \"created_at\": \"<dateTime>\",\n \"modified_at\": \"<dateTime>\",\n \"trashed_at\": \"<dateTime>\",\n \"purged_at\": \"<dateTime>\",\n \"created_by\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"modified_by\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"owned_by\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"shared_link\": {\n  \"url\": \"<url>\",\n  \"download_url\": \"<url>\",\n  \"vanity_url\": \"<url>\",\n  \"access\": \"<string>\",\n  \"effective_access\": \"<string>\",\n  \"effective_permission\": \"<string>\",\n  \"unshared_at\": \"<dateTime>\",\n  \"is_password_enabled\": \"<boolean>\",\n  \"permissions\": {\n   \"can_download\": \"<boolean>\",\n   \"can_preview\": \"<boolean>\"\n  },\n  \"download_count\": \"<integer>\",\n  \"preview_count\": \"<integer>\"\n },\n \"item_status\": \"<string>\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": []
            },
            {
              "id": "ce1d029e-7648-47aa-859c-cca04a1163a4",
              "name": "Delete web link",
              "request": {
                "name": "Delete web link",
                "description": {
                  "content": "Deletes a web link.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "web_links",
                    ":web_link_id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "description": {
                        "content": "The ID of the web link.",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "<string>",
                      "key": "web_link_id"
                    }
                  ]
                },
                "method": "DELETE",
                "auth": {
                  "type": "oauth2"
                }
              },
              "response": [
                {
                  "id": "8fa931b4-6a70-48e3-8f7c-e64b943cb2e8",
                  "name": "An empty response will be returned when the web link\nwas successfully deleted.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "web_links",
                        "<string>"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "No Content",
                  "code": 204,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "_postman_previewlanguage": "text"
                }
              ],
              "event": []
            },
            {
              "id": "f275b5c2-42c2-4cdc-857b-adb1bc99056d",
              "name": "trash",
              "item": [
                {
                  "id": "f02d08e8-5beb-46cb-8b86-ff3dc4c9bb11",
                  "name": "Get trashed web link",
                  "request": {
                    "name": "Get trashed web link",
                    "description": {
                      "content": "Retrieves a web link that has been moved to the trash.",
                      "type": "text/plain"
                    },
                    "url": {
                      "path": [
                        "web_links",
                        ":web_link_id",
                        "trash"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response, unless explicitly specified.",
                          "key": "fields",
                          "value": "<string>,<string>"
                        }
                      ],
                      "variable": [
                        {
                          "description": {
                            "content": "The ID of the web link.",
                            "type": "text/plain"
                          },
                          "type": "any",
                          "value": "<string>",
                          "key": "web_link_id"
                        }
                      ]
                    },
                    "method": "GET",
                    "auth": {
                      "type": "oauth2"
                    }
                  },
                  "response": [
                    {
                      "id": "30be484b-6508-4400-8f35-63a50ae1cefd",
                      "name": "Returns the web link that was trashed,\nincluding information about when the it\nwas moved to the trash.",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "web_links",
                            "<string>",
                            "trash"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [
                            {
                              "key": "fields",
                              "value": "<string>,<string>"
                            }
                          ],
                          "variable": []
                        },
                        "method": "GET",
                        "body": {}
                      },
                      "status": "OK",
                      "code": 200,
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"sequence_id\": \"<string>\",\n \"etag\": \"<string>\",\n \"name\": \"<string>\",\n \"created_at\": \"<dateTime>\",\n \"modified_at\": \"<dateTime>\",\n \"description\": {},\n \"size\": \"<long>\",\n \"path_collection\": {\n  \"total_count\": \"<long>\",\n  \"entries\": [\n   {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\"\n   },\n   {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\"\n   }\n  ]\n },\n \"created_by\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"modified_by\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"trashed_at\": \"<dateTime>\",\n \"purged_at\": \"<dateTime>\",\n \"content_created_at\": \"<dateTime>\",\n \"content_modified_at\": \"<dateTime>\",\n \"expires_at\": \"<dateTime>\",\n \"owned_by\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"shared_link\": {\n  \"url\": \"<url>\",\n  \"download_url\": \"<url>\",\n  \"vanity_url\": \"<url>\",\n  \"access\": \"<string>\",\n  \"effective_access\": \"<string>\",\n  \"effective_permission\": \"<string>\",\n  \"unshared_at\": \"<dateTime>\",\n  \"is_password_enabled\": \"<boolean>\",\n  \"permissions\": {\n   \"can_download\": \"<boolean>\",\n   \"can_preview\": \"<boolean>\"\n  },\n  \"download_count\": \"<integer>\",\n  \"preview_count\": \"<integer>\"\n },\n \"folder_upload_email\": {\n  \"access\": \"<string>\",\n  \"email\": \"<email>\"\n },\n \"parent\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"sequence_id\": \"<string>\",\n  \"etag\": \"<string>\",\n  \"name\": \"<string>\"\n },\n \"item_status\": \"<string>\",\n \"item_collection\": {\n  \"total_count\": \"<long>\",\n  \"limit\": \"<long>\",\n  \"offset\": \"<long>\",\n  \"order\": [\n   {\n    \"by\": \"<string>\",\n    \"direction\": \"<string>\"\n   },\n   {\n    \"by\": \"<string>\",\n    \"direction\": \"<string>\"\n   }\n  ],\n  \"entries\": [\n   {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\"\n   },\n   {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\"\n   }\n  ]\n },\n \"sync_state\": {},\n \"has_collaborations\": \"<boolean>\",\n \"permissions\": {\n  \"can_delete\": \"<boolean>\",\n  \"can_download\": \"<boolean>\",\n  \"can_invite_collaborator\": \"<boolean>\",\n  \"can_rename\": \"<boolean>\",\n  \"can_set_share_access\": \"<boolean>\",\n  \"can_share\": \"<boolean>\",\n  \"can_upload\": \"<boolean>\"\n },\n \"tags\": {},\n \"can_non_owners_invite\": {},\n \"is_externally_owned\": \"<boolean>\",\n \"is_collaboration_restricted_to_enterprise\": {},\n \"allowed_shared_link_access_levels\": \"company\",\n \"allowed_invitee_roles\": \"viewer\",\n \"watermark_info\": {\n  \"is_watermarked\": \"<boolean>\"\n }\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    },
                    {
                      "id": "f986d098-2506-40de-bc38-34942c44940e",
                      "name": "Returns an error if the web link is not in the trash.",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "web_links",
                            "<string>",
                            "trash"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [
                            {
                              "key": "fields",
                              "value": "<string>,<string>"
                            }
                          ],
                          "variable": []
                        },
                        "method": "GET",
                        "body": {}
                      },
                      "status": "Not Found",
                      "code": 404,
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    }
                  ],
                  "event": []
                },
                {
                  "id": "f4ef7a81-9fa9-442c-8696-676164a77de7",
                  "name": "Permanently delete web link",
                  "request": {
                    "name": "Permanently delete web link",
                    "description": {
                      "content": "Permanently deletes a web link that is in the trash.\nThis action cannot be undone.",
                      "type": "text/plain"
                    },
                    "url": {
                      "path": [
                        "web_links",
                        ":web_link_id",
                        "trash"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "description": {
                            "content": "The ID of the web link.",
                            "type": "text/plain"
                          },
                          "type": "any",
                          "value": "<string>",
                          "key": "web_link_id"
                        }
                      ]
                    },
                    "method": "DELETE",
                    "auth": {
                      "type": "oauth2"
                    }
                  },
                  "response": [
                    {
                      "id": "75db0211-e5e2-4bb8-a8fc-743c170a1974",
                      "name": "Returns an empty response when the web link was\npermanently deleted.",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "web_links",
                            "<string>",
                            "trash"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": []
                        },
                        "method": "DELETE",
                        "body": {}
                      },
                      "status": "No Content",
                      "code": 204,
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "text/plain"
                        }
                      ],
                      "body": "",
                      "cookie": [],
                      "_postman_previewlanguage": "text"
                    },
                    {
                      "id": "a4e591b8-2e5d-4bc4-8f2e-16e3ba8d18dd",
                      "name": "Returns an error if the web link is not in the trash.",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "web_links",
                            "<string>",
                            "trash"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": []
                        },
                        "method": "DELETE",
                        "body": {}
                      },
                      "status": "Not Found",
                      "code": 404,
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    }
                  ],
                  "event": []
                }
              ],
              "event": []
            }
          ],
          "event": []
        }
      ],
      "event": []
    },
    {
      "id": "243955c7-b1ea-4ac1-aafe-dc42c950ef4c",
      "name": "users",
      "item": [
        {
          "id": "1f779927-5459-4b8c-8d4a-4fcf0c8deaad",
          "name": "List enterprise users",
          "request": {
            "name": "List enterprise users",
            "description": {
              "content": "Returns a list of all users for the Enterprise along with their user_id,\npublic_name, and login.\n\nThe application and the authenticated user need to\nhave the permission to look up users in the entire\nenterprise.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "users"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "description": "Limits the results to only users who's `name` or\n`login` start with the search term.\n\nFor externally managed users, the search term needs\nto completely match the in order to find the user, and\nit will only return one user at a time.",
                  "key": "filter_term",
                  "value": "<string>"
                },
                {
                  "description": "Limits the results to the kind  of user specified.\n\n* `all` returns every kind of user for whom the\n  `login` or `name` partially matches the\n  `filter_term`. It will only return an external user\n  if the login matches the `filter_term` completely,\n  and in that case it will only return that user.\n* `managed` returns all managed and app users for whom\n  the `login` or `name` partially matches the\n  `filter_term`.\n* `external` returns all external users for whom the\n  `login` matches the `filter_term` exactly.",
                  "key": "user_type",
                  "value": "<string>"
                },
                {
                  "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response, unless explicitly specified.",
                  "key": "fields",
                  "value": "<string>,<string>"
                },
                {
                  "description": "The offset of the item at which to begin the response.",
                  "key": "offset",
                  "value": "<long>"
                },
                {
                  "description": "The maximum number of items to return per page.",
                  "key": "limit",
                  "value": "100"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "d620ba57-3ff6-447b-a0a1-2845a737f84b",
              "name": "Returns all of the users in the enterprise.",
              "originalRequest": {
                "url": {
                  "path": [
                    "users"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "filter_term",
                      "value": "<string>"
                    },
                    {
                      "key": "user_type",
                      "value": "<string>"
                    },
                    {
                      "key": "fields",
                      "value": "<string>,<string>"
                    },
                    {
                      "key": "offset",
                      "value": "<long>"
                    },
                    {
                      "key": "limit",
                      "value": "100"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"total_count\": \"<long>\",\n \"limit\": \"<long>\",\n \"offset\": \"<long>\",\n \"order\": [\n  {\n   \"by\": \"<string>\",\n   \"direction\": \"<string>\"\n  },\n  {\n   \"by\": \"<string>\",\n   \"direction\": \"<string>\"\n  }\n ],\n \"entries\": [\n  {\n   \"id\": \"schema type not provided\",\n   \"type\": \"<string>\",\n   \"name\": \"<string>\",\n   \"login\": \"<email>\",\n   \"created_at\": \"<dateTime>\",\n   \"modified_at\": \"<dateTime>\",\n   \"language\": \"<ISO639-1-BOX>\",\n   \"timezone\": \"<timezone>\",\n   \"space_amount\": \"<integer>\",\n   \"space_used\": \"<integer>\",\n   \"max_upload_size\": \"<integer>\",\n   \"status\": \"<string>\",\n   \"job_title\": \"<string>\",\n   \"phone\": \"<string>\",\n   \"address\": \"<string>\",\n   \"avatar_url\": \"<string>\",\n   \"role\": \"<string>\",\n   \"tracking_codes\": [\n    {\n     \"type\": \"<string>\",\n     \"name\": \"<string>\",\n     \"value\": \"<string>\"\n    },\n    {\n     \"type\": \"<string>\",\n     \"name\": \"<string>\",\n     \"value\": \"<string>\"\n    }\n   ],\n   \"can_see_managed_users\": \"<boolean>\",\n   \"is_sync_enabled\": \"<boolean>\",\n   \"is_external_collab_restricted\": \"<boolean>\",\n   \"is_exempt_from_device_limits\": \"<boolean>\",\n   \"is_exempt_from_login_verification\": \"<boolean>\",\n   \"enterprise\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\"\n   },\n   \"my_tags\": [\n    \"<string>\",\n    \"<string>\"\n   ],\n   \"hostname\": \"<string>\",\n   \"is_platform_access_only\": \"<boolean>\",\n   \"external_app_user_id\": \"<string>\"\n  },\n  {\n   \"id\": \"schema type not provided\",\n   \"type\": \"<string>\",\n   \"name\": \"<string>\",\n   \"login\": \"<email>\",\n   \"created_at\": \"<dateTime>\",\n   \"modified_at\": \"<dateTime>\",\n   \"language\": \"<ISO639-1-BOX>\",\n   \"timezone\": \"<timezone>\",\n   \"space_amount\": \"<integer>\",\n   \"space_used\": \"<integer>\",\n   \"max_upload_size\": \"<integer>\",\n   \"status\": \"<string>\",\n   \"job_title\": \"<string>\",\n   \"phone\": \"<string>\",\n   \"address\": \"<string>\",\n   \"avatar_url\": \"<string>\",\n   \"role\": \"<string>\",\n   \"tracking_codes\": [\n    {\n     \"type\": \"<string>\",\n     \"name\": \"<string>\",\n     \"value\": \"<string>\"\n    },\n    {\n     \"type\": \"<string>\",\n     \"name\": \"<string>\",\n     \"value\": \"<string>\"\n    }\n   ],\n   \"can_see_managed_users\": \"<boolean>\",\n   \"is_sync_enabled\": \"<boolean>\",\n   \"is_external_collab_restricted\": \"<boolean>\",\n   \"is_exempt_from_device_limits\": \"<boolean>\",\n   \"is_exempt_from_login_verification\": \"<boolean>\",\n   \"enterprise\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\"\n   },\n   \"my_tags\": [\n    \"<string>\",\n    \"<string>\"\n   ],\n   \"hostname\": \"<string>\",\n   \"is_platform_access_only\": \"<boolean>\",\n   \"external_app_user_id\": \"<string>\"\n  }\n ]\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "a1c4d6ca-a516-448a-9af9-cebcb9dba788",
          "name": "Create user",
          "request": {
            "name": "Create user",
            "description": {
              "content": "Creates a new managed user in an enterprise. This endpoint\nis only available to users and applications with the right\nadmin permissions.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "users"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response, unless explicitly specified.",
                  "key": "fields",
                  "value": "<string>,<string>"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": {
              "type": "oauth2"
            },
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"<string>\",\n    \"login\": \"<string>\",\n    \"is_platform_access_only\": \"<boolean>\",\n    \"role\": \"<string>\",\n    \"language\": \"<ISO639-1-BOX>\",\n    \"is_sync_enabled\": \"<boolean>\",\n    \"job_title\": \"<string>\",\n    \"phone\": \"<string>\",\n    \"address\": \"<string>\",\n    \"space_amount\": \"<integer>\",\n    \"tracking_codes\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"can_see_managed_users\": \"<boolean>\",\n    \"timezone\": \"<timezone>\",\n    \"is_external_collab_restricted\": \"<boolean>\",\n    \"is_exempt_from_device_limits\": \"<boolean>\",\n    \"is_exempt_from_login_verification\": \"<boolean>\",\n    \"status\": \"<string>\"\n}"
            }
          },
          "response": [
            {
              "id": "3e1d4c2a-8b51-48ff-b168-2f040178ff98",
              "name": "Returns a user object for the newly created user.",
              "originalRequest": {
                "url": {
                  "path": [
                    "users"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "<string>,<string>"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"<string>\",\n    \"login\": \"<string>\",\n    \"is_platform_access_only\": \"<boolean>\",\n    \"role\": \"<string>\",\n    \"language\": \"<ISO639-1-BOX>\",\n    \"is_sync_enabled\": \"<boolean>\",\n    \"job_title\": \"<string>\",\n    \"phone\": \"<string>\",\n    \"address\": \"<string>\",\n    \"space_amount\": \"<integer>\",\n    \"tracking_codes\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"can_see_managed_users\": \"<boolean>\",\n    \"timezone\": \"<timezone>\",\n    \"is_external_collab_restricted\": \"<boolean>\",\n    \"is_exempt_from_device_limits\": \"<boolean>\",\n    \"is_exempt_from_login_verification\": \"<boolean>\",\n    \"status\": \"<string>\"\n}"
                }
              },
              "status": "Created",
              "code": 201,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"name\": \"<string>\",\n \"login\": \"<email>\",\n \"created_at\": \"<dateTime>\",\n \"modified_at\": \"<dateTime>\",\n \"language\": \"<ISO639-1-BOX>\",\n \"timezone\": \"<timezone>\",\n \"space_amount\": \"<integer>\",\n \"space_used\": \"<integer>\",\n \"max_upload_size\": \"<integer>\",\n \"status\": \"<string>\",\n \"job_title\": \"<string>\",\n \"phone\": \"<string>\",\n \"address\": \"<string>\",\n \"avatar_url\": \"<string>\",\n \"role\": \"<string>\",\n \"tracking_codes\": [\n  {\n   \"type\": \"<string>\",\n   \"name\": \"<string>\",\n   \"value\": \"<string>\"\n  },\n  {\n   \"type\": \"<string>\",\n   \"name\": \"<string>\",\n   \"value\": \"<string>\"\n  }\n ],\n \"can_see_managed_users\": \"<boolean>\",\n \"is_sync_enabled\": \"<boolean>\",\n \"is_external_collab_restricted\": \"<boolean>\",\n \"is_exempt_from_device_limits\": \"<boolean>\",\n \"is_exempt_from_login_verification\": \"<boolean>\",\n \"enterprise\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\"\n },\n \"my_tags\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"hostname\": \"<string>\",\n \"is_platform_access_only\": \"<boolean>\",\n \"external_app_user_id\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "47d9c6a0-2f27-4502-a02f-2550f788179c",
          "name": "Get authenticated user",
          "request": {
            "name": "Get authenticated user",
            "description": {
              "content": "Retrieves information about the user who is currently authenticated.\n\nIn the case of a 3-legged OAuth2, client-side authenticated application\nthis will be the user who authorized the app.\n\nIn the case of a JWT, server-side authenticated application\nthis will be the service account that belongs to the application\nby default.\n\nUse the `As-User` header to change who this API call is made on behalf of.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "users",
                "me"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response, unless explicitly specified.",
                  "key": "fields",
                  "value": "<string>,<string>"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "07c52ce4-6d2e-4a41-b827-30290c4afaa9",
              "name": "Returns a single user object.",
              "originalRequest": {
                "url": {
                  "path": [
                    "users",
                    "me"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "<string>,<string>"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"name\": \"<string>\",\n \"login\": \"<email>\",\n \"created_at\": \"<dateTime>\",\n \"modified_at\": \"<dateTime>\",\n \"language\": \"<ISO639-1-BOX>\",\n \"timezone\": \"<timezone>\",\n \"space_amount\": \"<integer>\",\n \"space_used\": \"<integer>\",\n \"max_upload_size\": \"<integer>\",\n \"status\": \"<string>\",\n \"job_title\": \"<string>\",\n \"phone\": \"<string>\",\n \"address\": \"<string>\",\n \"avatar_url\": \"<string>\",\n \"role\": \"<string>\",\n \"tracking_codes\": [\n  {\n   \"type\": \"<string>\",\n   \"name\": \"<string>\",\n   \"value\": \"<string>\"\n  },\n  {\n   \"type\": \"<string>\",\n   \"name\": \"<string>\",\n   \"value\": \"<string>\"\n  }\n ],\n \"can_see_managed_users\": \"<boolean>\",\n \"is_sync_enabled\": \"<boolean>\",\n \"is_external_collab_restricted\": \"<boolean>\",\n \"is_exempt_from_device_limits\": \"<boolean>\",\n \"is_exempt_from_login_verification\": \"<boolean>\",\n \"enterprise\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\"\n },\n \"my_tags\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"hostname\": \"<string>\",\n \"is_platform_access_only\": \"<boolean>\",\n \"external_app_user_id\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "06e15f3e-07e1-42bf-a73d-652ee37743f0",
          "name": "{user id}",
          "item": [
            {
              "id": "c8d8c0e5-3cb5-4ccf-8d87-7bec20c35b08",
              "name": "Get user",
              "request": {
                "name": "Get user",
                "description": {
                  "content": "Retrieves information about a user in the enterprise.\n\nThe application and the authenticated user need to\nhave the permission to look up users in the entire\nenterprise.\n\nThis endpoint also returns a limited set of information\nfor external users who are collaborated on content\nowned by the enterprise for authenticated users with the\nright scopes. In this case, disallowed fields will return\nnull instead.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "users",
                    ":user_id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response, unless explicitly specified.",
                      "key": "fields",
                      "value": "<string>,<string>"
                    }
                  ],
                  "variable": [
                    {
                      "description": {
                        "content": "The ID of the user.",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "<string>",
                      "key": "user_id"
                    }
                  ]
                },
                "method": "GET",
                "auth": {
                  "type": "oauth2"
                }
              },
              "response": [
                {
                  "id": "e7df29d5-ef38-4bb4-b91d-3c09e79a9903",
                  "name": "Returns a single user object.\n\n[Some fields are optional](#user) and need to be explicitly\nrequested using the [fields](#get-users-id--request--fields)\nparameter.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "users",
                        "<string>"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "fields",
                          "value": "<string>,<string>"
                        }
                      ],
                      "variable": []
                    },
                    "method": "GET",
                    "body": {}
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"name\": \"<string>\",\n \"login\": \"<email>\",\n \"created_at\": \"<dateTime>\",\n \"modified_at\": \"<dateTime>\",\n \"language\": \"<ISO639-1-BOX>\",\n \"timezone\": \"<timezone>\",\n \"space_amount\": \"<integer>\",\n \"space_used\": \"<integer>\",\n \"max_upload_size\": \"<integer>\",\n \"status\": \"<string>\",\n \"job_title\": \"<string>\",\n \"phone\": \"<string>\",\n \"address\": \"<string>\",\n \"avatar_url\": \"<string>\",\n \"role\": \"<string>\",\n \"tracking_codes\": [\n  {\n   \"type\": \"<string>\",\n   \"name\": \"<string>\",\n   \"value\": \"<string>\"\n  },\n  {\n   \"type\": \"<string>\",\n   \"name\": \"<string>\",\n   \"value\": \"<string>\"\n  }\n ],\n \"can_see_managed_users\": \"<boolean>\",\n \"is_sync_enabled\": \"<boolean>\",\n \"is_external_collab_restricted\": \"<boolean>\",\n \"is_exempt_from_device_limits\": \"<boolean>\",\n \"is_exempt_from_login_verification\": \"<boolean>\",\n \"enterprise\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\"\n },\n \"my_tags\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"hostname\": \"<string>\",\n \"is_platform_access_only\": \"<boolean>\",\n \"external_app_user_id\": \"<string>\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": []
            },
            {
              "id": "98ce4718-2548-4f39-9617-4b9c4f82f590",
              "name": "Update user",
              "request": {
                "name": "Update user",
                "description": {
                  "content": "Updates a managed user in an enterprise. This endpoint\nis only available to users and applications with the right\nadmin permissions.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "users",
                    ":user_id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response, unless explicitly specified.",
                      "key": "fields",
                      "value": "<string>,<string>"
                    }
                  ],
                  "variable": [
                    {
                      "description": {
                        "content": "The ID of the user.",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "<string>",
                      "key": "user_id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "auth": {
                  "type": "oauth2"
                },
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"enterprise\": \"<string>\",\n    \"notify\": \"<boolean>\",\n    \"name\": \"<string>\",\n    \"login\": \"<string>\",\n    \"role\": \"<string>\",\n    \"language\": \"<ISO639-1-BOX>\",\n    \"is_sync_enabled\": \"<boolean>\",\n    \"job_title\": \"<string>\",\n    \"phone\": \"<string>\",\n    \"address\": \"<string>\",\n    \"tracking_codes\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"can_see_managed_users\": \"<boolean>\",\n    \"timezone\": \"<timezone>\",\n    \"is_external_collab_restricted\": \"<boolean>\",\n    \"is_exempt_from_device_limits\": \"<boolean>\",\n    \"is_exempt_from_login_verification\": \"<boolean>\",\n    \"is_password_reset_required\": \"<boolean>\",\n    \"status\": \"<string>\"\n}"
                }
              },
              "response": [
                {
                  "id": "838b0075-34b6-4a56-a504-2f96d1508105",
                  "name": "Returns the updated user object.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "users",
                        "<string>"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "fields",
                          "value": "<string>,<string>"
                        }
                      ],
                      "variable": []
                    },
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "method": "PUT",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"enterprise\": \"<string>\",\n    \"notify\": \"<boolean>\",\n    \"name\": \"<string>\",\n    \"login\": \"<string>\",\n    \"role\": \"<string>\",\n    \"language\": \"<ISO639-1-BOX>\",\n    \"is_sync_enabled\": \"<boolean>\",\n    \"job_title\": \"<string>\",\n    \"phone\": \"<string>\",\n    \"address\": \"<string>\",\n    \"tracking_codes\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"can_see_managed_users\": \"<boolean>\",\n    \"timezone\": \"<timezone>\",\n    \"is_external_collab_restricted\": \"<boolean>\",\n    \"is_exempt_from_device_limits\": \"<boolean>\",\n    \"is_exempt_from_login_verification\": \"<boolean>\",\n    \"is_password_reset_required\": \"<boolean>\",\n    \"status\": \"<string>\"\n}"
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"name\": \"<string>\",\n \"login\": \"<email>\",\n \"created_at\": \"<dateTime>\",\n \"modified_at\": \"<dateTime>\",\n \"language\": \"<ISO639-1-BOX>\",\n \"timezone\": \"<timezone>\",\n \"space_amount\": \"<integer>\",\n \"space_used\": \"<integer>\",\n \"max_upload_size\": \"<integer>\",\n \"status\": \"<string>\",\n \"job_title\": \"<string>\",\n \"phone\": \"<string>\",\n \"address\": \"<string>\",\n \"avatar_url\": \"<string>\",\n \"role\": \"<string>\",\n \"tracking_codes\": [\n  {\n   \"type\": \"<string>\",\n   \"name\": \"<string>\",\n   \"value\": \"<string>\"\n  },\n  {\n   \"type\": \"<string>\",\n   \"name\": \"<string>\",\n   \"value\": \"<string>\"\n  }\n ],\n \"can_see_managed_users\": \"<boolean>\",\n \"is_sync_enabled\": \"<boolean>\",\n \"is_external_collab_restricted\": \"<boolean>\",\n \"is_exempt_from_device_limits\": \"<boolean>\",\n \"is_exempt_from_login_verification\": \"<boolean>\",\n \"enterprise\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\"\n },\n \"my_tags\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"hostname\": \"<string>\",\n \"is_platform_access_only\": \"<boolean>\",\n \"external_app_user_id\": \"<string>\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": []
            },
            {
              "id": "0a5ba91c-4e03-4091-a6e8-8627e2be2e52",
              "name": "Delete user",
              "request": {
                "name": "Delete user",
                "description": {
                  "content": "Deletes a user. By default this will fail if the user\nstill owns any content. Move their owned content first\nbefore proceeding, or use the `force` field to delete\nthe user and their files.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "users",
                    ":user_id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "description": "Whether the user will receive email notification of\nthe deletion",
                      "key": "notify",
                      "value": "<boolean>"
                    },
                    {
                      "description": "Whether the user should be deleted even if this user\nstill own files",
                      "key": "force",
                      "value": "<boolean>"
                    }
                  ],
                  "variable": [
                    {
                      "description": {
                        "content": "The ID of the user.",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "<string>",
                      "key": "user_id"
                    }
                  ]
                },
                "method": "DELETE",
                "auth": {
                  "type": "oauth2"
                }
              },
              "response": [
                {
                  "id": "5efa8969-adca-4720-ad1d-986288b1fdb0",
                  "name": "Removes the user and returns an empty response.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "users",
                        "<string>"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "notify",
                          "value": "<boolean>"
                        },
                        {
                          "key": "force",
                          "value": "<boolean>"
                        }
                      ],
                      "variable": []
                    },
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "No Content",
                  "code": 204,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "_postman_previewlanguage": "text"
                }
              ],
              "event": []
            },
            {
              "id": "ab6ae406-8fc7-4365-8f3b-702877e29872",
              "name": "Get user avatar",
              "request": {
                "name": "Get user avatar",
                "description": {
                  "content": "Retrieves an image of a the user's avatar.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "users",
                    ":user_id",
                    "avatar"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "description": {
                        "content": "The ID of the user.",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "<string>",
                      "key": "user_id"
                    }
                  ]
                },
                "method": "GET",
                "auth": {
                  "type": "oauth2"
                }
              },
              "response": [
                {
                  "id": "da1aa737-b19c-45ef-8b98-604ef1f948ca",
                  "name": "When an avatar can be found for the user the\nimage data will be returned in the body of the\nresponse.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "users",
                        "<string>",
                        "avatar"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "method": "GET",
                    "body": {}
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "image/jpg"
                    }
                  ],
                  "body": "<binary>",
                  "cookie": [],
                  "_postman_previewlanguage": "text"
                }
              ],
              "event": []
            },
            {
              "id": "6721caba-f728-496d-b537-ca2013a06094",
              "name": "Transfer owned folders",
              "request": {
                "name": "Transfer owned folders",
                "description": {
                  "content": "Move all of the items owned by a user into a\nnew folder in another user’s account.\n\nOnly the root folder (`0`) can be transferred.\n\nFolders can only be moved across users by users with administrative\npermissions.\n\nThis call will be performed synchronously which might lead to a slow response\nwhen the source user has a large number of items in all of its folders.\n\nIf the destination path has a metadata cascade policy attached to any of\nthe parent folders, a metadata cascade operation will be kicked off\nasynchronously.\n\nThere is currently no way to check for when this operation is finished.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "users",
                    ":user_id",
                    "folders",
                    ":folder_id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response, unless explicitly specified.",
                      "key": "fields",
                      "value": "<string>,<string>"
                    },
                    {
                      "description": "Determines if users should receive email notification\nfor the action performed.",
                      "key": "notify",
                      "value": "<boolean>"
                    }
                  ],
                  "variable": [
                    {
                      "description": {
                        "content": "The ID of the user.",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "<string>",
                      "key": "user_id"
                    },
                    {
                      "description": {
                        "content": "The unique identifier that represent a folder.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the url `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder of a Box account is\nalways represented by the ID `0`.",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "<string>",
                      "key": "folder_id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "auth": {
                  "type": "oauth2"
                },
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"enterprise\": {\n        \"id\": \"<string>\"\n    }\n}"
                }
              },
              "response": [
                {
                  "id": "6201d9cf-b712-45bc-b62c-0c223ef3fee7",
                  "name": "Returns the information for the newly created\ndestination folder.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "users",
                        "<string>",
                        "folders",
                        "<string>"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "fields",
                          "value": "<string>,<string>"
                        },
                        {
                          "key": "notify",
                          "value": "<boolean>"
                        }
                      ],
                      "variable": []
                    },
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "method": "PUT",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"enterprise\": {\n        \"id\": \"<string>\"\n    }\n}"
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"sequence_id\": \"<string>\",\n \"etag\": \"<string>\",\n \"name\": \"<string>\",\n \"created_at\": \"<dateTime>\",\n \"modified_at\": \"<dateTime>\",\n \"description\": {},\n \"size\": \"<long>\",\n \"path_collection\": {\n  \"total_count\": \"<long>\",\n  \"entries\": [\n   {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\"\n   },\n   {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\"\n   }\n  ]\n },\n \"created_by\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"modified_by\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"trashed_at\": \"<dateTime>\",\n \"purged_at\": \"<dateTime>\",\n \"content_created_at\": \"<dateTime>\",\n \"content_modified_at\": \"<dateTime>\",\n \"expires_at\": \"<dateTime>\",\n \"owned_by\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"shared_link\": {\n  \"url\": \"<url>\",\n  \"download_url\": \"<url>\",\n  \"vanity_url\": \"<url>\",\n  \"access\": \"<string>\",\n  \"effective_access\": \"<string>\",\n  \"effective_permission\": \"<string>\",\n  \"unshared_at\": \"<dateTime>\",\n  \"is_password_enabled\": \"<boolean>\",\n  \"permissions\": {\n   \"can_download\": \"<boolean>\",\n   \"can_preview\": \"<boolean>\"\n  },\n  \"download_count\": \"<integer>\",\n  \"preview_count\": \"<integer>\"\n },\n \"folder_upload_email\": {\n  \"access\": \"<string>\",\n  \"email\": \"<email>\"\n },\n \"parent\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"sequence_id\": \"<string>\",\n  \"etag\": \"<string>\",\n  \"name\": \"<string>\"\n },\n \"item_status\": \"<string>\",\n \"item_collection\": {\n  \"total_count\": \"<long>\",\n  \"limit\": \"<long>\",\n  \"offset\": \"<long>\",\n  \"order\": [\n   {\n    \"by\": \"<string>\",\n    \"direction\": \"<string>\"\n   },\n   {\n    \"by\": \"<string>\",\n    \"direction\": \"<string>\"\n   }\n  ],\n  \"entries\": [\n   {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\"\n   },\n   {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\"\n   }\n  ]\n },\n \"sync_state\": {},\n \"has_collaborations\": \"<boolean>\",\n \"permissions\": {\n  \"can_delete\": \"<boolean>\",\n  \"can_download\": \"<boolean>\",\n  \"can_invite_collaborator\": \"<boolean>\",\n  \"can_rename\": \"<boolean>\",\n  \"can_set_share_access\": \"<boolean>\",\n  \"can_share\": \"<boolean>\",\n  \"can_upload\": \"<boolean>\"\n },\n \"tags\": {},\n \"can_non_owners_invite\": {},\n \"is_externally_owned\": \"<boolean>\",\n \"is_collaboration_restricted_to_enterprise\": {},\n \"allowed_shared_link_access_levels\": \"open\",\n \"allowed_invitee_roles\": \"uploader\",\n \"watermark_info\": {\n  \"is_watermarked\": \"<boolean>\"\n }\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": []
            },
            {
              "id": "b687f8e7-b266-4d44-bc10-79802ff4ea4c",
              "name": "email aliases",
              "item": [
                {
                  "id": "443d42eb-b817-40cd-adcf-d3f3d1f39d8d",
                  "name": "List user's email aliases",
                  "request": {
                    "name": "List user's email aliases",
                    "description": {
                      "content": "Retrieves all email aliases for a user. The collection\ndoes not include the primary login for the user.",
                      "type": "text/plain"
                    },
                    "url": {
                      "path": [
                        "users",
                        ":user_id",
                        "email_aliases"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "description": {
                            "content": "The ID of the user.",
                            "type": "text/plain"
                          },
                          "type": "any",
                          "value": "<string>",
                          "key": "user_id"
                        }
                      ]
                    },
                    "method": "GET",
                    "auth": {
                      "type": "oauth2"
                    }
                  },
                  "response": [
                    {
                      "id": "7ff6152f-66e2-4479-b869-414737576978",
                      "name": "Returns a collection of email aliases.",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "users",
                            "<string>",
                            "email_aliases"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": []
                        },
                        "method": "GET",
                        "body": {}
                      },
                      "status": "OK",
                      "code": 200,
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n \"total_count\": \"<long>\",\n \"entries\": [\n  {\n   \"id\": \"schema type not provided\",\n   \"type\": \"<string>\",\n   \"email\": \"<string>\",\n   \"is_confirmed\": \"<boolean>\"\n  },\n  {\n   \"id\": \"schema type not provided\",\n   \"type\": \"<string>\",\n   \"email\": \"<string>\",\n   \"is_confirmed\": \"<boolean>\"\n  }\n ]\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    }
                  ],
                  "event": []
                },
                {
                  "id": "a226b9c8-a48b-49cb-b9ee-7400d3c5d3a1",
                  "name": "Create email alias",
                  "request": {
                    "name": "Create email alias",
                    "description": {
                      "content": "Adds a new email alias to a user account..",
                      "type": "text/plain"
                    },
                    "url": {
                      "path": [
                        "users",
                        ":user_id",
                        "email_aliases"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "description": {
                            "content": "The ID of the user.",
                            "type": "text/plain"
                          },
                          "type": "any",
                          "value": "<string>",
                          "key": "user_id"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "method": "POST",
                    "auth": {
                      "type": "oauth2"
                    },
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"email\": \"<string>\"\n}"
                    }
                  },
                  "response": [
                    {
                      "id": "856975b4-f2ec-4641-87e5-d5079418e0ae",
                      "name": "Returns the newly created email alias object.",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "users",
                            "<string>",
                            "email_aliases"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": []
                        },
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "method": "POST",
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"email\": \"<string>\"\n}"
                        }
                      },
                      "status": "Created",
                      "code": 201,
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"email\": \"<string>\",\n \"is_confirmed\": \"<boolean>\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    }
                  ],
                  "event": []
                },
                {
                  "id": "c98aa924-691c-4754-bcd4-a8e0130d9b27",
                  "name": "Remove email alias",
                  "request": {
                    "name": "Remove email alias",
                    "description": {
                      "content": "Removes an email alias from a user.",
                      "type": "text/plain"
                    },
                    "url": {
                      "path": [
                        "users",
                        ":user_id",
                        "email_aliases",
                        ":email_alias_id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "description": {
                            "content": "The ID of the user.",
                            "type": "text/plain"
                          },
                          "type": "any",
                          "value": "<string>",
                          "key": "user_id"
                        },
                        {
                          "description": {
                            "content": "The ID of the email alias.",
                            "type": "text/plain"
                          },
                          "type": "any",
                          "value": "<string>",
                          "key": "email_alias_id"
                        }
                      ]
                    },
                    "method": "DELETE",
                    "auth": {
                      "type": "oauth2"
                    }
                  },
                  "response": [
                    {
                      "id": "967ca489-8f66-451c-b689-6d325704e2bb",
                      "name": "Removes the alias and returns an empty response.",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "users",
                            "<string>",
                            "email_aliases",
                            "<string>"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": []
                        },
                        "method": "DELETE",
                        "body": {}
                      },
                      "status": "No Content",
                      "code": 204,
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "text/plain"
                        }
                      ],
                      "body": "",
                      "cookie": [],
                      "_postman_previewlanguage": "text"
                    }
                  ],
                  "event": []
                }
              ],
              "event": []
            },
            {
              "id": "16a085b2-8dcc-4445-ade2-21e6963a4df8",
              "name": "List user's groups",
              "request": {
                "name": "List user's groups",
                "description": {
                  "content": "Retrieves all the groups for a user. The user making\nan API call must have admin permissions to inspect the\nenterprise's groups.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "users",
                    ":user_id",
                    "memberships"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "description": "The maximum number of items to return per page.",
                      "key": "limit",
                      "value": "100"
                    },
                    {
                      "description": "The offset of the item at which to begin the response.",
                      "key": "offset",
                      "value": "<long>"
                    }
                  ],
                  "variable": [
                    {
                      "description": {
                        "content": "The ID of the user.",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "<string>",
                      "key": "user_id"
                    }
                  ]
                },
                "method": "GET",
                "auth": {
                  "type": "oauth2"
                }
              },
              "response": [
                {
                  "id": "371d35ec-1186-4204-9d8b-44d2fcfd83f2",
                  "name": "Returns a collection of membership objects. If there are no\nmemberships, an empty collection will be returned.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "users",
                        "<string>",
                        "memberships"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "limit",
                          "value": "100"
                        },
                        {
                          "key": "offset",
                          "value": "<long>"
                        }
                      ],
                      "variable": []
                    },
                    "method": "GET",
                    "body": {}
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n \"total_count\": \"<long>\",\n \"limit\": \"<long>\",\n \"offset\": \"<long>\",\n \"order\": [\n  {\n   \"by\": \"<string>\",\n   \"direction\": \"<string>\"\n  },\n  {\n   \"by\": \"<string>\",\n   \"direction\": \"<string>\"\n  }\n ],\n \"entries\": [\n  {\n   \"id\": \"schema type not provided\",\n   \"type\": \"<string>\",\n   \"user\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"group\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"group_type\": \"<string>\"\n   },\n   \"role\": \"<string>\",\n   \"created_at\": \"<dateTime>\",\n   \"modified_at\": \"<dateTime>\"\n  },\n  {\n   \"id\": \"schema type not provided\",\n   \"type\": \"<string>\",\n   \"user\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"group\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"group_type\": \"<string>\"\n   },\n   \"role\": \"<string>\",\n   \"created_at\": \"<dateTime>\",\n   \"modified_at\": \"<dateTime>\"\n  }\n ]\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": []
            }
          ],
          "event": []
        }
      ],
      "event": []
    },
    {
      "id": "8aaa977a-7013-42b0-be6e-e204ba14ee60",
      "name": "invites",
      "item": [
        {
          "id": "1c2b2f1b-6cab-4b62-8d51-9ea02728a72f",
          "name": "Invite user",
          "request": {
            "name": "Invite user",
            "description": {
              "content": "Invites an existing external user to join an enterprise.\n\nThe existing user can not be part of another enterprise and\nmust already have a Box account. Once invited, the user will receive an\nemail and are prompted to accept the invitation within the\nBox web application.\n\nThis method requires the \"Manage An Enterprise\" scope enabled for\nthe application, which can be enabled within the developer console.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "invites"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response, unless explicitly specified.",
                  "key": "fields",
                  "value": "<string>,<string>"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": {
              "type": "oauth2"
            },
            "body": {
              "mode": "raw",
              "raw": "{\n    \"enterprise\": {\n        \"id\": \"<string>\"\n    },\n    \"actionable_by\": {\n        \"login\": \"<string>\"\n    }\n}"
            }
          },
          "response": [
            {
              "id": "2f493f2a-5dcf-4fcb-8aac-c2e7a7232d95",
              "name": "Returns a new invite object.",
              "originalRequest": {
                "url": {
                  "path": [
                    "invites"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "<string>,<string>"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"enterprise\": {\n        \"id\": \"<string>\"\n    },\n    \"actionable_by\": {\n        \"login\": \"<string>\"\n    }\n}"
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"invited_to\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\"\n },\n \"actionable_by\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"invited_by\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"status\": \"<string>\",\n \"created_at\": \"<dateTime>\",\n \"modified_at\": \"<dateTime>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "8cf935db-6135-44a3-a364-51f5f913a003",
          "name": "Get user invite status",
          "request": {
            "name": "Get user invite status",
            "description": {
              "content": "Returns the status of a user invite.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "invites",
                ":invite_id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response, unless explicitly specified.",
                  "key": "fields",
                  "value": "<string>,<string>"
                }
              ],
              "variable": [
                {
                  "description": {
                    "content": "The ID of an invite.",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "invite_id"
                }
              ]
            },
            "method": "GET",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "0401553c-a073-4437-bb17-9855761727f3",
              "name": "Returns an invite object",
              "originalRequest": {
                "url": {
                  "path": [
                    "invites",
                    "<string>"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "<string>,<string>"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"invited_to\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\"\n },\n \"actionable_by\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"invited_by\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"status\": \"<string>\",\n \"created_at\": \"<dateTime>\",\n \"modified_at\": \"<dateTime>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        }
      ],
      "event": []
    },
    {
      "id": "473a881f-f5d9-4adc-b7cd-792b6d7a80dc",
      "name": "groups",
      "item": [
        {
          "id": "7766cc09-012f-4512-a7c9-5e71e99af501",
          "name": "List enterprise groups",
          "request": {
            "name": "List enterprise groups",
            "description": {
              "content": "Retrieves all of the groups for a given enterprise. The user\nmust have admin permissions to inspect enterprise's groups.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "groups"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response, unless explicitly specified.",
                  "key": "fields",
                  "value": "<string>,<string>"
                },
                {
                  "description": "The maximum number of items to return per page.",
                  "key": "limit",
                  "value": "100"
                },
                {
                  "description": "The offset of the item at which to begin the response.",
                  "key": "offset",
                  "value": "<long>"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "cec4dd78-9bef-4408-97c0-05cf2028fc1b",
              "name": "Returns a collection of group objects. If there are no groups, an\nempty collection will be returned.",
              "originalRequest": {
                "url": {
                  "path": [
                    "groups"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "<string>,<string>"
                    },
                    {
                      "key": "limit",
                      "value": "100"
                    },
                    {
                      "key": "offset",
                      "value": "<long>"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"total_count\": \"<long>\",\n \"limit\": \"<long>\",\n \"offset\": \"<long>\",\n \"order\": [\n  {\n   \"by\": \"<string>\",\n   \"direction\": \"<string>\"\n  },\n  {\n   \"by\": \"<string>\",\n   \"direction\": \"<string>\"\n  }\n ],\n \"entries\": [\n  {\n   \"id\": \"schema type not provided\",\n   \"type\": \"<string>\",\n   \"name\": \"<string>\",\n   \"group_type\": \"<string>\",\n   \"created_at\": \"<dateTime>\",\n   \"modified_at\": \"<dateTime>\",\n   \"provenance\": \"<string>\",\n   \"external_sync_identifier\": \"<string>\",\n   \"description\": \"<string>\",\n   \"invitability_level\": \"<string>\",\n   \"member_viewability_level\": \"<string>\"\n  },\n  {\n   \"id\": \"schema type not provided\",\n   \"type\": \"<string>\",\n   \"name\": \"<string>\",\n   \"group_type\": \"<string>\",\n   \"created_at\": \"<dateTime>\",\n   \"modified_at\": \"<dateTime>\",\n   \"provenance\": \"<string>\",\n   \"external_sync_identifier\": \"<string>\",\n   \"description\": \"<string>\",\n   \"invitability_level\": \"<string>\",\n   \"member_viewability_level\": \"<string>\"\n  }\n ]\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "fd587740-8b7e-4335-93d1-c5a2637fa083",
          "name": "Create group",
          "request": {
            "name": "Create group",
            "description": {
              "content": "Creates a new group of users in an enterprise. Only users with admin\npermissions can create new groups.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "groups"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response, unless explicitly specified.",
                  "key": "fields",
                  "value": "<string>,<string>"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": {
              "type": "oauth2"
            },
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"<string>\",\n    \"provenance\": \"<string>\",\n    \"external_sync_identifier\": \"<string>\",\n    \"description\": \"<string>\",\n    \"invitability_level\": \"<string>\",\n    \"member_viewability_level\": \"<string>\"\n}"
            }
          },
          "response": [
            {
              "id": "f1a173f9-4d80-4354-8cec-e0ec86274b9b",
              "name": "Returns the new group object.",
              "originalRequest": {
                "url": {
                  "path": [
                    "groups"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "<string>,<string>"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"<string>\",\n    \"provenance\": \"<string>\",\n    \"external_sync_identifier\": \"<string>\",\n    \"description\": \"<string>\",\n    \"invitability_level\": \"<string>\",\n    \"member_viewability_level\": \"<string>\"\n}"
                }
              },
              "status": "Created",
              "code": 201,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"name\": \"<string>\",\n \"group_type\": \"<string>\",\n \"created_at\": \"<dateTime>\",\n \"modified_at\": \"<dateTime>\",\n \"provenance\": \"<string>\",\n \"external_sync_identifier\": \"<string>\",\n \"description\": \"<string>\",\n \"invitability_level\": \"<string>\",\n \"member_viewability_level\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "1dbf4b66-3ecc-4ccc-b9bd-57469b738883",
          "name": "{group id}",
          "item": [
            {
              "id": "f8d4e0ab-2e1b-4d23-9c5c-c0c65e5ad2cb",
              "name": "Get group",
              "request": {
                "name": "Get group",
                "description": {
                  "content": "Retrieves information about a group.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "groups",
                    ":group_id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response, unless explicitly specified.",
                      "key": "fields",
                      "value": "<string>,<string>"
                    }
                  ],
                  "variable": [
                    {
                      "description": {
                        "content": "The ID of the group.",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "<string>",
                      "key": "group_id"
                    }
                  ]
                },
                "method": "GET",
                "auth": {
                  "type": "oauth2"
                }
              },
              "response": [
                {
                  "id": "74d9e2dc-a0b1-4df2-b15d-f605faf9076b",
                  "name": "Returns the group object",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "groups",
                        "<string>"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "fields",
                          "value": "<string>,<string>"
                        }
                      ],
                      "variable": []
                    },
                    "method": "GET",
                    "body": {}
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"name\": \"<string>\",\n \"group_type\": \"<string>\",\n \"created_at\": \"<dateTime>\",\n \"modified_at\": \"<dateTime>\",\n \"provenance\": \"<string>\",\n \"external_sync_identifier\": \"<string>\",\n \"description\": \"<string>\",\n \"invitability_level\": \"<string>\",\n \"member_viewability_level\": \"<string>\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": []
            },
            {
              "id": "02cbedcb-68e2-44d5-bae9-8ef37d86f086",
              "name": "Update group",
              "request": {
                "name": "Update group",
                "description": {
                  "content": "Updates a specific group.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "groups",
                    ":group_id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response, unless explicitly specified.",
                      "key": "fields",
                      "value": "<string>,<string>"
                    }
                  ],
                  "variable": [
                    {
                      "description": {
                        "content": "The ID of the group.",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "<string>",
                      "key": "group_id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "auth": {
                  "type": "oauth2"
                },
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"<string>\",\n    \"provenance\": \"<string>\",\n    \"external_sync_identifier\": \"<string>\",\n    \"description\": \"<string>\",\n    \"invitability_level\": \"<string>\",\n    \"member_viewability_level\": \"<string>\"\n}"
                }
              },
              "response": [
                {
                  "id": "5ba04b64-d438-4f06-8a34-11ed3d99411c",
                  "name": "Returns the updated group object.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "groups",
                        "<string>"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "fields",
                          "value": "<string>,<string>"
                        }
                      ],
                      "variable": []
                    },
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "method": "PUT",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"name\": \"<string>\",\n    \"provenance\": \"<string>\",\n    \"external_sync_identifier\": \"<string>\",\n    \"description\": \"<string>\",\n    \"invitability_level\": \"<string>\",\n    \"member_viewability_level\": \"<string>\"\n}"
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"name\": \"<string>\",\n \"group_type\": \"<string>\",\n \"created_at\": \"<dateTime>\",\n \"modified_at\": \"<dateTime>\",\n \"provenance\": \"<string>\",\n \"external_sync_identifier\": \"<string>\",\n \"description\": \"<string>\",\n \"invitability_level\": \"<string>\",\n \"member_viewability_level\": \"<string>\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": []
            },
            {
              "id": "4e4cd304-410e-48be-be31-8f6b2b1c7fc0",
              "name": "Delete group",
              "request": {
                "name": "Delete group",
                "description": {
                  "content": "Permanently deletes a group.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "groups",
                    ":group_id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "description": {
                        "content": "The ID of the group.",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "<string>",
                      "key": "group_id"
                    }
                  ]
                },
                "method": "DELETE",
                "auth": {
                  "type": "oauth2"
                }
              },
              "response": [
                {
                  "id": "e1d3883f-31c7-4249-8fe0-527343b7219e",
                  "name": "A blank response is returned if the group was\nsuccessfully deleted.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "groups",
                        "<string>"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "No Content",
                  "code": 204,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "_postman_previewlanguage": "text"
                }
              ],
              "event": []
            },
            {
              "id": "4032c956-9542-46eb-ad30-35298d1ed21d",
              "name": "List group's members",
              "request": {
                "name": "List group's members",
                "description": {
                  "content": "Retrieves all the members for a group. The user\nmust have admin permissions to inspect enterprise's groups.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "groups",
                    ":group_id",
                    "memberships"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "description": "The maximum number of items to return per page.",
                      "key": "limit",
                      "value": "100"
                    },
                    {
                      "description": "The offset of the item at which to begin the response.",
                      "key": "offset",
                      "value": "<long>"
                    }
                  ],
                  "variable": [
                    {
                      "description": {
                        "content": "The ID of the group.",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "<string>",
                      "key": "group_id"
                    }
                  ]
                },
                "method": "GET",
                "auth": {
                  "type": "oauth2"
                }
              },
              "response": [
                {
                  "id": "f6864597-2dc7-49ed-b65e-492cb5b704cf",
                  "name": "Returns a collection of membership objects. If there are no\nmemberships, an empty collection will be returned.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "groups",
                        "<string>",
                        "memberships"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "limit",
                          "value": "100"
                        },
                        {
                          "key": "offset",
                          "value": "<long>"
                        }
                      ],
                      "variable": []
                    },
                    "method": "GET",
                    "body": {}
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n \"total_count\": \"<long>\",\n \"limit\": \"<long>\",\n \"offset\": \"<long>\",\n \"order\": [\n  {\n   \"by\": \"<string>\",\n   \"direction\": \"<string>\"\n  },\n  {\n   \"by\": \"<string>\",\n   \"direction\": \"<string>\"\n  }\n ],\n \"entries\": [\n  {\n   \"id\": \"schema type not provided\",\n   \"type\": \"<string>\",\n   \"user\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"group\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"group_type\": \"<string>\"\n   },\n   \"role\": \"<string>\",\n   \"created_at\": \"<dateTime>\",\n   \"modified_at\": \"<dateTime>\"\n  },\n  {\n   \"id\": \"schema type not provided\",\n   \"type\": \"<string>\",\n   \"user\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"group\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"group_type\": \"<string>\"\n   },\n   \"role\": \"<string>\",\n   \"created_at\": \"<dateTime>\",\n   \"modified_at\": \"<dateTime>\"\n  }\n ]\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": []
            },
            {
              "id": "48f2ad6b-efee-4b2c-b8d1-1b1ec892df3e",
              "name": "List group's collaborations",
              "request": {
                "name": "List group's collaborations",
                "description": {
                  "content": "Retrieves all the collaborations for a group. The user\nmust have admin permissions to inspect enterprise's groups.\n\nEach collaboration object has details on which files or\nfolders the group has access to and with what role.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "groups",
                    ":group_id",
                    "collaborations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "description": "The maximum number of items to return per page.",
                      "key": "limit",
                      "value": "100"
                    },
                    {
                      "description": "The offset of the item at which to begin the response.",
                      "key": "offset",
                      "value": "<long>"
                    }
                  ],
                  "variable": [
                    {
                      "description": {
                        "content": "The ID of the group.",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "<string>",
                      "key": "group_id"
                    }
                  ]
                },
                "method": "GET",
                "auth": {
                  "type": "oauth2"
                }
              },
              "response": [
                {
                  "id": "c0f5b96e-f225-4a8b-a02c-ca3b349a67b5",
                  "name": "Returns a collection of collaboration objects. If there are no\ncollaborations, an empty collection will be returned.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "groups",
                        "<string>",
                        "collaborations"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "limit",
                          "value": "100"
                        },
                        {
                          "key": "offset",
                          "value": "<long>"
                        }
                      ],
                      "variable": []
                    },
                    "method": "GET",
                    "body": {}
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n \"total_count\": \"<long>\",\n \"limit\": \"<long>\",\n \"offset\": \"<long>\",\n \"order\": [\n  {\n   \"by\": \"<string>\",\n   \"direction\": \"<string>\"\n  },\n  {\n   \"by\": \"<string>\",\n   \"direction\": \"<string>\"\n  }\n ],\n \"entries\": [\n  {\n   \"id\": \"<string>\",\n   \"type\": \"<string>\",\n   \"item\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\"\n   },\n   \"accessible_by\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"invite_email\": \"<string>\",\n   \"role\": \"<string>\",\n   \"expires_at\": \"<dateTime>\",\n   \"can_view_path\": \"<boolean>\",\n   \"status\": \"<string>\",\n   \"acknowledged_at\": \"<dateTime>\",\n   \"created_by\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"created_at\": \"<dateTime>\",\n   \"modified_at\": \"<dateTime>\",\n   \"acceptance_requirements_status\": {\n    \"terms_of_service_requirement\": {\n     \"is_accepted\": \"<boolean>\",\n     \"terms_of_service\": {\n      \"id\": \"<string>\",\n      \"type\": \"<string>\"\n     }\n    },\n    \"strong_password_requirement\": {\n     \"enterprise_has_strong_password_required_for_external_users\": \"<boolean>\",\n     \"user_has_strong_password\": \"<boolean>\"\n    },\n    \"two_factor_authentication_requirement\": {\n     \"enterprise_has_two_factor_auth_enabled\": \"<boolean>\",\n     \"user_has_two_factor_authentication_enabled\": \"<boolean>\"\n    }\n   }\n  },\n  {\n   \"id\": \"<string>\",\n   \"type\": \"<string>\",\n   \"item\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\"\n   },\n   \"accessible_by\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"invite_email\": \"<string>\",\n   \"role\": \"<string>\",\n   \"expires_at\": \"<dateTime>\",\n   \"can_view_path\": \"<boolean>\",\n   \"status\": \"<string>\",\n   \"acknowledged_at\": \"<dateTime>\",\n   \"created_by\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"created_at\": \"<dateTime>\",\n   \"modified_at\": \"<dateTime>\",\n   \"acceptance_requirements_status\": {\n    \"terms_of_service_requirement\": {\n     \"is_accepted\": \"<boolean>\",\n     \"terms_of_service\": {\n      \"id\": \"<string>\",\n      \"type\": \"<string>\"\n     }\n    },\n    \"strong_password_requirement\": {\n     \"enterprise_has_strong_password_required_for_external_users\": \"<boolean>\",\n     \"user_has_strong_password\": \"<boolean>\"\n    },\n    \"two_factor_authentication_requirement\": {\n     \"enterprise_has_two_factor_auth_enabled\": \"<boolean>\",\n     \"user_has_two_factor_authentication_enabled\": \"<boolean>\"\n    }\n   }\n  }\n ]\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": []
            }
          ],
          "event": []
        }
      ],
      "event": []
    },
    {
      "id": "b66e52cd-a787-457f-9cc1-71d0f1e5aafb",
      "name": "group memberships",
      "item": [
        {
          "id": "17defcaa-e98f-4808-88a8-7d5eec301797",
          "name": "Add user to group",
          "request": {
            "name": "Add user to group",
            "description": {
              "content": "Creates a group membership",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "group_memberships"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response, unless explicitly specified.",
                  "key": "fields",
                  "value": "<string>,<string>"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": {
              "type": "oauth2"
            },
            "body": {
              "mode": "raw",
              "raw": "{\n    \"user\": {\n        \"id\": \"<string>\"\n    },\n    \"group\": {\n        \"id\": \"<string>\"\n    },\n    \"role\": \"<string>\",\n    \"configurable_permissions\": \"<object>\"\n}"
            }
          },
          "response": [
            {
              "id": "99ee5b6e-dfc2-401f-8870-44eef0b5db93",
              "name": "Returns a new group membership object.",
              "originalRequest": {
                "url": {
                  "path": [
                    "group_memberships"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "<string>,<string>"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"user\": {\n        \"id\": \"<string>\"\n    },\n    \"group\": {\n        \"id\": \"<string>\"\n    },\n    \"role\": \"<string>\",\n    \"configurable_permissions\": \"<object>\"\n}"
                }
              },
              "status": "Created",
              "code": 201,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"user\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"group\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"group_type\": \"<string>\"\n },\n \"role\": \"<string>\",\n \"created_at\": \"<dateTime>\",\n \"modified_at\": \"<dateTime>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "75c0ed98-3764-4d57-a708-288a72268fbd",
          "name": "{group membership id}",
          "item": [
            {
              "id": "60e77ffc-ce7e-4322-88ef-dffc9e226e49",
              "name": "Get group membership",
              "request": {
                "name": "Get group membership",
                "description": {
                  "content": "Retrieves a specific group membership.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "group_memberships",
                    ":group_membership_id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response, unless explicitly specified.",
                      "key": "fields",
                      "value": "<string>,<string>"
                    }
                  ],
                  "variable": [
                    {
                      "description": {
                        "content": "The ID of the group membership.",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "<string>",
                      "key": "group_membership_id"
                    }
                  ]
                },
                "method": "GET",
                "auth": {
                  "type": "oauth2"
                }
              },
              "response": [
                {
                  "id": "4b5ff7aa-e3ff-41b0-9371-c83a8488ef45",
                  "name": "Returns the group membership object.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "group_memberships",
                        "<string>"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "fields",
                          "value": "<string>,<string>"
                        }
                      ],
                      "variable": []
                    },
                    "method": "GET",
                    "body": {}
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"user\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"group\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"group_type\": \"<string>\"\n },\n \"role\": \"<string>\",\n \"created_at\": \"<dateTime>\",\n \"modified_at\": \"<dateTime>\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": []
            },
            {
              "id": "dbf85ee9-b3fd-4824-b484-f2b68907e1fb",
              "name": "Update user's membership",
              "request": {
                "name": "Update user's membership",
                "description": {
                  "content": "Updates a user's group membership.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "group_memberships",
                    ":group_membership_id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response, unless explicitly specified.",
                      "key": "fields",
                      "value": "<string>,<string>"
                    }
                  ],
                  "variable": [
                    {
                      "description": {
                        "content": "The ID of the group membership.",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "<string>",
                      "key": "group_membership_id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "auth": {
                  "type": "oauth2"
                },
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"role\": \"<string>\",\n    \"configurable_permissions\": \"<object>\"\n}"
                }
              },
              "response": [
                {
                  "id": "dc6a0f25-4715-48eb-afdf-cca621bdee0d",
                  "name": "Returns a new group membership object.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "group_memberships",
                        "<string>"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "fields",
                          "value": "<string>,<string>"
                        }
                      ],
                      "variable": []
                    },
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "method": "PUT",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"role\": \"<string>\",\n    \"configurable_permissions\": \"<object>\"\n}"
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"user\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"group\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"group_type\": \"<string>\"\n },\n \"role\": \"<string>\",\n \"created_at\": \"<dateTime>\",\n \"modified_at\": \"<dateTime>\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": []
            },
            {
              "id": "9a5fa5c7-d0c1-4368-b978-e82734cf461d",
              "name": "Remove user from group",
              "request": {
                "name": "Remove user from group",
                "description": {
                  "content": "Deletes a specific group membership.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "group_memberships",
                    ":group_membership_id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "description": {
                        "content": "The ID of the group membership.",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "<string>",
                      "key": "group_membership_id"
                    }
                  ]
                },
                "method": "DELETE",
                "auth": {
                  "type": "oauth2"
                }
              },
              "response": [
                {
                  "id": "0fb97623-dd79-4c7b-b70c-6ea97b3b65e4",
                  "name": "A blank response is returned if the membership was\nsuccessfully deleted.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "group_memberships",
                        "<string>"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "No Content",
                  "code": 204,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "_postman_previewlanguage": "text"
                }
              ],
              "event": []
            }
          ],
          "event": []
        }
      ],
      "event": []
    },
    {
      "id": "a06f05c9-a67f-4449-a262-14bff0280a10",
      "name": "webhooks",
      "item": [
        {
          "id": "961799a5-b536-417b-b659-7684377bcf5c",
          "name": "List all webhooks",
          "request": {
            "name": "List all webhooks",
            "description": {
              "content": "Returns all defined webhooks for the requesting application.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "webhooks"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "description": "The position marker at which to begin the response.\n\nThis requires `usemarker` to be set to true.",
                  "key": "marker",
                  "value": "<string>"
                },
                {
                  "description": "The maximum number of items to return per page.",
                  "key": "limit",
                  "value": "100"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "5b9fc632-0e96-4933-a492-4b4ae4d48417",
              "name": "Returns a list of webhooks.",
              "originalRequest": {
                "url": {
                  "path": [
                    "webhooks"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "marker",
                      "value": "<string>"
                    },
                    {
                      "key": "limit",
                      "value": "100"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"limit\": \"<long>\",\n \"next_marker\": \"<long>\",\n \"prev_marker\": \"<long>\",\n \"entries\": [\n  {\n   \"id\": \"schema type not provided\",\n   \"type\": \"<string>\",\n   \"target\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\"\n   },\n   \"created_by\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"created_at\": \"<dateTime>\",\n   \"address\": \"<string>\",\n   \"triggers\": [\n    \"<string>\",\n    \"<string>\"\n   ]\n  },\n  {\n   \"id\": \"schema type not provided\",\n   \"type\": \"<string>\",\n   \"target\": {\n    \"id\": \"<string>\",\n    \"type\": \"<string>\"\n   },\n   \"created_by\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"created_at\": \"<dateTime>\",\n   \"address\": \"<string>\",\n   \"triggers\": [\n    \"<string>\",\n    \"<string>\"\n   ]\n  }\n ]\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "1eec0c97-3251-4259-90c6-af41a7a437c3",
              "name": "Returns an error if the application does not\nhave the permission to manage webhooks.",
              "originalRequest": {
                "url": {
                  "path": [
                    "webhooks"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "marker",
                      "value": "<string>"
                    },
                    {
                      "key": "limit",
                      "value": "100"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Forbidden",
              "code": 403,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "8225027c-924b-4f84-8719-4b8d28e0f10e",
          "name": "Create webhook",
          "request": {
            "name": "Create webhook",
            "description": {
              "content": "Creates a webhook.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "webhooks"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": {
              "type": "oauth2"
            },
            "body": {
              "mode": "raw",
              "raw": "{\n    \"target\": {\n        \"id\": \"<string>\",\n        \"type\": \"<string>\"\n    },\n    \"triggers\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"address\": \"<string>\"\n}"
            }
          },
          "response": [
            {
              "id": "f0a0cdca-98ed-4f63-8305-07bad6ea13fc",
              "name": "Returns the new webhook object.",
              "originalRequest": {
                "url": {
                  "path": [
                    "webhooks"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"target\": {\n        \"id\": \"<string>\",\n        \"type\": \"<string>\"\n    },\n    \"triggers\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"address\": \"<string>\"\n}"
                }
              },
              "status": "Created",
              "code": 201,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"target\": {\n  \"id\": \"<string>\",\n  \"type\": \"<string>\"\n },\n \"created_by\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"created_at\": \"<dateTime>\",\n \"address\": \"<string>\",\n \"triggers\": [\n  \"<string>\",\n  \"<string>\"\n ]\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "77db5eca-1c86-4277-8e31-4821a2a26c5d",
              "name": "Returns an error if the parameters were\nincorrect.",
              "originalRequest": {
                "url": {
                  "path": [
                    "webhooks"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"target\": {\n        \"id\": \"<string>\",\n        \"type\": \"<string>\"\n    },\n    \"triggers\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"address\": \"<string>\"\n}"
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "80c3b310-4a41-46c9-bb92-d01acb12e888",
              "name": "Returns an error if the application does not\nhave the permission to manage webhooks.",
              "originalRequest": {
                "url": {
                  "path": [
                    "webhooks"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"target\": {\n        \"id\": \"<string>\",\n        \"type\": \"<string>\"\n    },\n    \"triggers\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"address\": \"<string>\"\n}"
                }
              },
              "status": "Forbidden",
              "code": 403,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "6747fb62-b055-4c3a-addd-85dfb5389662",
              "name": "Returns an error if the target item could\nnot be found",
              "originalRequest": {
                "url": {
                  "path": [
                    "webhooks"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"target\": {\n        \"id\": \"<string>\",\n        \"type\": \"<string>\"\n    },\n    \"triggers\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"address\": \"<string>\"\n}"
                }
              },
              "status": "Not Found",
              "code": 404,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "d3d77eac-7dd7-40bc-8bdb-d67cc46a6617",
              "name": "Returns an error if the a webhook for this\ncombination of target, application, and user\nalready exists.",
              "originalRequest": {
                "url": {
                  "path": [
                    "webhooks"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"target\": {\n        \"id\": \"<string>\",\n        \"type\": \"<string>\"\n    },\n    \"triggers\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"address\": \"<string>\"\n}"
                }
              },
              "status": "Conflict",
              "code": 409,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "7817751a-9956-488c-b34e-fc33d1ef0a70",
          "name": "{webhook id}",
          "item": [
            {
              "id": "b2700a68-b717-469d-b41d-dfe23e213db8",
              "name": "Get webhook",
              "request": {
                "name": "Get webhook",
                "description": {
                  "content": "Retrieves a specific webhook",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "webhooks",
                    ":webhook_id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "description": {
                        "content": "The ID of the webhook.",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "<string>",
                      "key": "webhook_id"
                    }
                  ]
                },
                "method": "GET",
                "auth": {
                  "type": "oauth2"
                }
              },
              "response": [
                {
                  "id": "acd391fa-af8c-40f1-838a-6859383ec69e",
                  "name": "Returns a webhook object",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "webhooks",
                        "<string>"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "method": "GET",
                    "body": {}
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"target\": {\n  \"id\": \"<string>\",\n  \"type\": \"<string>\"\n },\n \"created_by\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"created_at\": \"<dateTime>\",\n \"address\": \"<string>\",\n \"triggers\": [\n  \"<string>\",\n  \"<string>\"\n ]\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "6a8ef2f2-e1e2-4f18-8d98-60c838b5a334",
                  "name": "Returns an error if the application does not\nhave the permission to manage webhooks.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "webhooks",
                        "<string>"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Forbidden",
                  "code": 403,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "0cc77667-511a-42c2-bb2b-e6467c3c0ec8",
                  "name": "Returns an error if the webhook could not be found",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "webhooks",
                        "<string>"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Not Found",
                  "code": 404,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": []
            },
            {
              "id": "2bca8d8e-29cd-4eac-8656-fc554d396794",
              "name": "Update webhook",
              "request": {
                "name": "Update webhook",
                "description": {
                  "content": "Updates a webhook.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "webhooks",
                    ":webhook_id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "description": {
                        "content": "The ID of the webhook.",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "<string>",
                      "key": "webhook_id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "auth": {
                  "type": "oauth2"
                },
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"target\": {\n        \"id\": \"<string>\",\n        \"type\": \"<string>\"\n    },\n    \"address\": \"<string>\",\n    \"triggers\": [\n        \"<string>\",\n        \"<string>\"\n    ]\n}"
                }
              },
              "response": [
                {
                  "id": "04496994-eb27-4303-a2ce-796df500ec6d",
                  "name": "Returns the new webhook object.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "webhooks",
                        "<string>"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "method": "PUT",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"target\": {\n        \"id\": \"<string>\",\n        \"type\": \"<string>\"\n    },\n    \"address\": \"<string>\",\n    \"triggers\": [\n        \"<string>\",\n        \"<string>\"\n    ]\n}"
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"target\": {\n  \"id\": \"<string>\",\n  \"type\": \"<string>\"\n },\n \"created_by\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"created_at\": \"<dateTime>\",\n \"address\": \"<string>\",\n \"triggers\": [\n  \"<string>\",\n  \"<string>\"\n ]\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "a9f587be-6bbb-49d4-b408-e7ae20e7f66c",
                  "name": "Returns an error if the parameters were\nincorrect.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "webhooks",
                        "<string>"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "method": "PUT",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"target\": {\n        \"id\": \"<string>\",\n        \"type\": \"<string>\"\n    },\n    \"address\": \"<string>\",\n    \"triggers\": [\n        \"<string>\",\n        \"<string>\"\n    ]\n}"
                    }
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "ce8062ee-384b-4e47-9d39-5e206a554133",
                  "name": "Returns an error if the application does not\nhave the permission to manage webhooks.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "webhooks",
                        "<string>"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "method": "PUT",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"target\": {\n        \"id\": \"<string>\",\n        \"type\": \"<string>\"\n    },\n    \"address\": \"<string>\",\n    \"triggers\": [\n        \"<string>\",\n        \"<string>\"\n    ]\n}"
                    }
                  },
                  "status": "Forbidden",
                  "code": 403,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "33606732-db31-4126-a2d8-9eaa80a73c67",
                  "name": "Returns an error if the target item or webhook\ncould not be found",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "webhooks",
                        "<string>"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "method": "PUT",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"target\": {\n        \"id\": \"<string>\",\n        \"type\": \"<string>\"\n    },\n    \"address\": \"<string>\",\n    \"triggers\": [\n        \"<string>\",\n        \"<string>\"\n    ]\n}"
                    }
                  },
                  "status": "Not Found",
                  "code": 404,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "f9c9b82b-4c13-497d-97e7-153ec13533da",
                  "name": "Returns an error if the a webhook for this\ncombination of target, application, and user\nalready exists.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "webhooks",
                        "<string>"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "method": "PUT",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"target\": {\n        \"id\": \"<string>\",\n        \"type\": \"<string>\"\n    },\n    \"address\": \"<string>\",\n    \"triggers\": [\n        \"<string>\",\n        \"<string>\"\n    ]\n}"
                    }
                  },
                  "status": "Conflict",
                  "code": 409,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": []
            },
            {
              "id": "5c93f6a8-498e-4eaa-afa7-44f3605d859d",
              "name": "Delete webhook",
              "request": {
                "name": "Delete webhook",
                "description": {
                  "content": "Deletes a webhook.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "webhooks",
                    ":webhook_id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "description": {
                        "content": "The ID of the webhook.",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "<string>",
                      "key": "webhook_id"
                    }
                  ]
                },
                "method": "DELETE",
                "auth": {
                  "type": "oauth2"
                }
              },
              "response": [
                {
                  "id": "d4e3f924-c8b9-403d-ab99-e2751db15916",
                  "name": "An empty response will be returned when the webhook\nwas successfully deleted.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "webhooks",
                        "<string>"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "No Content",
                  "code": 204,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "_postman_previewlanguage": "text"
                },
                {
                  "id": "2b7e93eb-1299-42c6-908d-a6d39a688df2",
                  "name": "Returns an error if the application does not\nhave the permission to manage webhooks.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "webhooks",
                        "<string>"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "Forbidden",
                  "code": 403,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "c900ca0c-04c6-45ba-bde9-d05008f5e348",
                  "name": "Returns an error if the webhook could not be found",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "webhooks",
                        "<string>"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "Not Found",
                  "code": 404,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": []
            }
          ],
          "event": []
        }
      ],
      "event": []
    },
    {
      "id": "09a0e481-85fd-4dce-97ec-454eebc7e35f",
      "name": "Update skill invocation",
      "request": {
        "name": "Update skill invocation",
        "description": {
          "content": "Updates the status, usage and response metadata of a\nskill invocation.",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "skill_invocations",
            ":skill_invocation_id"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": [
            {
              "description": {
                "content": "The ID of the skill invocation.",
                "type": "text/plain"
              },
              "type": "any",
              "value": "<string>",
              "key": "skill_invocation_id"
            }
          ]
        },
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "method": "PUT",
        "auth": {
          "type": "oauth2"
        },
        "body": {
          "mode": "raw",
          "raw": "{\n    \"status\": \"<string>\",\n    \"metadata\": {\n        \"cards\": [\n            {\n                \"type\": \"<string>\",\n                \"created_at\": \"<dateTime>\",\n                \"skill\": {\n                    \"type\": \"<string>\",\n                    \"id\": \"<string>\"\n                },\n                \"skill_card_title\": {\n                    \"code\": \"<string>\",\n                    \"message\": \"<string>\"\n                },\n                \"skill_card_type\": \"<string>\",\n                \"invocation\": {\n                    \"type\": \"<string>\",\n                    \"id\": \"<string>\"\n                },\n                \"status\": {\n                    \"code\": \"<string>\",\n                    \"message\": \"<string>\"\n                },\n                \"entries\": [\n                    {\n                        \"type\": \"<string>\",\n                        \"text\": \"<string>\"\n                    },\n                    {\n                        \"type\": \"<string>\",\n                        \"text\": \"<string>\"\n                    }\n                ],\n                \"duration\": \"<integer>\"\n            },\n            {\n                \"type\": \"<string>\",\n                \"created_at\": \"<dateTime>\",\n                \"skill\": {\n                    \"type\": \"<string>\",\n                    \"id\": \"<string>\"\n                },\n                \"skill_card_title\": {\n                    \"code\": \"<string>\",\n                    \"message\": \"<string>\"\n                },\n                \"skill_card_type\": \"<string>\",\n                \"invocation\": {\n                    \"type\": \"<string>\",\n                    \"id\": \"<string>\"\n                },\n                \"status\": {\n                    \"code\": \"<string>\",\n                    \"message\": \"<string>\"\n                },\n                \"entries\": [\n                    {\n                        \"type\": \"<string>\",\n                        \"text\": \"<string>\"\n                    },\n                    {\n                        \"type\": \"<string>\",\n                        \"text\": \"<string>\"\n                    }\n                ],\n                \"duration\": \"<integer>\"\n            }\n        ]\n    },\n    \"file\": {\n        \"type\": \"<string>\",\n        \"id\": \"<string>\"\n    },\n    \"file_version\": {\n        \"type\": \"<string>\",\n        \"id\": \"<string>\"\n    }\n}"
        }
      },
      "response": [
        {
          "id": "6c4b7877-e4fb-4386-afae-7962dbc8c0e1",
          "name": "Returns an empty response.",
          "originalRequest": {
            "url": {
              "path": [
                "skill_invocations",
                "<string>"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"status\": \"<string>\",\n    \"metadata\": {\n        \"cards\": [\n            {\n                \"type\": \"<string>\",\n                \"created_at\": \"<dateTime>\",\n                \"skill\": {\n                    \"type\": \"<string>\",\n                    \"id\": \"<string>\"\n                },\n                \"skill_card_title\": {\n                    \"code\": \"<string>\",\n                    \"message\": \"<string>\"\n                },\n                \"skill_card_type\": \"<string>\",\n                \"invocation\": {\n                    \"type\": \"<string>\",\n                    \"id\": \"<string>\"\n                },\n                \"status\": {\n                    \"code\": \"<string>\",\n                    \"message\": \"<string>\"\n                },\n                \"entries\": [\n                    {\n                        \"type\": \"<string>\",\n                        \"text\": \"<string>\"\n                    },\n                    {\n                        \"type\": \"<string>\",\n                        \"text\": \"<string>\"\n                    }\n                ],\n                \"duration\": \"<integer>\"\n            },\n            {\n                \"type\": \"<string>\",\n                \"created_at\": \"<dateTime>\",\n                \"skill\": {\n                    \"type\": \"<string>\",\n                    \"id\": \"<string>\"\n                },\n                \"skill_card_title\": {\n                    \"code\": \"<string>\",\n                    \"message\": \"<string>\"\n                },\n                \"skill_card_type\": \"<string>\",\n                \"invocation\": {\n                    \"type\": \"<string>\",\n                    \"id\": \"<string>\"\n                },\n                \"status\": {\n                    \"code\": \"<string>\",\n                    \"message\": \"<string>\"\n                },\n                \"entries\": [\n                    {\n                        \"type\": \"<string>\",\n                        \"text\": \"<string>\"\n                    },\n                    {\n                        \"type\": \"<string>\",\n                        \"text\": \"<string>\"\n                    }\n                ],\n                \"duration\": \"<integer>\"\n            }\n        ]\n    },\n    \"file\": {\n        \"type\": \"<string>\",\n        \"id\": \"<string>\"\n    },\n    \"file_version\": {\n        \"type\": \"<string>\",\n        \"id\": \"<string>\"\n    }\n}"
            }
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "text/plain"
            }
          ],
          "body": "",
          "cookie": [],
          "_postman_previewlanguage": "text"
        }
      ],
      "event": []
    },
    {
      "id": "04143e0f-6536-44a0-b40c-6c4a26b37888",
      "name": "events",
      "item": [
        {
          "id": "96e70a9d-ed2b-4bff-aba0-1393feb15432",
          "name": "Get a long poll endpoint",
          "request": {
            "name": "Get a long poll endpoint",
            "description": {
              "content": "Returns a list of real-time servers that can be used for long-polling updates\nto the [event stream](#get-events).\n\nLong polling is the concept where a HTTP request is kept open until the\nserver sends a response, then repeating the process over and over to receive\nupdated responses.\n\nLong polling the event stream can only be used for user events, not for\nenterprise events.\n\nTo use long polling, first use this endpoint to retrieve a list of long poll\nURLs. Next, make a long poll request to any of the provided URLs.\n\nWhen an event occurs in monitored account a response with the value\n`new_change` will be sent. The response contains no other details as\nit simply serves as a prompt to take further action such as sending a\nrequest to the [events endpoint](#get-events) with the last known\n`stream_position`.\n\nAfter the server sends this response it closes the connection. You must now\nrepeat the long poll process to begin listening for events again.\n\nIf no events occur for a while and the connection times out you will\nreceive a response with the value `reconnect`. When you receive this response\nyou’ll make another call to this endpoint to restart the process.\n\nIf you receive no events in `retry_timeout` seconds then you will need to\nmake another request to the real-time server (one of the URLs in the response\nfor this endpoint). This might be necessary due to network errors.\n\nFinally, if you receive a `max_retries` error when making a request to the\nreal-time server, you should start over by making a call to this endpoint\nfirst.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "events"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "OPTIONS",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "4421b4dd-c8ba-4970-b9b6-a059d9b70eda",
              "name": "Returns a paginated array of servers that can be used\ninstead of the regular endpoints for long-polling events.",
              "originalRequest": {
                "url": {
                  "path": [
                    "events"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "OPTIONS",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"chunk_size\": \"<long>\",\n \"entries\": [\n  {\n   \"type\": \"<string>\",\n   \"url\": \"<string>\",\n   \"ttl\": \"<integer>\",\n   \"max_retries\": \"<integer>\",\n   \"retry_timeout\": \"<integer>\"\n  },\n  {\n   \"type\": \"<string>\",\n   \"url\": \"<string>\",\n   \"ttl\": \"<integer>\",\n   \"max_retries\": \"<integer>\",\n   \"retry_timeout\": \"<integer>\"\n  }\n ]\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "1e205305-f840-4956-bf6e-3bd61bba0e61",
          "name": "Get user and enterprise events",
          "request": {
            "name": "Get user and enterprise events",
            "description": {
              "content": "Returns up to a year of past events for a given user\nor for the entire enterprise.\n\nBy default this returns events for the authenticated user. To retrieve\nevents for the entire enterprise, set the `stream_type` to `admin_logs`.\nThe user making the API call will need to have admin privileges, and\nthe application will need to have the permission to access the event feed\nto get the enterprise event feed.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "events"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "description": "Defines the type of events that are returned\n\n* `all` returns everything for a user and is the default\n* `changes` returns events that may cause file tree changes\n  such as file updates or collaborations.\n* `sync` is similar to `changes` but only applies to synced folders\n* `admin_logs` returns all events for an entire enterprise and\n  requires the user making the API call to have admin permissions.",
                  "key": "stream_type",
                  "value": "all"
                },
                {
                  "description": "The location in the event stream to start receiving events from.\n\n* `now` will return an empty list events and\nthe latest stream position for initialization.\n* `0` or `null` will return all events.",
                  "key": "stream_position",
                  "value": "<string>"
                },
                {
                  "description": "Limits the number of events returned",
                  "key": "limit",
                  "value": "100"
                },
                {
                  "description": "A comma-separated list of events to filter by.",
                  "key": "event_type",
                  "value": "<string>,<string>"
                },
                {
                  "description": "The lower bound date and time to return events for.",
                  "key": "created_after",
                  "value": "<dateTime>"
                },
                {
                  "description": "The upper bound date and time to return events for.",
                  "key": "created_before",
                  "value": "<dateTime>"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "1476fabb-8a76-4728-8629-efc2ba2f3519",
              "name": "Returns a list of event objects.\n\nEvents objects are returned in pages, with each page (chunk)\nincluding a list of event objects. The response also includes a\n`chunk_size` parameter indicating how many\nchunks are left, as well as the next `stream_position` that can be\nqueried.",
              "originalRequest": {
                "url": {
                  "path": [
                    "events"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "stream_type",
                      "value": "all"
                    },
                    {
                      "key": "stream_position",
                      "value": "<string>"
                    },
                    {
                      "key": "limit",
                      "value": "100"
                    },
                    {
                      "key": "event_type",
                      "value": "<string>,<string>"
                    },
                    {
                      "key": "created_after",
                      "value": "<dateTime>"
                    },
                    {
                      "key": "created_before",
                      "value": "<dateTime>"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"chunk_size\": \"<long>\",\n \"next_stream_position\": \"<string>\",\n \"entries\": [\n  {\n   \"type\": \"<string>\",\n   \"event_id\": \"<string>\",\n   \"created_by\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"event_type\": {},\n   \"session_id\": \"<string>\",\n   \"source\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\",\n    \"sha1\": \"<digest>\",\n    \"description\": \"<string>\",\n    \"size\": \"<integer>\",\n    \"path_collection\": [\n     {\n      \"id\": \"<string>\",\n      \"type\": \"<string>\",\n      \"sequence_id\": \"<string>\",\n      \"etag\": \"<string>\",\n      \"name\": \"<string>\"\n     },\n     {\n      \"id\": \"<string>\",\n      \"type\": \"<string>\",\n      \"sequence_id\": \"<string>\",\n      \"etag\": \"<string>\",\n      \"name\": \"<string>\"\n     }\n    ],\n    \"created_at\": \"<dateTime>\",\n    \"modified_at\": \"<dateTime>\",\n    \"trashed_at\": \"<dateTime>\",\n    \"purged_at\": \"<dateTime>\",\n    \"content_created_at\": \"<dateTime>\",\n    \"content_modified_at\": \"<dateTime>\",\n    \"expires_at\": \"<dateTime>\",\n    \"created_by\": {\n     \"id\": \"<string>\",\n     \"type\": \"<string>\",\n     \"name\": \"<string>\",\n     \"login\": \"<email>\"\n    },\n    \"modified_by\": {\n     \"id\": \"<string>\",\n     \"type\": \"<string>\",\n     \"name\": \"<string>\",\n     \"login\": \"<email>\"\n    },\n    \"owned_by\": {\n     \"id\": \"<string>\",\n     \"type\": \"<string>\",\n     \"name\": \"<string>\",\n     \"login\": \"<email>\"\n    },\n    \"shared_link\": {\n     \"url\": \"<url>\",\n     \"download_url\": \"<url>\",\n     \"vanity_url\": \"<url>\",\n     \"access\": \"<string>\",\n     \"effective_access\": \"<string>\",\n     \"effective_permission\": \"<string>\",\n     \"unshared_at\": \"<dateTime>\",\n     \"is_password_enabled\": \"<boolean>\",\n     \"permissions\": {\n      \"can_download\": \"<boolean>\",\n      \"can_preview\": \"<boolean>\"\n     },\n     \"download_count\": \"<integer>\",\n     \"preview_count\": \"<integer>\"\n    },\n    \"parent\": {\n     \"id\": \"<string>\",\n     \"type\": \"<string>\",\n     \"sequence_id\": \"<string>\",\n     \"etag\": \"<string>\",\n     \"name\": \"<string>\"\n    },\n    \"item_status\": \"<string>\"\n   },\n   \"additional_details\": \"<object>\"\n  },\n  {\n   \"type\": \"<string>\",\n   \"event_id\": \"<string>\",\n   \"created_by\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"event_type\": {},\n   \"session_id\": \"<string>\",\n   \"source\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\",\n    \"sha1\": \"<digest>\",\n    \"description\": \"<string>\",\n    \"size\": \"<integer>\",\n    \"path_collection\": [\n     {\n      \"id\": \"<string>\",\n      \"type\": \"<string>\",\n      \"sequence_id\": \"<string>\",\n      \"etag\": \"<string>\",\n      \"name\": \"<string>\"\n     },\n     {\n      \"id\": \"<string>\",\n      \"type\": \"<string>\",\n      \"sequence_id\": \"<string>\",\n      \"etag\": \"<string>\",\n      \"name\": \"<string>\"\n     }\n    ],\n    \"created_at\": \"<dateTime>\",\n    \"modified_at\": \"<dateTime>\",\n    \"trashed_at\": \"<dateTime>\",\n    \"purged_at\": \"<dateTime>\",\n    \"content_created_at\": \"<dateTime>\",\n    \"content_modified_at\": \"<dateTime>\",\n    \"expires_at\": \"<dateTime>\",\n    \"created_by\": {\n     \"id\": \"<string>\",\n     \"type\": \"<string>\",\n     \"name\": \"<string>\",\n     \"login\": \"<email>\"\n    },\n    \"modified_by\": {\n     \"id\": \"<string>\",\n     \"type\": \"<string>\",\n     \"name\": \"<string>\",\n     \"login\": \"<email>\"\n    },\n    \"owned_by\": {\n     \"id\": \"<string>\",\n     \"type\": \"<string>\",\n     \"name\": \"<string>\",\n     \"login\": \"<email>\"\n    },\n    \"shared_link\": {\n     \"url\": \"<url>\",\n     \"download_url\": \"<url>\",\n     \"vanity_url\": \"<url>\",\n     \"access\": \"<string>\",\n     \"effective_access\": \"<string>\",\n     \"effective_permission\": \"<string>\",\n     \"unshared_at\": \"<dateTime>\",\n     \"is_password_enabled\": \"<boolean>\",\n     \"permissions\": {\n      \"can_download\": \"<boolean>\",\n      \"can_preview\": \"<boolean>\"\n     },\n     \"download_count\": \"<integer>\",\n     \"preview_count\": \"<integer>\"\n    },\n    \"parent\": {\n     \"id\": \"<string>\",\n     \"type\": \"<string>\",\n     \"sequence_id\": \"<string>\",\n     \"etag\": \"<string>\",\n     \"name\": \"<string>\"\n    },\n    \"item_status\": \"<string>\"\n   },\n   \"additional_details\": \"<object>\"\n  }\n ]\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        }
      ],
      "event": []
    },
    {
      "id": "72ad647e-6563-4ed0-939a-6390cbc34600",
      "name": "collections",
      "item": [
        {
          "id": "1fbc538d-60dd-40a3-8be4-f2fab3d74f78",
          "name": "List all collections",
          "request": {
            "name": "List all collections",
            "description": {
              "content": "Retrieves all collections for a given user.\n\nCurrently, only the `favorites` collection\nis supported.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "collections"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response, unless explicitly specified.",
                  "key": "fields",
                  "value": "<string>,<string>"
                },
                {
                  "description": "The offset of the item at which to begin the response.",
                  "key": "offset",
                  "value": "<long>"
                },
                {
                  "description": "The maximum number of items to return per page.",
                  "key": "limit",
                  "value": "100"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "d6e4986b-0c70-4137-bf2e-38cd1c1b1a0b",
              "name": "Returns all collections for the given user",
              "originalRequest": {
                "url": {
                  "path": [
                    "collections"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "<string>,<string>"
                    },
                    {
                      "key": "offset",
                      "value": "<long>"
                    },
                    {
                      "key": "limit",
                      "value": "100"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"total_count\": \"<long>\",\n \"limit\": \"<long>\",\n \"offset\": \"<long>\",\n \"order\": [\n  {\n   \"by\": \"<string>\",\n   \"direction\": \"<string>\"\n  },\n  {\n   \"by\": \"<string>\",\n   \"direction\": \"<string>\"\n  }\n ],\n \"entries\": [\n  {\n   \"id\": \"schema type not provided\",\n   \"type\": \"<string>\",\n   \"name\": \"<string>\",\n   \"collection_type\": \"<string>\"\n  },\n  {\n   \"id\": \"schema type not provided\",\n   \"type\": \"<string>\",\n   \"name\": \"<string>\",\n   \"collection_type\": \"<string>\"\n  }\n ]\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "8b3bd093-30f0-49fa-ba7b-b51291db6396",
          "name": "List collection items",
          "request": {
            "name": "List collection items",
            "description": {
              "content": "Retrieves the files and/or folders contained within\nthis collection.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "collections",
                ":collection_id",
                "items"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response, unless explicitly specified.",
                  "key": "fields",
                  "value": "<string>,<string>"
                },
                {
                  "description": "The offset of the item at which to begin the response.",
                  "key": "offset",
                  "value": "<long>"
                },
                {
                  "description": "The maximum number of items to return per page.",
                  "key": "limit",
                  "value": "100"
                }
              ],
              "variable": [
                {
                  "description": {
                    "content": "The ID of the collection.",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "collection_id"
                }
              ]
            },
            "method": "GET",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "cce86980-161d-4bc8-9811-1e293d87ee81",
              "name": "Returns an array of items in the collection.",
              "originalRequest": {
                "url": {
                  "path": [
                    "collections",
                    "<string>",
                    "items"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "<string>,<string>"
                    },
                    {
                      "key": "offset",
                      "value": "<long>"
                    },
                    {
                      "key": "limit",
                      "value": "100"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"total_count\": \"<long>\",\n \"limit\": \"<long>\",\n \"offset\": \"<long>\",\n \"order\": [\n  {\n   \"by\": \"<string>\",\n   \"direction\": \"<string>\"\n  },\n  {\n   \"by\": \"<string>\",\n   \"direction\": \"<string>\"\n  }\n ],\n \"entries\": [\n  {\n   \"id\": \"schema type not provided\",\n   \"type\": \"<string>\",\n   \"sequence_id\": \"<string>\",\n   \"etag\": \"<string>\",\n   \"name\": \"<string>\"\n  },\n  {\n   \"id\": \"schema type not provided\",\n   \"type\": \"<string>\",\n   \"sequence_id\": \"<string>\",\n   \"etag\": \"<string>\",\n   \"name\": \"<string>\"\n  }\n ]\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        }
      ],
      "event": []
    },
    {
      "id": "4bbe431a-3f63-47bb-a64f-f2785a50163c",
      "name": "List recent items",
      "request": {
        "name": "List recent items",
        "description": {
          "content": "Returns information about the recent items accessed\nby a user, either in the last 90 days or up to the last\n1000 items accessed.",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "recent_items"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [
            {
              "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response, unless explicitly specified.",
              "key": "fields",
              "value": "<string>,<string>"
            },
            {
              "description": "The maximum number of items to return per page.",
              "key": "limit",
              "value": "100"
            },
            {
              "description": "The position marker at which to begin the response.\n\nThis requires `usemarker` to be set to true.",
              "key": "marker",
              "value": "<string>"
            }
          ],
          "variable": []
        },
        "method": "GET",
        "auth": {
          "type": "oauth2"
        }
      },
      "response": [
        {
          "id": "0dade394-fbba-457e-bfa3-38cb5032676e",
          "name": "Returns a list recent items access by a user.",
          "originalRequest": {
            "url": {
              "path": [
                "recent_items"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "fields",
                  "value": "<string>,<string>"
                },
                {
                  "key": "limit",
                  "value": "100"
                },
                {
                  "key": "marker",
                  "value": "<string>"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "body": {}
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n \"limit\": \"<long>\",\n \"next_marker\": \"<long>\",\n \"prev_marker\": \"<long>\",\n \"entries\": [\n  {\n   \"type\": \"<string>\",\n   \"item\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\"\n   },\n   \"interaction_type\": \"<string>\",\n   \"interacted_at\": \"<dateTime>\",\n   \"interaction_shared_link\": \"<string>\"\n  },\n  {\n   \"type\": \"<string>\",\n   \"item\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\"\n   },\n   \"interaction_type\": \"<string>\",\n   \"interacted_at\": \"<dateTime>\",\n   \"interaction_shared_link\": \"<string>\"\n  }\n ]\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": []
    },
    {
      "id": "486abe83-340a-41ca-a4cd-0d6beb31b266",
      "name": "retention policies",
      "item": [
        {
          "id": "8a4bf248-d88b-4cf4-bbdb-f33459c02854",
          "name": "List retention policies",
          "request": {
            "name": "List retention policies",
            "description": {
              "content": "Retrieves all of the retention policies for an enterprise.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "retention_policies"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "description": "Filters results by a case sensitive prefix of the name of\nretention policies.",
                  "key": "policy_name",
                  "value": "<string>"
                },
                {
                  "description": "Filters results by the type of retention policy.",
                  "key": "policy_type",
                  "value": "<string>"
                },
                {
                  "description": "Filters results by the ID of the user who created policy.",
                  "key": "created_by_user_id",
                  "value": "<string>"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "fe9a0092-e7b7-4cb7-9ff5-fea22414d6e9",
              "name": "Returns a list retention policies in the enterprise.",
              "originalRequest": {
                "url": {
                  "path": [
                    "retention_policies"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "policy_name",
                      "value": "<string>"
                    },
                    {
                      "key": "policy_type",
                      "value": "<string>"
                    },
                    {
                      "key": "created_by_user_id",
                      "value": "<string>"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"total_count\": \"<long>\",\n \"entries\": [\n  {\n   \"id\": \"schema type not provided\",\n   \"type\": \"<string>\",\n   \"policy_name\": \"<string>\",\n   \"policy_type\": \"<string>\",\n   \"retention_length\": \"<int32>\",\n   \"disposition_action\": \"<string>\",\n   \"status\": \"<string>\",\n   \"created_by\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"created_at\": \"<dateTime>\",\n   \"modified_at\": \"<dateTime>\"\n  },\n  {\n   \"id\": \"schema type not provided\",\n   \"type\": \"<string>\",\n   \"policy_name\": \"<string>\",\n   \"policy_type\": \"<string>\",\n   \"retention_length\": \"<int32>\",\n   \"disposition_action\": \"<string>\",\n   \"status\": \"<string>\",\n   \"created_by\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"created_at\": \"<dateTime>\",\n   \"modified_at\": \"<dateTime>\"\n  }\n ]\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "4cde0f19-37cc-4f24-be97-dc1f72f6e993",
              "name": "Returns a `bad_request` if a non existent `policy_type` was specified.",
              "originalRequest": {
                "url": {
                  "path": [
                    "retention_policies"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "policy_name",
                      "value": "<string>"
                    },
                    {
                      "key": "policy_type",
                      "value": "<string>"
                    },
                    {
                      "key": "created_by_user_id",
                      "value": "<string>"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "529e68bd-77ea-4eff-b5d2-1411bc4ada0a",
              "name": "Returns a `not_found` error if the user specified in `created_by_user_id`\ndoes not exist.",
              "originalRequest": {
                "url": {
                  "path": [
                    "retention_policies"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "policy_name",
                      "value": "<string>"
                    },
                    {
                      "key": "policy_type",
                      "value": "<string>"
                    },
                    {
                      "key": "created_by_user_id",
                      "value": "<string>"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "Not Found",
              "code": 404,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "c8d5bfaf-ae50-4b64-ada2-9a5930e84005",
          "name": "Create retention policy",
          "request": {
            "name": "Create retention policy",
            "description": {
              "content": "Creates a retention policy.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "retention_policies"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": {
              "type": "oauth2"
            },
            "body": {
              "mode": "raw",
              "raw": "{\n    \"policy_name\": \"<string>\",\n    \"policy_type\": \"<string>\",\n    \"disposition_action\": \"<string>\",\n    \"retention_length\": \"<int32>\",\n    \"can_owner_extend_retention\": \"<boolean>\",\n    \"are_owners_notified\": \"<boolean>\",\n    \"custom_notification_recipients\": [\n        {\n            \"type\": \"<string>\",\n            \"id\": \"<string>\",\n            \"name\": \"<string>\",\n            \"login\": \"<string>\"\n        },\n        {\n            \"type\": \"<string>\",\n            \"id\": \"<string>\",\n            \"name\": \"<string>\",\n            \"login\": \"<string>\"\n        }\n    ]\n}"
            }
          },
          "response": [
            {
              "id": "2e7d3f65-90b8-44fd-a46f-1b3018dd9723",
              "name": "Returns a new retention policy object.",
              "originalRequest": {
                "url": {
                  "path": [
                    "retention_policies"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"policy_name\": \"<string>\",\n    \"policy_type\": \"<string>\",\n    \"disposition_action\": \"<string>\",\n    \"retention_length\": \"<int32>\",\n    \"can_owner_extend_retention\": \"<boolean>\",\n    \"are_owners_notified\": \"<boolean>\",\n    \"custom_notification_recipients\": [\n        {\n            \"type\": \"<string>\",\n            \"id\": \"<string>\",\n            \"name\": \"<string>\",\n            \"login\": \"<string>\"\n        },\n        {\n            \"type\": \"<string>\",\n            \"id\": \"<string>\",\n            \"name\": \"<string>\",\n            \"login\": \"<string>\"\n        }\n    ]\n}"
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"policy_name\": \"<string>\",\n \"policy_type\": \"<string>\",\n \"retention_length\": \"<int32>\",\n \"disposition_action\": \"<string>\",\n \"status\": \"<string>\",\n \"created_by\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"created_at\": \"<dateTime>\",\n \"modified_at\": \"<dateTime>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "d6d5df34-6628-45cb-b0db-dd7cfc0ba31c",
              "name": "Returns a `bad_request` error with the `retention_length` was\nspecified for a `infinite` retention policy, or an incorrect\n`disposition_action` was set.",
              "originalRequest": {
                "url": {
                  "path": [
                    "retention_policies"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"policy_name\": \"<string>\",\n    \"policy_type\": \"<string>\",\n    \"disposition_action\": \"<string>\",\n    \"retention_length\": \"<int32>\",\n    \"can_owner_extend_retention\": \"<boolean>\",\n    \"are_owners_notified\": \"<boolean>\",\n    \"custom_notification_recipients\": [\n        {\n            \"type\": \"<string>\",\n            \"id\": \"<string>\",\n            \"name\": \"<string>\",\n            \"login\": \"<string>\"\n        },\n        {\n            \"type\": \"<string>\",\n            \"id\": \"<string>\",\n            \"name\": \"<string>\",\n            \"login\": \"<string>\"\n        }\n    ]\n}"
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "083eb079-db30-4469-aeab-0ee027fd3e22",
              "name": "Returns an error if a retention policy with the given name already exists",
              "originalRequest": {
                "url": {
                  "path": [
                    "retention_policies"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"policy_name\": \"<string>\",\n    \"policy_type\": \"<string>\",\n    \"disposition_action\": \"<string>\",\n    \"retention_length\": \"<int32>\",\n    \"can_owner_extend_retention\": \"<boolean>\",\n    \"are_owners_notified\": \"<boolean>\",\n    \"custom_notification_recipients\": [\n        {\n            \"type\": \"<string>\",\n            \"id\": \"<string>\",\n            \"name\": \"<string>\",\n            \"login\": \"<string>\"\n        },\n        {\n            \"type\": \"<string>\",\n            \"id\": \"<string>\",\n            \"name\": \"<string>\",\n            \"login\": \"<string>\"\n        }\n    ]\n}"
                }
              },
              "status": "Conflict",
              "code": 409,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "e13bff2a-1127-4a16-8dff-9683b9483708",
          "name": "{retention policy id}",
          "item": [
            {
              "id": "c3fdd67a-83e3-450e-a0af-4e7ab6a5a223",
              "name": "Get retention policy",
              "request": {
                "name": "Get retention policy",
                "description": {
                  "content": "Retrieves a retention policy.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "retention_policies",
                    ":retention_policy_id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "description": {
                        "content": "The ID of the retention policy.",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "<string>",
                      "key": "retention_policy_id"
                    }
                  ]
                },
                "method": "GET",
                "auth": {
                  "type": "oauth2"
                }
              },
              "response": [
                {
                  "id": "63d58c2d-929b-42c0-9c8d-ccb7ed5d7a7b",
                  "name": "Returns the retention policy object.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "retention_policies",
                        "<string>"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "method": "GET",
                    "body": {}
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"policy_name\": \"<string>\",\n \"policy_type\": \"<string>\",\n \"retention_length\": \"<int32>\",\n \"disposition_action\": \"<string>\",\n \"status\": \"<string>\",\n \"created_by\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"created_at\": \"<dateTime>\",\n \"modified_at\": \"<dateTime>\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": []
            },
            {
              "id": "5eb769ca-384a-4536-8536-483216420eee",
              "name": "Update retention policy",
              "request": {
                "name": "Update retention policy",
                "description": {
                  "content": "Updates a retention policy.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "retention_policies",
                    ":retention_policy_id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "description": {
                        "content": "The ID of the retention policy.",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "<string>",
                      "key": "retention_policy_id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "auth": {
                  "type": "oauth2"
                },
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"policy_name\": \"<string>\",\n    \"disposition_action\": \"<string>\",\n    \"status\": \"<string>\"\n}"
                }
              },
              "response": [
                {
                  "id": "d12602cd-faef-4651-a260-04e8b13963d3",
                  "name": "Returns the updated retention policy object.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "retention_policies",
                        "<string>"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "method": "PUT",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"policy_name\": \"<string>\",\n    \"disposition_action\": \"<string>\",\n    \"status\": \"<string>\"\n}"
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"policy_name\": \"<string>\",\n \"policy_type\": \"<string>\",\n \"retention_length\": \"<int32>\",\n \"disposition_action\": \"<string>\",\n \"status\": \"<string>\",\n \"created_by\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"created_at\": \"<dateTime>\",\n \"modified_at\": \"<dateTime>\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "614b4fd7-82f7-4b0d-bddc-1144677ff72b",
                  "name": "Returns a `bad_request` if an incorrect\n`disposition_action` was set.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "retention_policies",
                        "<string>"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "method": "PUT",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"policy_name\": \"<string>\",\n    \"disposition_action\": \"<string>\",\n    \"status\": \"<string>\"\n}"
                    }
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "fd2f4204-eb96-492c-88fb-d54746795f9d",
                  "name": "Returns an error if a retention policy with the given name already exists",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "retention_policies",
                        "<string>"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "method": "PUT",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"policy_name\": \"<string>\",\n    \"disposition_action\": \"<string>\",\n    \"status\": \"<string>\"\n}"
                    }
                  },
                  "status": "Conflict",
                  "code": 409,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": []
            },
            {
              "id": "10576d8c-7f66-47ae-b53f-02d80ec70f11",
              "name": "List policy's assignments",
              "request": {
                "name": "List policy's assignments",
                "description": {
                  "content": "Returns a list of all retention policy assignments associated with a specified\nretention policy.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "retention_policies",
                    ":retention_policy_id",
                    "assignments"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "description": "The type of the retention policy assignment to retrieve.",
                      "key": "type",
                      "value": "<string>"
                    },
                    {
                      "description": "The position marker at which to begin the response.\n\nThis requires `usemarker` to be set to true.",
                      "key": "marker",
                      "value": "<string>"
                    },
                    {
                      "description": "The maximum number of items to return per page.",
                      "key": "limit",
                      "value": "100"
                    }
                  ],
                  "variable": [
                    {
                      "description": {
                        "content": "The ID of the retention policy.",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "<string>",
                      "key": "retention_policy_id"
                    }
                  ]
                },
                "method": "GET",
                "auth": {
                  "type": "oauth2"
                }
              },
              "response": [
                {
                  "id": "9b47f76a-51ba-4bea-a46a-802ae5793410",
                  "name": "Returns a list of the retention policy assignments associated with the\nspecified retention policy.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "retention_policies",
                        "<string>",
                        "assignments"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "type",
                          "value": "<string>"
                        },
                        {
                          "key": "marker",
                          "value": "<string>"
                        },
                        {
                          "key": "limit",
                          "value": "100"
                        }
                      ],
                      "variable": []
                    },
                    "method": "GET",
                    "body": {}
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n \"limit\": \"<long>\",\n \"next_marker\": \"<long>\",\n \"prev_marker\": \"<long>\",\n \"entries\": [\n  {\n   \"id\": \"schema type not provided\",\n   \"type\": \"<string>\",\n   \"retention_policy\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"policy_name\": \"<string>\"\n   },\n   \"assigned_to\": {\n    \"id\": \"schema type not provided\"\n   },\n   \"assigned_by\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"assigned_at\": \"<dateTime>\"\n  },\n  {\n   \"id\": \"schema type not provided\",\n   \"type\": \"<string>\",\n   \"retention_policy\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"policy_name\": \"<string>\"\n   },\n   \"assigned_to\": {\n    \"id\": \"schema type not provided\"\n   },\n   \"assigned_by\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"assigned_at\": \"<dateTime>\"\n  }\n ]\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "8c76cd13-7ac4-47fb-9964-aa503bd6d1f9",
                  "name": "Returns an error if an unknown `type` is specified.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "retention_policies",
                        "<string>",
                        "assignments"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "type",
                          "value": "<string>"
                        },
                        {
                          "key": "marker",
                          "value": "<string>"
                        },
                        {
                          "key": "limit",
                          "value": "100"
                        }
                      ],
                      "variable": []
                    },
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": []
            }
          ],
          "event": []
        }
      ],
      "event": []
    },
    {
      "id": "1e611813-2275-4d30-80ed-b84dcad43e38",
      "name": "retention policy assignments",
      "item": [
        {
          "id": "cfb79db6-214e-46e3-9642-eea10260d1bd",
          "name": "Assign retention policy",
          "request": {
            "name": "Assign retention policy",
            "description": {
              "content": "Assigns a retention policy to an item.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "retention_policy_assignments"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": {
              "type": "oauth2"
            },
            "body": {
              "mode": "raw",
              "raw": "{\n    \"policy_id\": \"<string>\",\n    \"assign_to\": {\n        \"type\": \"<string>\",\n        \"id\": \"<string>\"\n    }\n}"
            }
          },
          "response": [
            {
              "id": "27e95b9c-010a-404b-a6d5-65f5a50f8b93",
              "name": "Returns a new retention policy assignment object.",
              "originalRequest": {
                "url": {
                  "path": [
                    "retention_policy_assignments"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"policy_id\": \"<string>\",\n    \"assign_to\": {\n        \"type\": \"<string>\",\n        \"id\": \"<string>\"\n    }\n}"
                }
              },
              "status": "Created",
              "code": 201,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"retention_policy\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"policy_name\": \"<string>\"\n },\n \"assigned_to\": {\n  \"id\": \"schema type not provided\"\n },\n \"assigned_by\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"assigned_at\": \"<dateTime>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "785adf5e-dd53-47df-8648-5f19c20d979a",
              "name": "Returns an error if an `id` is specified while assigning a the\nretention policy to an enterprise.",
              "originalRequest": {
                "url": {
                  "path": [
                    "retention_policy_assignments"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"policy_id\": \"<string>\",\n    \"assign_to\": {\n        \"type\": \"<string>\",\n        \"id\": \"<string>\"\n    }\n}"
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "d6f26c9b-912f-405f-820b-9e60f6503282",
              "name": "Returns an error if no retention policy with the given `policy_id` exists.",
              "originalRequest": {
                "url": {
                  "path": [
                    "retention_policy_assignments"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"policy_id\": \"<string>\",\n    \"assign_to\": {\n        \"type\": \"<string>\",\n        \"id\": \"<string>\"\n    }\n}"
                }
              },
              "status": "Not Found",
              "code": 404,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "70bcdeb9-016d-4da2-a29b-782df33c8bbd",
              "name": "Returns an error if a retention policy of equal or greater length has\nalready been assigned to this item.",
              "originalRequest": {
                "url": {
                  "path": [
                    "retention_policy_assignments"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"policy_id\": \"<string>\",\n    \"assign_to\": {\n        \"type\": \"<string>\",\n        \"id\": \"<string>\"\n    }\n}"
                }
              },
              "status": "Conflict",
              "code": 409,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "583d6657-b310-4f82-a722-1f111a34825d",
          "name": "Get policy assignment",
          "request": {
            "name": "Get policy assignment",
            "description": {
              "content": "Retrieves a retention policy assignment",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "retention_policy_assignments",
                ":retention_policy_assignment_id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "The ID of the retention policy assignment.",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "retention_policy_assignment_id"
                }
              ]
            },
            "method": "GET",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "d9e7a4a9-ab16-4437-ab25-d1cd38c2e3ee",
              "name": "Returns the retention policy assignment object.",
              "originalRequest": {
                "url": {
                  "path": [
                    "retention_policy_assignments",
                    "<string>"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"retention_policy\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"policy_name\": \"<string>\"\n },\n \"assigned_to\": {\n  \"id\": \"schema type not provided\"\n },\n \"assigned_by\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"assigned_at\": \"<dateTime>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        }
      ],
      "event": []
    },
    {
      "id": "30aa141a-aa0a-429f-b942-e6f3553a4695",
      "name": "legal hold policies",
      "item": [
        {
          "id": "4ff778ca-ca7b-4ec7-8941-6fa60c97a902",
          "name": "List all legal hold policies",
          "request": {
            "name": "List all legal hold policies",
            "description": {
              "content": "Retrieves a list of legal hold policies that belong to\nan enterprise.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "legal_hold_policies"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "description": "Limits results to policies for which the names start with\nthis search term. This is a case-insensitive prefix.",
                  "key": "policy_name",
                  "value": "<string>"
                },
                {
                  "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response, unless explicitly specified.",
                  "key": "fields",
                  "value": "<string>,<string>"
                },
                {
                  "description": "The position marker at which to begin the response.\n\nThis requires `usemarker` to be set to true.",
                  "key": "marker",
                  "value": "<string>"
                },
                {
                  "description": "The maximum number of items to return per page.",
                  "key": "limit",
                  "value": "100"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "2ec9e42a-868a-4ec5-9fbf-9e1ec890d435",
              "name": "Returns a list of legal hold policies.",
              "originalRequest": {
                "url": {
                  "path": [
                    "legal_hold_policies"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "policy_name",
                      "value": "<string>"
                    },
                    {
                      "key": "fields",
                      "value": "<string>,<string>"
                    },
                    {
                      "key": "marker",
                      "value": "<string>"
                    },
                    {
                      "key": "limit",
                      "value": "100"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"limit\": \"<long>\",\n \"next_marker\": \"<long>\",\n \"prev_marker\": \"<long>\",\n \"entries\": [\n  {\n   \"id\": \"schema type not provided\",\n   \"type\": \"<string>\",\n   \"policy_name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"status\": \"<string>\",\n   \"assignment_counts\": {\n    \"user\": \"<long>\",\n    \"folder\": \"<long>\",\n    \"file\": \"<long>\",\n    \"file_version\": \"<long>\"\n   },\n   \"created_by\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"created_at\": \"<dateTime>\",\n   \"modified_at\": \"<dateTime>\",\n   \"deleted_at\": \"<dateTime>\",\n   \"filter_started_at\": \"<dateTime>\",\n   \"filter_ended_at\": \"<dateTime>\",\n   \"release_notes\": \"<string>\"\n  },\n  {\n   \"id\": \"schema type not provided\",\n   \"type\": \"<string>\",\n   \"policy_name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"status\": \"<string>\",\n   \"assignment_counts\": {\n    \"user\": \"<long>\",\n    \"folder\": \"<long>\",\n    \"file\": \"<long>\",\n    \"file_version\": \"<long>\"\n   },\n   \"created_by\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"created_at\": \"<dateTime>\",\n   \"modified_at\": \"<dateTime>\",\n   \"deleted_at\": \"<dateTime>\",\n   \"filter_started_at\": \"<dateTime>\",\n   \"filter_ended_at\": \"<dateTime>\",\n   \"release_notes\": \"<string>\"\n  }\n ]\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "b316f5a0-22b5-4b27-9478-148f7bac9657",
          "name": "Create legal hold policy",
          "request": {
            "name": "Create legal hold policy",
            "description": {
              "content": "Create a new legal hold policy.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "legal_hold_policies"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": {
              "type": "oauth2"
            },
            "body": {
              "mode": "raw",
              "raw": "{\n    \"policy_name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"filter_started_at\": \"<dateTime>\",\n    \"filter_ended_at\": \"<dateTime>\",\n    \"is_ongoing\": \"<boolean>\"\n}"
            }
          },
          "response": [
            {
              "id": "1a3a4f54-512b-4214-a384-6043c82d76d7",
              "name": "Returns a new legal hold policy object.",
              "originalRequest": {
                "url": {
                  "path": [
                    "legal_hold_policies"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"policy_name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"filter_started_at\": \"<dateTime>\",\n    \"filter_ended_at\": \"<dateTime>\",\n    \"is_ongoing\": \"<boolean>\"\n}"
                }
              },
              "status": "Created",
              "code": 201,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"policy_name\": \"<string>\",\n \"description\": \"<string>\",\n \"status\": \"<string>\",\n \"assignment_counts\": {\n  \"user\": \"<long>\",\n  \"folder\": \"<long>\",\n  \"file\": \"<long>\",\n  \"file_version\": \"<long>\"\n },\n \"created_by\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"created_at\": \"<dateTime>\",\n \"modified_at\": \"<dateTime>\",\n \"deleted_at\": \"<dateTime>\",\n \"filter_started_at\": \"<dateTime>\",\n \"filter_ended_at\": \"<dateTime>\",\n \"release_notes\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "29e6fc57-ef29-45ca-ac04-b635176436d9",
              "name": "Returns an error if required parameters are missing,\nor neither `is_ongoing` or filter dates are specified.",
              "originalRequest": {
                "url": {
                  "path": [
                    "legal_hold_policies"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"policy_name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"filter_started_at\": \"<dateTime>\",\n    \"filter_ended_at\": \"<dateTime>\",\n    \"is_ongoing\": \"<boolean>\"\n}"
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"policy_name\": \"<string>\",\n \"description\": \"<string>\",\n \"status\": \"<string>\",\n \"assignment_counts\": {\n  \"user\": \"<long>\",\n  \"folder\": \"<long>\",\n  \"file\": \"<long>\",\n  \"file_version\": \"<long>\"\n },\n \"created_by\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"created_at\": \"<dateTime>\",\n \"modified_at\": \"<dateTime>\",\n \"deleted_at\": \"<dateTime>\",\n \"filter_started_at\": \"<dateTime>\",\n \"filter_ended_at\": \"<dateTime>\",\n \"release_notes\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "ae31416b-93e8-4f42-9c43-7b1871522f0d",
              "name": "Returns an error if a policy with this name already exists.",
              "originalRequest": {
                "url": {
                  "path": [
                    "legal_hold_policies"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"policy_name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"filter_started_at\": \"<dateTime>\",\n    \"filter_ended_at\": \"<dateTime>\",\n    \"is_ongoing\": \"<boolean>\"\n}"
                }
              },
              "status": "Conflict",
              "code": 409,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "0c3fbbb0-4217-4404-bdb7-485299e7f240",
          "name": "{legal hold policy id}",
          "item": [
            {
              "id": "4011a6aa-26f9-4553-b594-0f31f1810888",
              "name": "Get legal hold policy",
              "request": {
                "name": "Get legal hold policy",
                "description": {
                  "content": "Retrieve a legal hold policy.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "legal_hold_policies",
                    ":legal_hold_policy_id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "description": {
                        "content": "The ID of the legal hold policy",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "<string>",
                      "key": "legal_hold_policy_id"
                    }
                  ]
                },
                "method": "GET",
                "auth": {
                  "type": "oauth2"
                }
              },
              "response": [
                {
                  "id": "b60f5fd6-b064-4869-8a1c-7e6111062ed1",
                  "name": "Returns a legal hold policy object.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "legal_hold_policies",
                        "<string>"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "method": "GET",
                    "body": {}
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"policy_name\": \"<string>\",\n \"description\": \"<string>\",\n \"status\": \"<string>\",\n \"assignment_counts\": {\n  \"user\": \"<long>\",\n  \"folder\": \"<long>\",\n  \"file\": \"<long>\",\n  \"file_version\": \"<long>\"\n },\n \"created_by\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"created_at\": \"<dateTime>\",\n \"modified_at\": \"<dateTime>\",\n \"deleted_at\": \"<dateTime>\",\n \"filter_started_at\": \"<dateTime>\",\n \"filter_ended_at\": \"<dateTime>\",\n \"release_notes\": \"<string>\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": []
            },
            {
              "id": "7a21ff7c-3ad8-4db6-a008-8ef01129fa24",
              "name": "Update legal hold policy",
              "request": {
                "name": "Update legal hold policy",
                "description": {
                  "content": "Update legal hold policy.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "legal_hold_policies",
                    ":legal_hold_policy_id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "description": {
                        "content": "The ID of the legal hold policy",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "<string>",
                      "key": "legal_hold_policy_id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "auth": {
                  "type": "oauth2"
                },
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"policy_name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"release_notes\": \"<string>\"\n}"
                }
              },
              "response": [
                {
                  "id": "7109caf0-edb6-443e-9477-fd933c63aee0",
                  "name": "Returns a new legal hold policy object.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "legal_hold_policies",
                        "<string>"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "method": "PUT",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"policy_name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"release_notes\": \"<string>\"\n}"
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"policy_name\": \"<string>\",\n \"description\": \"<string>\",\n \"status\": \"<string>\",\n \"assignment_counts\": {\n  \"user\": \"<long>\",\n  \"folder\": \"<long>\",\n  \"file\": \"<long>\",\n  \"file_version\": \"<long>\"\n },\n \"created_by\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"created_at\": \"<dateTime>\",\n \"modified_at\": \"<dateTime>\",\n \"deleted_at\": \"<dateTime>\",\n \"filter_started_at\": \"<dateTime>\",\n \"filter_ended_at\": \"<dateTime>\",\n \"release_notes\": \"<string>\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "64ee877c-6242-4482-8b32-9c87b293abde",
                  "name": "Returns an error if a policy with this name already exists.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "legal_hold_policies",
                        "<string>"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "method": "PUT",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"policy_name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"release_notes\": \"<string>\"\n}"
                    }
                  },
                  "status": "Conflict",
                  "code": 409,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n \"type\": \"<string>\",\n \"status\": \"<integer>\",\n \"code\": \"<string>\",\n \"help_url\": \"<string>\",\n \"message\": \"<string>\",\n \"request_id\": \"<string>\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": []
            },
            {
              "id": "bee21f72-118d-48c2-81d0-c5560c6dd295",
              "name": "Delete legal hold policy",
              "request": {
                "name": "Delete legal hold policy",
                "description": {
                  "content": "Delete an existing legal hold policy.\n\nThis is an asynchronous process. The policy will not be\nfully deleted yet when the response returns.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "legal_hold_policies",
                    ":legal_hold_policy_id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "description": {
                        "content": "The ID of the legal hold policy",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "<string>",
                      "key": "legal_hold_policy_id"
                    }
                  ]
                },
                "method": "DELETE",
                "auth": {
                  "type": "oauth2"
                }
              },
              "response": [
                {
                  "id": "fbf13010-edd7-48c8-b6a2-e596f5e8d7d6",
                  "name": "A blank response is returned if the policy was\nsuccessfully deleted.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "legal_hold_policies",
                        "<string>"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "Accepted",
                  "code": 202,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "_postman_previewlanguage": "text"
                }
              ],
              "event": []
            }
          ],
          "event": []
        }
      ],
      "event": []
    },
    {
      "id": "968bd7b1-af14-4d29-b215-9aa0d921e408",
      "name": "legal hold policy assignments",
      "item": [
        {
          "id": "56e9cba9-df6c-442f-a662-07489fee3b4a",
          "name": "List policy's assignments",
          "request": {
            "name": "List policy's assignments",
            "description": {
              "content": "Retrieves a list of items a legal hold policy has been assigned to.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "legal_hold_policy_assignments"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "description": "The ID of the legal hold policy",
                  "key": "policy_id",
                  "value": "<string>"
                },
                {
                  "description": "Filters the results by the type of item the\npolicy was applied to.",
                  "key": "assign_to_type",
                  "value": "<string>"
                },
                {
                  "description": "Filters the results by the ID of item the\npolicy was applied to.",
                  "key": "assign_to_id",
                  "value": "<string>"
                },
                {
                  "description": "The position marker at which to begin the response.\n\nThis requires `usemarker` to be set to true.",
                  "key": "marker",
                  "value": "<string>"
                },
                {
                  "description": "The maximum number of items to return per page.",
                  "key": "limit",
                  "value": "100"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "c453f2a4-7445-4a8b-9351-2da9c11ce1a6",
              "name": "Returns a list of legal hold policy assignments.",
              "originalRequest": {
                "url": {
                  "path": [
                    "legal_hold_policy_assignments"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "policy_id",
                      "value": "<string>"
                    },
                    {
                      "key": "assign_to_type",
                      "value": "<string>"
                    },
                    {
                      "key": "assign_to_id",
                      "value": "<string>"
                    },
                    {
                      "key": "marker",
                      "value": "<string>"
                    },
                    {
                      "key": "limit",
                      "value": "100"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"limit\": \"<long>\",\n \"next_marker\": \"<long>\",\n \"prev_marker\": \"<long>\",\n \"entries\": [\n  {\n   \"id\": \"schema type not provided\",\n   \"type\": \"<string>\",\n   \"legal_hold_policy\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\"\n   },\n   \"assigned_to\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\"\n   },\n   \"assigned_by\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"assigned_at\": \"<dateTime>\",\n   \"deleted_at\": \"<dateTime>\"\n  },\n  {\n   \"id\": \"schema type not provided\",\n   \"type\": \"<string>\",\n   \"legal_hold_policy\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\"\n   },\n   \"assigned_to\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\"\n   },\n   \"assigned_by\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"assigned_at\": \"<dateTime>\",\n   \"deleted_at\": \"<dateTime>\"\n  }\n ]\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "4a7640a6-2221-4550-b0d4-dc5961c7ce3c",
          "name": "Assign legal hold policy",
          "request": {
            "name": "Assign legal hold policy",
            "description": {
              "content": "Assign a legal hold to a file, file version, folder, or user.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "legal_hold_policy_assignments"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": {
              "type": "oauth2"
            },
            "body": {
              "mode": "raw",
              "raw": "{\n    \"policy_id\": \"<string>\",\n    \"assign_to\": {\n        \"type\": \"<string>\",\n        \"id\": \"<string>\"\n    }\n}"
            }
          },
          "response": [
            {
              "id": "5dcf1639-7a1a-420f-bf51-0f207b3c4bb7",
              "name": "Returns a new legal hold policy assignment.",
              "originalRequest": {
                "url": {
                  "path": [
                    "legal_hold_policy_assignments"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"policy_id\": \"<string>\",\n    \"assign_to\": {\n        \"type\": \"<string>\",\n        \"id\": \"<string>\"\n    }\n}"
                }
              },
              "status": "Created",
              "code": 201,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"legal_hold_policy\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\"\n },\n \"assigned_to\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"sequence_id\": \"<string>\",\n  \"etag\": \"<string>\",\n  \"name\": \"<string>\"\n },\n \"assigned_by\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"assigned_at\": \"<dateTime>\",\n \"deleted_at\": \"<dateTime>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "0fb1bd4f-ad1b-4c70-b5b5-7fab7a68d666",
          "name": "{legal hold policy assignment id}",
          "item": [
            {
              "id": "8eb6f445-571c-47b9-892c-dcfe2084962e",
              "name": "Get policy assignment",
              "request": {
                "name": "Get policy assignment",
                "description": {
                  "content": "Retrieve a legal hold policy assignment.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "legal_hold_policy_assignments",
                    ":legal_hold_policy_assignment_id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "description": {
                        "content": "The ID of the legal hold policy assignment",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "<string>",
                      "key": "legal_hold_policy_assignment_id"
                    }
                  ]
                },
                "method": "GET",
                "auth": {
                  "type": "oauth2"
                }
              },
              "response": [
                {
                  "id": "c22d0702-1006-4feb-be09-173ca2fc3670",
                  "name": "Returns a legal hold policy object.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "legal_hold_policy_assignments",
                        "<string>"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "method": "GET",
                    "body": {}
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"legal_hold_policy\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\"\n },\n \"assigned_to\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"sequence_id\": \"<string>\",\n  \"etag\": \"<string>\",\n  \"name\": \"<string>\"\n },\n \"assigned_by\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"assigned_at\": \"<dateTime>\",\n \"deleted_at\": \"<dateTime>\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": []
            },
            {
              "id": "d93cd569-78d7-4635-aca5-4e41e926397c",
              "name": "Unassign legal hold policy",
              "request": {
                "name": "Unassign legal hold policy",
                "description": {
                  "content": "Remove a legal hold from an item.\n\nThis is an asynchronous process. The policy will not be\nfully removed yet when the response returns.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "legal_hold_policy_assignments",
                    ":legal_hold_policy_assignment_id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "description": {
                        "content": "The ID of the legal hold policy assignment",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "<string>",
                      "key": "legal_hold_policy_assignment_id"
                    }
                  ]
                },
                "method": "DELETE",
                "auth": {
                  "type": "oauth2"
                }
              },
              "response": [
                {
                  "id": "67010af5-5b46-4779-a642-97cf10253fee",
                  "name": "A blank response is returned if the assignment was\nsuccessfully deleted.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "legal_hold_policy_assignments",
                        "<string>"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "Accepted",
                  "code": 202,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "_postman_previewlanguage": "text"
                }
              ],
              "event": []
            }
          ],
          "event": []
        }
      ],
      "event": []
    },
    {
      "id": "b5ded334-7d35-42b5-87fe-1ca12e63f80b",
      "name": "file version retentions",
      "item": [
        {
          "id": "51b6d0b9-26e8-49e6-bc59-2ab8d8781155",
          "name": "List retentions on files",
          "request": {
            "name": "List retentions on files",
            "description": {
              "content": "Retrieves all file version retentions for the given enterprise.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "file_version_retentions"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "description": "Filters results by files with this ID.",
                  "key": "file_id",
                  "value": "<string>"
                },
                {
                  "description": "Filters results by file versions with this ID.",
                  "key": "file_version_id",
                  "value": "<string>"
                },
                {
                  "description": "Filters results by the retention policy with this ID.",
                  "key": "policy_id",
                  "value": "<string>"
                },
                {
                  "description": "Filters results by the retention policy with this disposition\naction.",
                  "key": "disposition_action",
                  "value": "<string>"
                },
                {
                  "description": "Filters results by files that will have their disposition\ncome into effect before this date.",
                  "key": "disposition_before",
                  "value": "<string>"
                },
                {
                  "description": "Filters results by files that will have their disposition\ncome into effect after this date.",
                  "key": "disposition_after",
                  "value": "<string>"
                },
                {
                  "description": "The maximum number of items to return per page.",
                  "key": "limit",
                  "value": "100"
                },
                {
                  "description": "The position marker at which to begin the response.\n\nThis requires `usemarker` to be set to true.",
                  "key": "marker",
                  "value": "<string>"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "0d85fd82-f895-4b3e-b4fc-69f38496be24",
              "name": "Returns a list of all file version retentions for the enterprise.",
              "originalRequest": {
                "url": {
                  "path": [
                    "file_version_retentions"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "file_id",
                      "value": "<string>"
                    },
                    {
                      "key": "file_version_id",
                      "value": "<string>"
                    },
                    {
                      "key": "policy_id",
                      "value": "<string>"
                    },
                    {
                      "key": "disposition_action",
                      "value": "<string>"
                    },
                    {
                      "key": "disposition_before",
                      "value": "<string>"
                    },
                    {
                      "key": "disposition_after",
                      "value": "<string>"
                    },
                    {
                      "key": "limit",
                      "value": "100"
                    },
                    {
                      "key": "marker",
                      "value": "<string>"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"limit\": \"<long>\",\n \"next_marker\": \"<long>\",\n \"prev_marker\": \"<long>\",\n \"entries\": [\n  {\n   \"id\": \"schema type not provided\",\n   \"type\": \"<string>\",\n   \"file_version\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"sha1\": \"<string>\"\n   },\n   \"file\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\"\n   },\n   \"applied_at\": \"<dateTime>\",\n   \"disposition_at\": \"<dateTime>\",\n   \"winning_retention_policy\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"policy_name\": \"<string>\"\n   }\n  },\n  {\n   \"id\": \"schema type not provided\",\n   \"type\": \"<string>\",\n   \"file_version\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"sha1\": \"<string>\"\n   },\n   \"file\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\"\n   },\n   \"applied_at\": \"<dateTime>\",\n   \"disposition_at\": \"<dateTime>\",\n   \"winning_retention_policy\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"policy_name\": \"<string>\"\n   }\n  }\n ]\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "f3f1ec91-96bc-45b7-be97-6fd403de103b",
          "name": "Get retention for file",
          "request": {
            "name": "Get retention for file",
            "description": {
              "content": "Returns information about a file version retention.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "file_version_retentions",
                ":file_version_retention_id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "The ID of the file version retention",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "file_version_retention_id"
                }
              ]
            },
            "method": "GET",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "3b2e24b4-23f5-4436-861a-b7098b2ee047",
              "name": "Returns a file version retention object.",
              "originalRequest": {
                "url": {
                  "path": [
                    "file_version_retentions",
                    "<string>"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"file_version\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"sha1\": \"<string>\"\n },\n \"file\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"sequence_id\": \"<string>\",\n  \"etag\": \"<string>\",\n  \"name\": \"<string>\"\n },\n \"applied_at\": \"<dateTime>\",\n \"disposition_at\": \"<dateTime>\",\n \"winning_retention_policy\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"policy_name\": \"<string>\"\n }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        }
      ],
      "event": []
    },
    {
      "id": "ff7d23b5-d503-4491-98fc-10385d4bfdec",
      "name": "file version legal holds",
      "item": [
        {
          "id": "04982a87-b18d-46aa-a4cc-f13f69246504",
          "name": "List legal holds for policy",
          "request": {
            "name": "List legal holds for policy",
            "description": {
              "content": "Get list of non-deleted legal holds for a single legal\nhold policy.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "file_version_legal_holds"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "description": "The ID of the legal hold policy to get the file version legal\nholds for.",
                  "key": "policy_id",
                  "value": "<string>"
                },
                {
                  "description": "The position marker at which to begin the response.\n\nThis requires `usemarker` to be set to true.",
                  "key": "marker",
                  "value": "<string>"
                },
                {
                  "description": "The maximum number of items to return per page.",
                  "key": "limit",
                  "value": "100"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "1e4a41aa-c4cc-4df2-8f98-fcbdb76b0082",
              "name": "Returns the list of file version legal holds for a specific legal\nhold policy.",
              "originalRequest": {
                "url": {
                  "path": [
                    "file_version_legal_holds"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "policy_id",
                      "value": "<string>"
                    },
                    {
                      "key": "marker",
                      "value": "<string>"
                    },
                    {
                      "key": "limit",
                      "value": "100"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"limit\": \"<long>\",\n \"next_marker\": \"<long>\",\n \"prev_marker\": \"<long>\",\n \"entries\": [\n  {\n   \"id\": \"schema type not provided\",\n   \"type\": \"<string>\",\n   \"file_version\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"sha1\": \"<string>\"\n   },\n   \"file\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\"\n   },\n   \"legal_hold_policy_assignments\": [\n    {\n     \"id\": \"schema type not provided\",\n     \"type\": \"<string>\",\n     \"legal_hold_policy\": {\n      \"id\": \"schema type not provided\",\n      \"type\": \"<string>\"\n     },\n     \"assigned_to\": {\n      \"id\": \"schema type not provided\",\n      \"type\": \"<string>\",\n      \"sequence_id\": \"<string>\",\n      \"etag\": \"<string>\",\n      \"name\": \"<string>\"\n     },\n     \"assigned_by\": {\n      \"id\": \"schema type not provided\",\n      \"type\": \"<string>\",\n      \"name\": \"<string>\",\n      \"login\": \"<email>\"\n     },\n     \"assigned_at\": \"<dateTime>\",\n     \"deleted_at\": \"<dateTime>\"\n    },\n    {\n     \"id\": \"schema type not provided\",\n     \"type\": \"<string>\",\n     \"legal_hold_policy\": {\n      \"id\": \"schema type not provided\",\n      \"type\": \"<string>\"\n     },\n     \"assigned_to\": {\n      \"id\": \"schema type not provided\",\n      \"type\": \"<string>\",\n      \"sequence_id\": \"<string>\",\n      \"etag\": \"<string>\",\n      \"name\": \"<string>\"\n     },\n     \"assigned_by\": {\n      \"id\": \"schema type not provided\",\n      \"type\": \"<string>\",\n      \"name\": \"<string>\",\n      \"login\": \"<email>\"\n     },\n     \"assigned_at\": \"<dateTime>\",\n     \"deleted_at\": \"<dateTime>\"\n    }\n   ],\n   \"deleted_at\": \"<dateTime>\"\n  },\n  {\n   \"id\": \"schema type not provided\",\n   \"type\": \"<string>\",\n   \"file_version\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"sha1\": \"<string>\"\n   },\n   \"file\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\"\n   },\n   \"legal_hold_policy_assignments\": [\n    {\n     \"id\": \"schema type not provided\",\n     \"type\": \"<string>\",\n     \"legal_hold_policy\": {\n      \"id\": \"schema type not provided\",\n      \"type\": \"<string>\"\n     },\n     \"assigned_to\": {\n      \"id\": \"schema type not provided\",\n      \"type\": \"<string>\",\n      \"sequence_id\": \"<string>\",\n      \"etag\": \"<string>\",\n      \"name\": \"<string>\"\n     },\n     \"assigned_by\": {\n      \"id\": \"schema type not provided\",\n      \"type\": \"<string>\",\n      \"name\": \"<string>\",\n      \"login\": \"<email>\"\n     },\n     \"assigned_at\": \"<dateTime>\",\n     \"deleted_at\": \"<dateTime>\"\n    },\n    {\n     \"id\": \"schema type not provided\",\n     \"type\": \"<string>\",\n     \"legal_hold_policy\": {\n      \"id\": \"schema type not provided\",\n      \"type\": \"<string>\"\n     },\n     \"assigned_to\": {\n      \"id\": \"schema type not provided\",\n      \"type\": \"<string>\",\n      \"sequence_id\": \"<string>\",\n      \"etag\": \"<string>\",\n      \"name\": \"<string>\"\n     },\n     \"assigned_by\": {\n      \"id\": \"schema type not provided\",\n      \"type\": \"<string>\",\n      \"name\": \"<string>\",\n      \"login\": \"<email>\"\n     },\n     \"assigned_at\": \"<dateTime>\",\n     \"deleted_at\": \"<dateTime>\"\n    }\n   ],\n   \"deleted_at\": \"<dateTime>\"\n  }\n ]\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "b8fba975-d9be-4daf-ae15-e7c9af8046e0",
          "name": "Inspect legal hold on file",
          "request": {
            "name": "Inspect legal hold on file",
            "description": {
              "content": "Retrieves information about the legal hold policies\nassigned to a file version.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "file_version_legal_holds",
                ":file_version_legal_hold_id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "The ID of the file version legal hold",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "file_version_legal_hold_id"
                }
              ]
            },
            "method": "GET",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "968dad6c-3664-47ea-8859-8f579587f8f1",
              "name": "Returns the legal hold policy assignments for the file version.",
              "originalRequest": {
                "url": {
                  "path": [
                    "file_version_legal_holds",
                    "<string>"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"file_version\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"sha1\": \"<string>\"\n },\n \"file\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"sequence_id\": \"<string>\",\n  \"etag\": \"<string>\",\n  \"name\": \"<string>\"\n },\n \"legal_hold_policy_assignments\": [\n  {\n   \"id\": \"schema type not provided\",\n   \"type\": \"<string>\",\n   \"legal_hold_policy\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\"\n   },\n   \"assigned_to\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\"\n   },\n   \"assigned_by\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"assigned_at\": \"<dateTime>\",\n   \"deleted_at\": \"<dateTime>\"\n  },\n  {\n   \"id\": \"schema type not provided\",\n   \"type\": \"<string>\",\n   \"legal_hold_policy\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\"\n   },\n   \"assigned_to\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"sequence_id\": \"<string>\",\n    \"etag\": \"<string>\",\n    \"name\": \"<string>\"\n   },\n   \"assigned_by\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"assigned_at\": \"<dateTime>\",\n   \"deleted_at\": \"<dateTime>\"\n  }\n ],\n \"deleted_at\": \"<dateTime>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        }
      ],
      "event": []
    },
    {
      "id": "ae542883-36f2-492d-b182-804f04f463f0",
      "name": "device pinners",
      "item": [
        {
          "id": "2ea03757-68d8-483e-bcad-23b21ad039c2",
          "name": "{device pinner id}",
          "item": [
            {
              "id": "c40523e9-e778-4c7d-9a99-15b29d442ae5",
              "name": "Get device pin",
              "request": {
                "name": "Get device pin",
                "description": {
                  "content": "Retrieves information about an individual device pin.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "device_pinners",
                    ":device_pinner_id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "description": {
                        "content": "The ID of the device pin",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "<string>",
                      "key": "device_pinner_id"
                    }
                  ]
                },
                "method": "GET",
                "auth": {
                  "type": "oauth2"
                }
              },
              "response": [
                {
                  "id": "109bd947-a60e-45b6-90de-477aaa18cdd6",
                  "name": "Returns information about a single device pin.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "device_pinners",
                        "<string>"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "method": "GET",
                    "body": {}
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"owned_by\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"product_name\": \"<string>\",\n \"created_at\": \"<dateTime>\",\n \"modified_at\": \"<dateTime>\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": []
            },
            {
              "id": "a056f9b4-d7ed-4baa-9b64-74476b10da7c",
              "name": "Delete device pin",
              "request": {
                "name": "Delete device pin",
                "description": {
                  "content": "Deletes an individual device pin.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "device_pinners",
                    ":device_pinner_id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "description": {
                        "content": "The ID of the device pin",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "<string>",
                      "key": "device_pinner_id"
                    }
                  ]
                },
                "method": "DELETE",
                "auth": {
                  "type": "oauth2"
                }
              },
              "response": [
                {
                  "id": "a3feb119-aae6-4095-8c72-c9ecd4cdeca4",
                  "name": "Returns an empty response when the pin has been deleted.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "device_pinners",
                        "<string>"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "No Content",
                  "code": 204,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "_postman_previewlanguage": "text"
                }
              ],
              "event": []
            }
          ],
          "event": []
        }
      ],
      "event": []
    },
    {
      "id": "c114f982-1217-4028-9cde-5e31322446d2",
      "name": "List enterprise device pins",
      "request": {
        "name": "List enterprise device pins",
        "description": {
          "content": "Retrieves all the device pins within an enterprise.\n\nThe user must have admin privileges, and the application\nneeds the \"manage enterprise\" scope to make this call.",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "enterprises",
            ":enterprise_id",
            "device_pinners"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [
            {
              "description": "The position marker at which to begin the response.\n\nThis requires `usemarker` to be set to true.",
              "key": "marker",
              "value": "<string>"
            },
            {
              "description": "The maximum number of items to return per page.",
              "key": "limit",
              "value": "100"
            },
            {
              "description": "The direction to sort items in.",
              "key": "direction",
              "value": "<string>"
            }
          ],
          "variable": [
            {
              "description": {
                "content": "The ID of the enterprise",
                "type": "text/plain"
              },
              "type": "any",
              "value": "<string>",
              "key": "enterprise_id"
            }
          ]
        },
        "method": "GET",
        "auth": {
          "type": "oauth2"
        }
      },
      "response": [
        {
          "id": "bb71e3d0-382b-4c68-9ab6-6e2933a19045",
          "name": "Returns a list of device pins for a given enterprise.",
          "originalRequest": {
            "url": {
              "path": [
                "enterprises",
                "<string>",
                "device_pinners"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "marker",
                  "value": "<string>"
                },
                {
                  "key": "limit",
                  "value": "100"
                },
                {
                  "key": "direction",
                  "value": "<string>"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "body": {}
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n \"limit\": \"<long>\",\n \"next_marker\": \"<long>\",\n \"prev_marker\": \"<long>\",\n \"entries\": [\n  {\n   \"id\": \"schema type not provided\",\n   \"type\": \"<string>\",\n   \"owned_by\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"product_name\": \"<string>\",\n   \"created_at\": \"<dateTime>\",\n   \"modified_at\": \"<dateTime>\"\n  },\n  {\n   \"id\": \"schema type not provided\",\n   \"type\": \"<string>\",\n   \"owned_by\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"product_name\": \"<string>\",\n   \"created_at\": \"<dateTime>\",\n   \"modified_at\": \"<dateTime>\"\n  }\n ]\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": []
    },
    {
      "id": "26746082-1aa3-4b64-9355-d56dca72780f",
      "name": "terms of services",
      "item": [
        {
          "id": "3d28f78c-a422-4126-95b2-eece61cebbed",
          "name": "List terms of services",
          "request": {
            "name": "List terms of services",
            "description": {
              "content": "Returns the current terms of service text and settings\nfor the enterprise.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "terms_of_services"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "description": "Limits the results to the terms of service of the given type.",
                  "key": "tos_type",
                  "value": "<string>"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "78d53f37-df6e-46b8-a2e6-c2bd35c5891e",
              "name": "Returns a collection of terms of service text and settings for the\nenterprise.",
              "originalRequest": {
                "url": {
                  "path": [
                    "terms_of_services"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "tos_type",
                      "value": "<string>"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"total_count\": \"<long>\",\n \"entries\": [\n  {\n   \"id\": \"schema type not provided\",\n   \"type\": \"<string>\",\n   \"status\": \"<string>\",\n   \"enterprise\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\"\n   },\n   \"tos_type\": \"<string>\",\n   \"text\": \"<string>\",\n   \"created_at\": \"<dateTime>\",\n   \"modified_at\": \"<dateTime>\"\n  },\n  {\n   \"id\": \"schema type not provided\",\n   \"type\": \"<string>\",\n   \"status\": \"<string>\",\n   \"enterprise\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\"\n   },\n   \"tos_type\": \"<string>\",\n   \"text\": \"<string>\",\n   \"created_at\": \"<dateTime>\",\n   \"modified_at\": \"<dateTime>\"\n  }\n ]\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "4e4d67e5-5b2d-4d58-87d4-5d6355b8c9a5",
          "name": "Create terms of service",
          "request": {
            "name": "Create terms of service",
            "description": {
              "content": "Creates a terms of service for a given enterprise\nand type of user.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "terms_of_services"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": {
              "type": "oauth2"
            },
            "body": {
              "mode": "raw",
              "raw": "{\n    \"status\": \"<string>\",\n    \"text\": \"<string>\",\n    \"tos_type\": \"<string>\"\n}"
            }
          },
          "response": [
            {
              "id": "c0dad0ef-9dbb-409e-be39-e0085456ecd7",
              "name": "Returns a new task object",
              "originalRequest": {
                "url": {
                  "path": [
                    "terms_of_services"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"status\": \"<string>\",\n    \"text\": \"<string>\",\n    \"tos_type\": \"<string>\"\n}"
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"item\": {\n  \"id\": \"<string>\",\n  \"type\": \"<string>\",\n  \"sequence_id\": \"<string>\",\n  \"etag\": \"<string>\",\n  \"name\": \"<string>\"\n },\n \"due_at\": \"<dateTime>\",\n \"action\": \"<string>\",\n \"message\": \"<string>\",\n \"task_assignment_collection\": {\n  \"total_count\": \"<long>\",\n  \"limit\": \"<long>\",\n  \"offset\": \"<long>\",\n  \"order\": [\n   {\n    \"by\": \"<string>\",\n    \"direction\": \"<string>\"\n   },\n   {\n    \"by\": \"<string>\",\n    \"direction\": \"<string>\"\n   }\n  ],\n  \"entries\": [\n   {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"item\": {\n     \"id\": \"schema type not provided\",\n     \"type\": \"<string>\",\n     \"sequence_id\": \"<string>\",\n     \"etag\": \"<string>\",\n     \"name\": \"<string>\"\n    },\n    \"assigned_to\": {\n     \"id\": \"schema type not provided\",\n     \"type\": \"<string>\",\n     \"name\": \"<string>\",\n     \"login\": \"<email>\"\n    },\n    \"message\": \"<string>\",\n    \"completed_at\": \"<dateTime>\",\n    \"assigned_at\": \"<dateTime>\",\n    \"reminded_at\": \"<dateTime>\",\n    \"resolution_state\": \"<string>\",\n    \"assigned_by\": {\n     \"id\": \"schema type not provided\",\n     \"type\": \"<string>\",\n     \"name\": \"<string>\",\n     \"login\": \"<email>\"\n    }\n   },\n   {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"item\": {\n     \"id\": \"schema type not provided\",\n     \"type\": \"<string>\",\n     \"sequence_id\": \"<string>\",\n     \"etag\": \"<string>\",\n     \"name\": \"<string>\"\n    },\n    \"assigned_to\": {\n     \"id\": \"schema type not provided\",\n     \"type\": \"<string>\",\n     \"name\": \"<string>\",\n     \"login\": \"<email>\"\n    },\n    \"message\": \"<string>\",\n    \"completed_at\": \"<dateTime>\",\n    \"assigned_at\": \"<dateTime>\",\n    \"reminded_at\": \"<dateTime>\",\n    \"resolution_state\": \"<string>\",\n    \"assigned_by\": {\n     \"id\": \"schema type not provided\",\n     \"type\": \"<string>\",\n     \"name\": \"<string>\",\n     \"login\": \"<email>\"\n    }\n   }\n  ]\n },\n \"is_completed\": \"<boolean>\",\n \"created_by\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"created_at\": \"<dateTime>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "7721d3ea-288b-4ac2-b21d-54c09c0eb466",
          "name": "{terms of service id}",
          "item": [
            {
              "id": "392203fb-5c83-490f-baf2-f66821579b66",
              "name": "Get terms of service",
              "request": {
                "name": "Get terms of service",
                "description": {
                  "content": "Fetches a specific terms of service.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "terms_of_services",
                    ":terms_of_service_id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "description": {
                        "content": "The ID of the terms of service.",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "<string>",
                      "key": "terms_of_service_id"
                    }
                  ]
                },
                "method": "GET",
                "auth": {
                  "type": "oauth2"
                }
              },
              "response": [
                {
                  "id": "9c605cd5-cc54-43f4-bbea-80b3859fe78d",
                  "name": "Returns a terms of service object.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "terms_of_services",
                        "<string>"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "method": "GET",
                    "body": {}
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"status\": \"<string>\",\n \"enterprise\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\"\n },\n \"tos_type\": \"<string>\",\n \"text\": \"<string>\",\n \"created_at\": \"<dateTime>\",\n \"modified_at\": \"<dateTime>\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": []
            },
            {
              "id": "a0d521b8-bff4-4166-b480-631b2b1b0b20",
              "name": "Update terms of service",
              "request": {
                "name": "Update terms of service",
                "description": {
                  "content": "Updates a specific terms of service.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "terms_of_services",
                    ":terms_of_service_id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "description": {
                        "content": "The ID of the terms of service.",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "<string>",
                      "key": "terms_of_service_id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "auth": {
                  "type": "oauth2"
                },
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"status\": \"<string>\",\n    \"text\": \"<string>\",\n    \"aute4\": false\n}"
                }
              },
              "response": [
                {
                  "id": "a6b61922-9998-4b66-a22d-876a5d74faa5",
                  "name": "Returns an updated terms of service object.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "terms_of_services",
                        "<string>"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "method": "PUT",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"status\": \"<string>\",\n    \"text\": \"<string>\",\n    \"aute4\": false\n}"
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"status\": \"<string>\",\n \"enterprise\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\"\n },\n \"tos_type\": \"<string>\",\n \"text\": \"<string>\",\n \"created_at\": \"<dateTime>\",\n \"modified_at\": \"<dateTime>\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": []
            }
          ],
          "event": []
        }
      ],
      "event": []
    },
    {
      "id": "b23f4d0f-36f4-44ff-872f-5598d5fde53b",
      "name": "terms of service user statuses",
      "item": [
        {
          "id": "17c70cb6-babf-4b17-94d1-d42b9486bb1e",
          "name": "List ToS user statuses",
          "request": {
            "name": "List ToS user statuses",
            "description": {
              "content": "Retrieves an overview of users and their status for a\nterms of service, including Whether they have accepted\nthe terms and when.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "terms_of_service_user_statuses"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "description": "The ID of the terms of service.",
                  "key": "tos_id",
                  "value": "<string>"
                },
                {
                  "description": "Limits results to the given user ID.",
                  "key": "user_id",
                  "value": "<string>"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "027e94d4-b4db-4df4-aead-44a27b9053e6",
              "name": "Returns a list of terms of service statuses.",
              "originalRequest": {
                "url": {
                  "path": [
                    "terms_of_service_user_statuses"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "tos_id",
                      "value": "<string>"
                    },
                    {
                      "key": "user_id",
                      "value": "<string>"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"total_count\": \"<long>\",\n \"entries\": [\n  {\n   \"id\": \"schema type not provided\",\n   \"type\": \"<string>\",\n   \"tos\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\"\n   },\n   \"user\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"is_accepted\": \"<boolean>\",\n   \"created_at\": \"<dateTime>\",\n   \"modified_at\": \"<dateTime>\"\n  },\n  {\n   \"id\": \"schema type not provided\",\n   \"type\": \"<string>\",\n   \"tos\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\"\n   },\n   \"user\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\",\n    \"login\": \"<email>\"\n   },\n   \"is_accepted\": \"<boolean>\",\n   \"created_at\": \"<dateTime>\",\n   \"modified_at\": \"<dateTime>\"\n  }\n ]\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "324eae13-a248-4ffa-a4e5-8c826d885f6e",
          "name": "Set status for new user",
          "request": {
            "name": "Set status for new user",
            "description": {
              "content": "Sets the status for a terms of service for a user.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "terms_of_service_user_statuses"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": {
              "type": "oauth2"
            },
            "body": {
              "mode": "raw",
              "raw": "{\n    \"tos\": {\n        \"id\": \"<string>\",\n        \"type\": \"<string>\"\n    },\n    \"user\": {\n        \"id\": \"<string>\",\n        \"type\": \"<string>\"\n    },\n    \"is_accepted\": \"<boolean>\"\n}"
            }
          },
          "response": [
            {
              "id": "f58d39d9-98c9-4415-87cd-243c76871910",
              "name": "Returns a terms of service status object.",
              "originalRequest": {
                "url": {
                  "path": [
                    "terms_of_service_user_statuses"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"tos\": {\n        \"id\": \"<string>\",\n        \"type\": \"<string>\"\n    },\n    \"user\": {\n        \"id\": \"<string>\",\n        \"type\": \"<string>\"\n    },\n    \"is_accepted\": \"<boolean>\"\n}"
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"tos\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\"\n },\n \"user\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"is_accepted\": \"<boolean>\",\n \"created_at\": \"<dateTime>\",\n \"modified_at\": \"<dateTime>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "0fa873b6-462a-4c2c-b4b8-1ba7f069caa1",
          "name": "Set status for existing user",
          "request": {
            "name": "Set status for existing user",
            "description": {
              "content": "Updates the status for a terms of service for a user.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "terms_of_service_user_statuses",
                ":terms_of_service_user_status_id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "The ID of the terms of service status.",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "terms_of_service_user_status_id"
                }
              ]
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "auth": {
              "type": "oauth2"
            },
            "body": {
              "mode": "raw",
              "raw": "{\n    \"is_accepted\": \"<boolean>\"\n}"
            }
          },
          "response": [
            {
              "id": "8ffadd22-1c7c-4b25-80b1-6cf37784ccd3",
              "name": "Returns the updated terms of service status object.",
              "originalRequest": {
                "url": {
                  "path": [
                    "terms_of_service_user_statuses",
                    "<string>"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"is_accepted\": \"<boolean>\"\n}"
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"tos\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\"\n },\n \"user\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\",\n  \"login\": \"<email>\"\n },\n \"is_accepted\": \"<boolean>\",\n \"created_at\": \"<dateTime>\",\n \"modified_at\": \"<dateTime>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        }
      ],
      "event": []
    },
    {
      "id": "c547e042-96f6-4ba2-a02a-5d2b70f8e984",
      "name": "collaboration whitelist entries",
      "item": [
        {
          "id": "7409dfd0-7d81-48a9-b5ea-cd8ef4fc9be6",
          "name": "List whitelist entries",
          "request": {
            "name": "List whitelist entries",
            "description": {
              "content": "Returns the list of whitelist entries which specify what domains can\ncollaborate with the current enterprise.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "collaboration_whitelist_entries"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "description": "The position marker at which to begin the response.\n\nThis requires `usemarker` to be set to true.",
                  "key": "marker",
                  "value": "<string>"
                },
                {
                  "description": "The maximum number of items to return per page.",
                  "key": "limit",
                  "value": "100"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "f9a6faac-ac72-4f37-a471-e33213fedbc1",
              "name": "Returns a collection of collaboration whitelist entries.",
              "originalRequest": {
                "url": {
                  "path": [
                    "collaboration_whitelist_entries"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "marker",
                      "value": "<string>"
                    },
                    {
                      "key": "limit",
                      "value": "100"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"limit\": \"<long>\",\n \"next_marker\": \"<long>\",\n \"prev_marker\": \"<long>\",\n \"entries\": [\n  {\n   \"id\": \"schema type not provided\",\n   \"type\": \"<string>\",\n   \"domain\": \"<string>\",\n   \"direction\": \"<string>\",\n   \"enterprise\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\"\n   },\n   \"created_at\": \"<dateTime>\"\n  },\n  {\n   \"id\": \"schema type not provided\",\n   \"type\": \"<string>\",\n   \"domain\": \"<string>\",\n   \"direction\": \"<string>\",\n   \"enterprise\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\"\n   },\n   \"created_at\": \"<dateTime>\"\n  }\n ]\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "8978dace-3aac-4f54-8e17-cbba9f2853a4",
          "name": "Create whitelist entry",
          "request": {
            "name": "Create whitelist entry",
            "description": {
              "content": "Creates a collaboration whitelist entry, specifying a domain\nand direction to allow collaboration for.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "collaboration_whitelist_entries"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": {
              "type": "oauth2"
            },
            "body": {
              "mode": "raw",
              "raw": "{\n    \"domain\": \"<string>\",\n    \"direction\": \"<string>\"\n}"
            }
          },
          "response": [
            {
              "id": "a4813843-cd84-4a3b-82bd-57cee72fa9a3",
              "name": "Returns a new collaboration whitelist entry.",
              "originalRequest": {
                "url": {
                  "path": [
                    "collaboration_whitelist_entries"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"domain\": \"<string>\",\n    \"direction\": \"<string>\"\n}"
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"domain\": \"<string>\",\n \"direction\": \"<string>\",\n \"enterprise\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\"\n },\n \"created_at\": \"<dateTime>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "c7dfbb5c-986e-4e20-9d21-0b39ca24e924",
          "name": "{collaboration whitelist entry id}",
          "item": [
            {
              "id": "5820b367-9dfd-4e0d-ada9-0e003d018275",
              "name": "Get whitelist entry",
              "request": {
                "name": "Get whitelist entry",
                "description": {
                  "content": "Returns a specific collaboration whitelist entry.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "collaboration_whitelist_entries",
                    ":collaboration_whitelist_entry_id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "description": {
                        "content": "The ID of the collaboration whitelist item",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "<string>",
                      "key": "collaboration_whitelist_entry_id"
                    }
                  ]
                },
                "method": "GET",
                "auth": {
                  "type": "oauth2"
                }
              },
              "response": [
                {
                  "id": "bd1d064b-5efb-4e77-8cee-33cc2f03f5b2",
                  "name": "Returns a collaboration whitelist entry.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "collaboration_whitelist_entries",
                        "<string>"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "method": "GET",
                    "body": {}
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"domain\": \"<string>\",\n \"direction\": \"<string>\",\n \"enterprise\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\"\n },\n \"created_at\": \"<dateTime>\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": []
            },
            {
              "id": "1dcf90c2-6d27-47ab-9cf9-ff2393fe9fd9",
              "name": "Delete whitelist entry",
              "request": {
                "name": "Delete whitelist entry",
                "description": {
                  "content": "Deletes a specific collaboration whitelist entry.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "collaboration_whitelist_entries",
                    ":collaboration_whitelist_entry_id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "description": {
                        "content": "The ID of the collaboration whitelist item",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "<string>",
                      "key": "collaboration_whitelist_entry_id"
                    }
                  ]
                },
                "method": "DELETE",
                "auth": {
                  "type": "oauth2"
                }
              },
              "response": [
                {
                  "id": "44a77bed-8345-47d4-9972-b805d1560157",
                  "name": "A blank response is returned if the entry was\nsuccessfully deleted.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "collaboration_whitelist_entries",
                        "<string>"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "No Content",
                  "code": 204,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "_postman_previewlanguage": "text"
                }
              ],
              "event": []
            }
          ],
          "event": []
        }
      ],
      "event": []
    },
    {
      "id": "857f1839-062e-49b6-b0f1-49b17e101562",
      "name": "collaboration whitelist exempt targets",
      "item": [
        {
          "id": "4838a285-6389-4072-8bd0-74ddca65e6c4",
          "name": "List whitelist exemptions",
          "request": {
            "name": "List whitelist exemptions",
            "description": {
              "content": "Returns a list of users who have been exempt from the collaboration\nwhitelist.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "collaboration_whitelist_exempt_targets"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "description": "The position marker at which to begin the response.\n\nThis requires `usemarker` to be set to true.",
                  "key": "marker",
                  "value": "<string>"
                },
                {
                  "description": "The maximum number of items to return per page.",
                  "key": "limit",
                  "value": "100"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "0ab39b8a-a08d-4966-89c5-b8cbe592da26",
              "name": "Returns a collection of collaboration whitelist exemptions.",
              "originalRequest": {
                "url": {
                  "path": [
                    "collaboration_whitelist_exempt_targets"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "marker",
                      "value": "<string>"
                    },
                    {
                      "key": "limit",
                      "value": "100"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"limit\": \"<long>\",\n \"next_marker\": \"<long>\",\n \"prev_marker\": \"<long>\",\n \"entries\": [\n  {\n   \"id\": \"schema type not provided\",\n   \"type\": \"<string>\",\n   \"enterprise\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\"\n   },\n   \"user\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\"\n   },\n   \"created_at\": \"<dateTime>\",\n   \"modified_at\": \"<dateTime>\"\n  },\n  {\n   \"id\": \"schema type not provided\",\n   \"type\": \"<string>\",\n   \"enterprise\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\"\n   },\n   \"user\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\",\n    \"name\": \"<string>\"\n   },\n   \"created_at\": \"<dateTime>\",\n   \"modified_at\": \"<dateTime>\"\n  }\n ]\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "bf60df3d-5bc8-4a24-a06d-148eea079e28",
          "name": "Create whitelist exemption",
          "request": {
            "name": "Create whitelist exemption",
            "description": {
              "content": "Creates a collaboration whitelist entry exemption, specifying a user\nthat is exempted from the whitelist.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "collaboration_whitelist_exempt_targets"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": {
              "type": "oauth2"
            },
            "body": {
              "mode": "raw",
              "raw": "{\n    \"user\": {\n        \"id\": \"<string>\"\n    }\n}"
            }
          },
          "response": [
            {
              "id": "66b15f27-584c-4a10-9873-d2b6fb03bdee",
              "name": "Returns a new collaboration whitelist entry.",
              "originalRequest": {
                "url": {
                  "path": [
                    "collaboration_whitelist_exempt_targets"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"user\": {\n        \"id\": \"<string>\"\n    }\n}"
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"enterprise\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\"\n },\n \"user\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\"\n },\n \"created_at\": \"<dateTime>\",\n \"modified_at\": \"<dateTime>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "ab0f3ec8-cd41-47d1-ad4d-d670b42bfd82",
          "name": "{collaboration whitelist exempt target id}",
          "item": [
            {
              "id": "60eedb95-1c35-4a7c-b014-c64c8ffa4023",
              "name": "Get whitelist exemption",
              "request": {
                "name": "Get whitelist exemption",
                "description": {
                  "content": "Returns a users who has been exempt from the collaboration\nwhitelist.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "collaboration_whitelist_exempt_targets",
                    ":collaboration_whitelist_exempt_target_id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "description": {
                        "content": "The ID of the collaboration whitelist exemption",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "<string>",
                      "key": "collaboration_whitelist_exempt_target_id"
                    }
                  ]
                },
                "method": "GET",
                "auth": {
                  "type": "oauth2"
                }
              },
              "response": [
                {
                  "id": "9b821baa-e65b-4a69-b819-f34cf328749b",
                  "name": "Returns a collaboration whitelist exemption.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "collaboration_whitelist_exempt_targets",
                        "<string>"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "method": "GET",
                    "body": {}
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"enterprise\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\"\n },\n \"user\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\",\n  \"name\": \"<string>\"\n },\n \"created_at\": \"<dateTime>\",\n \"modified_at\": \"<dateTime>\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": []
            },
            {
              "id": "1ec758dd-f6b0-4c40-8ad1-3466e773835f",
              "name": "Remove whitelist exemption",
              "request": {
                "name": "Remove whitelist exemption",
                "description": {
                  "content": "Deletes a specific collaboration whitelist exemption.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "collaboration_whitelist_exempt_targets",
                    ":collaboration_whitelist_exempt_target_id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "description": {
                        "content": "The ID of the collaboration whitelist exemption",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "<string>",
                      "key": "collaboration_whitelist_exempt_target_id"
                    }
                  ]
                },
                "method": "DELETE",
                "auth": {
                  "type": "oauth2"
                }
              },
              "response": [
                {
                  "id": "b054d215-43ec-46f9-9d66-04d8759be4d6",
                  "name": "A blank response is returned if the exemption was\nsuccessfully deleted.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "collaboration_whitelist_exempt_targets",
                        "<string>"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "No Content",
                  "code": 204,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "_postman_previewlanguage": "text"
                }
              ],
              "event": []
            }
          ],
          "event": []
        }
      ],
      "event": []
    },
    {
      "id": "99f30dd2-0075-4856-b77e-9f546c95c885",
      "name": "storage policies",
      "item": [
        {
          "id": "7b07435d-68b4-455e-868b-dfd5487d7414",
          "name": "List storage policies",
          "request": {
            "name": "List storage policies",
            "description": {
              "content": "Fetches all the storage policies in the enterprise.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "storage_policies"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response, unless explicitly specified.",
                  "key": "fields",
                  "value": "<string>,<string>"
                },
                {
                  "description": "The position marker at which to begin the response.\n\nThis requires `usemarker` to be set to true.",
                  "key": "marker",
                  "value": "<string>"
                },
                {
                  "description": "The maximum number of items to return per page.",
                  "key": "limit",
                  "value": "100"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "bf6b8f0f-ac4e-4ea6-bbe4-a4dabb626ce1",
              "name": "Returns a collection of storage policies.",
              "originalRequest": {
                "url": {
                  "path": [
                    "storage_policies"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "<string>,<string>"
                    },
                    {
                      "key": "marker",
                      "value": "<string>"
                    },
                    {
                      "key": "limit",
                      "value": "100"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"limit\": \"<long>\",\n \"next_marker\": \"<long>\",\n \"prev_marker\": \"<long>\",\n \"entries\": [\n  {\n   \"id\": \"schema type not provided\",\n   \"type\": \"<string>\",\n   \"name\": \"<string>\"\n  },\n  {\n   \"id\": \"schema type not provided\",\n   \"type\": \"<string>\",\n   \"name\": \"<string>\"\n  }\n ]\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "363d814a-7189-432d-9387-9fa0be3579fd",
          "name": "Get storage policy",
          "request": {
            "name": "Get storage policy",
            "description": {
              "content": "Fetches a specific storage policy.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "storage_policies",
                ":storage_policy_id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "description": {
                    "content": "The ID of the storage policy.",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "<string>",
                  "key": "storage_policy_id"
                }
              ]
            },
            "method": "GET",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "45794470-1f2b-4dec-bc7d-aa01dabeebb8",
              "name": "Returns a storage policy object.",
              "originalRequest": {
                "url": {
                  "path": [
                    "storage_policies",
                    "<string>"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"id\": \"schema type not provided\",\n \"type\": \"<string>\",\n \"name\": \"<string>\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        }
      ],
      "event": []
    },
    {
      "id": "65b79f3e-79df-48e1-8650-05d309c5084a",
      "name": "storage policy assignments",
      "item": [
        {
          "id": "6e58ebf7-59ca-4c3e-93b8-7419f6db593c",
          "name": "List policy assignments",
          "request": {
            "name": "List policy assignments",
            "description": {
              "content": "Fetches all the storage policy assignment for an enterprise or user.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "storage_policy_assignments"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "description": "The position marker at which to begin the response.\n\nThis requires `usemarker` to be set to true.",
                  "key": "marker",
                  "value": "<string>"
                },
                {
                  "description": "The target type to return assignments for",
                  "key": "resolved_for_type",
                  "value": "<string>"
                },
                {
                  "description": "The ID of the user or enterprise to return assignments for",
                  "key": "resolved_for_id",
                  "value": "<string>"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "oauth2"
            }
          },
          "response": [
            {
              "id": "ad39fb5a-a156-4452-9d78-2611c62509e1",
              "name": "Returns a collection of storage policies for\nthe enterprise or user.",
              "originalRequest": {
                "url": {
                  "path": [
                    "storage_policy_assignments"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "marker",
                      "value": "<string>"
                    },
                    {
                      "key": "resolved_for_type",
                      "value": "<string>"
                    },
                    {
                      "key": "resolved_for_id",
                      "value": "<string>"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"limit\": \"<long>\",\n \"next_marker\": \"<long>\",\n \"prev_marker\": \"<long>\",\n \"entries\": [\n  {\n   \"storage_policy\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\"\n   },\n   \"assigned_to\": {\n    \"id\": \"schema type not provided\"\n   }\n  },\n  {\n   \"storage_policy\": {\n    \"id\": \"schema type not provided\",\n    \"type\": \"<string>\"\n   },\n   \"assigned_to\": {\n    \"id\": \"schema type not provided\"\n   }\n  }\n ]\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "e1ad4cbb-bf2a-415b-9b4b-7f97c2baaf8f",
          "name": "Assign storage policy",
          "request": {
            "name": "Assign storage policy",
            "description": {
              "content": "Creates a storage policy assignment for an enterprise or user.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "storage_policy_assignments"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": {
              "type": "oauth2"
            },
            "body": {
              "mode": "raw",
              "raw": "{\n    \"storage_policy\": {\n        \"type\": \"<string>\",\n        \"id\": \"<string>\"\n    },\n    \"assigned_to\": {\n        \"type\": \"<string>\",\n        \"id\": \"<string>\"\n    }\n}"
            }
          },
          "response": [
            {
              "id": "23d9f95c-f0fd-479d-959e-0ba9ce90d9a0",
              "name": "Returns the new storage policy assignment created.",
              "originalRequest": {
                "url": {
                  "path": [
                    "storage_policy_assignments"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"storage_policy\": {\n        \"type\": \"<string>\",\n        \"id\": \"<string>\"\n    },\n    \"assigned_to\": {\n        \"type\": \"<string>\",\n        \"id\": \"<string>\"\n    }\n}"
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n \"storage_policy\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\"\n },\n \"assigned_to\": {\n  \"id\": \"schema type not provided\"\n }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": []
        },
        {
          "id": "0bcea3ce-0396-4d2d-9696-da0aec740a1e",
          "name": "{storage policy assignment id}",
          "item": [
            {
              "id": "826ad31d-998e-4031-b1bd-4c650b4ba14b",
              "name": "Get policy assignment",
              "request": {
                "name": "Get policy assignment",
                "description": {
                  "content": "Fetches a specific storage policy assignment.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "storage_policy_assignments",
                    ":storage_policy_assignment_id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "description": {
                        "content": "The ID of the storage policy assignment.",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "<string>",
                      "key": "storage_policy_assignment_id"
                    }
                  ]
                },
                "method": "GET",
                "auth": {
                  "type": "oauth2"
                }
              },
              "response": [
                {
                  "id": "18c59caa-0dfa-46fc-bbd4-0b426886d5ad",
                  "name": "Returns a storage policy assignment object.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "storage_policy_assignments",
                        "<string>"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "method": "GET",
                    "body": {}
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n \"storage_policy\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\"\n },\n \"assigned_to\": {\n  \"id\": \"schema type not provided\"\n }\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": []
            },
            {
              "id": "819ddd11-d49b-48a3-afa9-d3cc0b4dd826",
              "name": "Update policy assignment",
              "request": {
                "name": "Update policy assignment",
                "description": {
                  "content": "Updates a specific storage policy assignment.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "storage_policy_assignments",
                    ":storage_policy_assignment_id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "description": {
                        "content": "The ID of the storage policy assignment.",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "<string>",
                      "key": "storage_policy_assignment_id"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "auth": {
                  "type": "oauth2"
                },
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"storage_policy\": {\n        \"type\": \"<string>\",\n        \"id\": \"<string>\"\n    },\n    \"laboris0c\": true\n}"
                }
              },
              "response": [
                {
                  "id": "c53d189e-e99b-40c1-b58d-33927139fa72",
                  "name": "Returns an updated storage policy assignment object.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "storage_policy_assignments",
                        "<string>"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "method": "PUT",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"storage_policy\": {\n        \"type\": \"<string>\",\n        \"id\": \"<string>\"\n    },\n    \"laboris0c\": true\n}"
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n \"storage_policy\": {\n  \"id\": \"schema type not provided\",\n  \"type\": \"<string>\"\n },\n \"assigned_to\": {\n  \"id\": \"schema type not provided\"\n }\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": []
            },
            {
              "id": "cf6766e8-0c51-4d9a-ae0d-843da8f4aa77",
              "name": "Unassign storage policy",
              "request": {
                "name": "Unassign storage policy",
                "description": {
                  "content": "Delete a storage policy assignment.\n\nDeleting a storage policy assignment on a user\nwill have the user inherit the enterprise's default\nstorage policy.\n\nThere is a rate limit for calling this endpoint of only\ntwice per user in a 24 hour period.",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "storage_policy_assignments",
                    ":storage_policy_assignment_id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "description": {
                        "content": "The ID of the storage policy assignment.",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "<string>",
                      "key": "storage_policy_assignment_id"
                    }
                  ]
                },
                "method": "DELETE",
                "auth": {
                  "type": "oauth2"
                }
              },
              "response": [
                {
                  "id": "845723af-82eb-4890-870d-a824ecbbb0f3",
                  "name": "Returns an empty response when the storage policy\nassignment is successfully deleted.",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "storage_policy_assignments",
                        "<string>"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "No Content",
                  "code": 204,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "_postman_previewlanguage": "text"
                }
              ],
              "event": []
            }
          ],
          "event": []
        }
      ],
      "event": []
    }
  ],
  "event": [],
  "variable": [
    {
      "id": "baseUrl",
      "type": "string",
      "value": "https://api.box.com/2.0"
    }
  ],
  "info": {
    "_postman_id": "3f87ddeb-cdc9-41ed-a951-cf6d4542fab6",
    "name": "Box Platform 2.0 APIs",
    "version": {},
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "description": {
      "content": "The Box Content API gives you access to secure content management and content experience features for use in your own app. It strives to be RESTful and is organized around the main resources you’re familiar with from the Box web interface.\n\nContact Support: \n{\n\nName : Box Developer Relations\n\nEmail : devrel@box.com\n\n}",
      "type": "text/plain"
    }
  }
}